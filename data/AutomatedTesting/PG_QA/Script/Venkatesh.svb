'USEUNIT DBLib 
'USEUNIT GlobalVars
'USEUNIT WebObjectLib
'USEUNIT RecordSetLib
'USEUNIT EnoviaSearch_PopulateSearchModel
'USEUNIT OR_Enovia

g_strBrowserType="iexplore" 

'**************************************************************************
' Start of Enovia Application Login and Logout Functionality
'************************************************************************** 
                                                                           
'**************************************************************************
' Purpose:  To call Enovia Login related Functions  
'**************************************************************************
                                                                                           
Sub Main                            
                                             
    Call LaunchEnovia("plmtest")
    Call Login("dsmregression") 
    Call Logout     
End Sub
                                                  
'**************************************************************************
' Purpose:  Launching the Enovia Application by passing the Environment   
'**************************************************************************
                                                                   
Function LaunchEnovia(Environment)
    On Error Resume Next
                                                        
  ' Fetch app url  
    URL = GetURL(Environment)
                                                    
    Call Browsers.Item(btIExplorer, "", Browsers.pX86).Run("about:Tabs")
    Sys.Process(g_strBrowserType).ToUrl URL
                                                      
End function
                                                           
'**************************************************************************
' Purpose:  Get the Login details(Userid, Password) from Data base 
' based on the Environment passed in the previous function, Then Login to 
' Enovia Main Page 
'**************************************************************************
                                                            
Function Login(Identifier)
    On Error Resume Next
                                                   
    Dim objUserID, objPassword, objLogin
     
  ' Fectch Application Credentials
                                                   
    arrCreds = GetCredentials(Identifier)
                                                               
    Set objUserID = objGetObject(OR_EnoviaLogin_UserNameEdt,"","")
    objUserID.SetText(arrCreds(0))
                                                                           
    Set objPassword = objGetObject(OR_EnoviaLogin_PasswordEdt,"","")
    objPassword.SetText(arrCreds(1))
                                                                   
    Delay(5000)
                                                                 
    Set objLogin = objGetObject(OR_EnoviaLogin_LoginBtn,"","")
    objLogin.Click()
                                                    
    Delay(5000)
                                                     
    Set objCredOKLogin = objGetObject(OR_EnoviaLogin_OKBtn,"","")
    objCredOKLogin.Click()
                                                      
    Delay(5000)
                                        
    If Err.Number = 0 Then
       Login = True
    Else
       Login  = False
    End If
                                  
End Function
                                                                                
                                                                             
'**************************************************************************
' Purpose:  Logging out of Enovia Application  
'**************************************************************************
                                                        
Function Logout()
    On Error Resume Next
                                                    
    Set objLogout = objGetObject(OR_EnoviaMenu_SignOutLnk,"","")
    objLogout.Click
                                                            
    Set objSignOut = objGetObject(OR_EnoviaMenu_SignOutItm,"","")
    objSignOut.Click
                                                      
End Function
                                              
                                               
'**************************************************************************
' End of Enovia Application Login and Logout Functionality
'**************************************************************************


'**************************************************************************
'             Start of Named Search Field Validation
'************************************************************************** 

'**************************************************************************
' Purpose:  To call Enovia Named Search related fields validation Functions  
'**************************************************************************
                                                                              
sUrl = "https://plmtest.pg.com/enovia/common/emxNavigator.jsp"
                                                                       
Sub EnoviaNameSearch_FieldsValidation_Main
                                                                    
    sPath = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\"&"SearchSpecification_Named"&".xlsx"
    Set g_oModel = EnoviaSearch_ReadExcel_Name(sPath,"Named")   
                                                                             
    Browsers.Item(btIExplorer).run sUrl 
                                                                       
    Call EnoviaNameSearch_Validate_Name()    
    Call EnoviaNameSearch_Validate_Revision
    Call EnoviaNameSearch_Validate_Type
    Call EnoviaNameSearch_Validate_State
    Call EnoviaNameSearch_Validate_Modified
    Call EnoviaNameSearch_Validate_Originated
    Call EnoviaNameSearch_Validate_Title
    Call EnoviaNameSearch_Validate_Owner
                                                                     
End Sub
                                                             
'************************************************************************
                                                                   
                                                  
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Name column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'********************************************************************************************
                                        
Function EnoviaNameSearch_Validate_Name()  
    On Error Resume Next                               
                    
    Dim nRowCountName, sSearchName
    
    Delay(50000) 
               
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box
    Set objsearchValue = objGetObject(OR_EnoviaSearch_SearchValueEdt,"","")
    If objsearchValue.Exists Then
       Sys.HighlightObject(objsearchValue)      
       objsearchValue.SetText(g_oModel.Common.SearchValue)
       Set objsearchValue = Nothing
    End If
                                                                                 
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box   
    Set objsearchLink = objGetObject(OR_EnoviaSearch_SearchLinkLnk,"","")
    If objsearchLink.Exists then
       objsearchLink.Click()
       Set objsearchLink = Nothing  
    End If
                                                                        
   'Get the EnoviaNameSearch_HandlingAlertWindow function to handle Alert Box Window        
    Call EnoviaNameSearch_HandlingAlertWindow("")
                             
   'Get the object of Name into the variable            
    Set objEnoviaSearchName = objGetObject(OR_EnoviaSearch_Name,"","")
                                   
   'Highlight the object for confirmation                                 
    Sys.HighlightObject(objEnoviaSearchName.Cell(1,1))
        
   'Getting the Row Count and storing in a variable                                         
    nRowCountName = objEnoviaSearchName.rowCount
                  
   'Wrting the Row Count in the Log                                       
    Log.Message("Name Search Name RowCount = " &nRowCountName-1)
                      
   'Replacing the Wild card Character( "*" ) with space                                                                           
    sSearchName = aqString.Replace(sSearchName, "*", "")
                                                                           
       IF nRowCountName > 1 then        
          For i= 1 to nRowCountName-1
              if instr(Trim(objEnoviaSearchName.Cell(i,1).innerText),Trim(sSearchName)) > 0 then
                 Log.Message(objEnoviaSearchName.Cell(i,1).innerText)          
              else
                 Log.Message("Name Search Name is not available " + objEnoviaSearchName.Cell(i,1).innerText)
              End If      
          Next        
       End if
            
       If Err.Number = 0 Then
           EnoviaNameSearch_Validate_Name = True
       Else
          EnoviaNameSearch_Validate_Name  = False
       End If                               
End Function 
                                   
          
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Revision column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************
                               
Function EnoviaNameSearch_Validate_Revision
    On Error Resume Next                       
                                  
    DIM sSearchRevision, nRowCountRevision
             
   'Get the Revision value from Data Model Excel
    sSearchRevision = g_oModel.Revision.Revision     
                   
   'Get the object of Revision into the variable                                                
    Set objEnoviaSearchRevision = objGetObject(OR_EnoviaSearch_Fields,"","")
                                               
    If objEnoviaSearchRevision.Exists then 
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaSearchRevision.Cell(1,0))
    End If
                                                                                
   'Getting the Row Count and storing in a variable 
    nRowCountRevision = objEnoviaSearchRevision.rowCount
                               
   'Wrting the Row Count in the Log
    Log.Message("Name Search Revision RowCount = " &nRowCountRevision-1)
                                                  
        IF nRowCountRevision > 1 then        
          For i= 1 to nRowCountRevision-1
              if instr(Trim(objEnoviaSearchRevision.Cell(i,0).innerText),Trim(sSearchRevision)) > 0 then
                 Log.Message(objEnoviaSearchRevision.Cell(i,0).innerText)          
              else
                 Log.Message("Name Search Revision is not available " + objEnoviaSearchRevision.Cell(i,0).innerText)        
              End if
           Next
         End If  
                 
         If Err.Number = 0 Then
            EnoviaNameSearch_Validate_Revision = True
         Else
            EnoviaNameSearch_Validate_Revision  = False
         End If         
                                     
End Function
                 
                        
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************
                                     
Function EnoviaNameSearch_Validate_Type
    On Error Resume Next 
                                
    DIM sSearchType, nRowCountType
                 
   'Get the Type value from Data Model Excel 
    sSearchType = g_oModel.Common.SearchType
               
   'Get the object of Type into the variable    
    Set objEnoviaSearchType = objGetObject(OR_EnoviaSearch_Fields,"","")
                              
    If objEnoviaSearchType.Exists then              
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaSearchType.Cell(1,1))
    End If   
                                                                                                                 
   'Getting the Row Count and storing in a variable                           
    nRowCountType = objEnoviaSearchType.rowCount
                                               
   'Wrting the Row Count in the Log  
    Log.Message("Name Search Type RowCount = " &nRowCountType-1)
                      
        IF nRowCountType > 1 then        
          For i= 1 to nRowCountType-1
              if instr(Trim(objEnoviaSearchType.Cell(i,1).innerText),Trim(sSearchType)) > 0 then
                 Log.Message(objEnoviaSearchType.Cell(i,1).innerText)          
             else
                Log.Message(" Name Search Type is not available " + objEnoviaSearchType.Cell(i,1).innerText)
             End if
          Next        
        End if 
               
        If Err.Number = 0 Then
           EnoviaNameSearch_Validate_Type = True
        Else
           EnoviaNameSearch_Validate_Type  = False
        End If   
                                        
End Function 
                                       
                                         
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the State column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'*******************************************************************************************
                                         
Function EnoviaNameSearch_Validate_State
    On Error Resume Next
                                                   
    DIM sSearchState, nRowCountState
                                            
   'Get the State value from Data Model Excel
    sSearchState = g_oModel.Common.State
    
   'Get the object of State into the variable 
    Set objEnoviaSearchState = objGetObject(OR_EnoviaSearch_Fields,"","")
                                                                                                      
    If objEnoviaSearchState.Exists then
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaSearchState.Cell(1,3))
    End If   
                                                                                                                                                                                                                                                                                     
   'Getting the Row Count and storing in a variable                                               
    nRowCountState = objEnoviaSearchState.rowCount
                         
   'Wrting the Row Count in the Log                                                   
    Log.Message("Name Search State RowCount = " &nRowCountState-1)
                                                                                                                                                                                
    IF nRowCountState > 1 then              
       For i= 1 to nRowCountState-1      
           if instr(Trim(objEnoviaSearchState.Cell(i,3).innerText),Trim(sSearchState)) > 0 then
              Log.Message(objEnoviaSearchState.Cell(i,3).innerText)    
           else
              Log.Message("Name Search State is not available " + objEnoviaSearchState.Cell(i,3).innerText)
           End If     
       Next    
    End if 
                                                  
    If Err.Number = 0 Then
       EnoviaNameSearch_Validate_State = True
    Else
       EnoviaNameSearch_Validate_State  = False
    End If   
                                                        
End Function
                                   
                                                       
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Modified column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************                                       
                           
Function EnoviaNameSearch_Validate_Modified
    On Error Resume Next    
                                                                                                       
    DIM sSearchModified, nRowCountModified
                                 
   'Get the Modified value from Data Model Excel
    sSearchModified = g_oModel.ModifiedDate.SDate
                                          
   'Get the object of Modified into the variable                                        
    Set objEnoviaSearchModified = objGetObject(OR_EnoviaSearch_Fields,"","")
                                                     
    IF objEnoviaSearchModified.Exists then              
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaSearchModified.Cell(1,4))
    End If
                                                                                                                                                                                                
   'Getting the Row Count and storing in a variable
    nRowCountModified = objEnoviaSearchModified.rowCount
                                                                                             
   'Wrting the Row Count in the Log
    Log.Message("Name Search Modified RowCount = " &nRowCountModified-1)
                                                                        
    IF nRowCountModified > 1 then   
       For i= 1 to nRowCountModified-1        
           if instr(Trim(objEnoviaSearchModified.Cell(i,4).innerText),Trim(sSearchModified)) > 0 then
              Log.Message(objEnoviaSearchModified.Cell(i,4).innerText)         
           else
              Log.Message("Name Search Modified is not available " + objEnoviaSearchModified.Cell(i,4).innerText)
           End If
       Next            
    End if  
                     
    If Err.Number = 0 Then
       EnoviaNameSearch_Validate_Modified = True
    Else
       EnoviaNameSearch_Validate_Modified  = False
    End If     
                                                              
End Function
             
                     
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Originated column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************                                                                
                                                       
Function EnoviaNameSearch_Validate_Originated
    On Error Resume Next
                                                             
    DIM sSearchOriginated, nRowCountOriginated
                                       
   'Get the Originated value from Data Model Excel
    sSearchOriginated = g_oModel.OriginatedDate.SDate 
             
   'Get the object of Originated into the variable                                                               
    Set objEnoviaSearchOriginated = objGetObject(OR_EnoviaSearch_Fields,"","")
                                      
    If objEnoviaSearchOriginated.Exists then
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaSearchOriginated.Cell(1,5))
    End If   
                                                                          
   'Getting the Row Count and storing in a variable
    nRowCountOriginated = objEnoviaSearchOriginated.rowCount
                                                                
   'Wrting the Row Count in the Log 
    Log.Message("Name Search Originated RowCount = " &nRowCountOriginated-1)
                                                                
        IF nRowCountOriginated > 1 then
           For i= 1 to nRowCountOriginated-1      
               if instr(Trim(objEnoviaSearchOriginated.Cell(i,5).innerText),Trim(sSearchOriginated)) > 0 then
                  Log.Message(objEnoviaSearchOriginated.Cell(i,5).innerText)     
               else
                  Log.Message("Name Search Originated is not available " + objEnoviaSearchOriginated.Cell(i,5).innerText)        
               End if
           Next    
        End if
                      
        If Err.Number = 0 Then
           EnoviaNameSearch_Validate_Originated = True
        Else
           EnoviaNameSearch_Validate_Originated  = False
        End If 
                                                             
End Function
                                                                           
                                                       
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Title column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'********************************************************************************************                                                                                                 
                                                                                               
Function EnoviaNameSearch_Validate_Title
    On Error Resume Next
                                                                            
    DIM sSearchTitle, nRowCountTitle
                                 
   'Get the title value from Data Model Excel   
    sSearchTitle = g_oModel.Common.Title   
              
   'Get the object of Title into the variable                                                                           
    Set objEnoviaSearchTitle = objGetObject(OR_EnoviaSearch_Fields,"","")
                                                         
    If objEnoviaSearchTitle.Exists then
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaSearchTitle.Cell(1,6))
    End If
                                                                                                                                 
   'Getting the Row Count and storing in a variable
    nRowCountTitle = objEnoviaSearchTitle.rowCount
                                                               
   'Wrting the Row Count in the Log
    Log.Message("Name Search Title RowCount = " &nRowCountTitle-1)
                                                                  
    IF nRowCountTitle > 1 then      
       For i= 1 to nRowCountTitle-1          
           if instr(Trim(objEnoviaSearchTitle.Cell(i,6).innerText),Trim(sSearchTitle)) > 0 then
              Log.Message(objEnoviaSearchTitle.Cell(i,6).innerText)    
           else
              Log.Message("Name Search Title is not available " + objEnoviaSearchTitle.Cell(i,6).innerText)        
           End if
       Next
    End if
      
    If Err.Number = 0 Then
       EnoviaNameSearch_Validate_Title = True
    Else
       EnoviaNameSearch_Validate_Title  = False
    End If 
                                                                          
End Function
                       
                                                                                                                                                         
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Owner column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'********************************************************************************************  
                                                                                        
Function EnoviaNameSearch_Validate_Owner
    On Error Resume Next
                              
    DIM sSearchOwner, nRowCountOwner
    
   'Get the Owner value from Data Model Excel   
    sSearchOwner  = g_oModel.OwnerUser.User
        
   'Get the object of Owner into the variable                                                                            
    Set objEnoviaSearchOwner = objGetObject(OR_EnoviaSearch_Fields,"","")
                                 
    IF objEnoviaSearchOwner.Exists then
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaSearchOwner.Cell(1,9))
    End IF
                                                                                                     
   'Getting the Row Count and storing in a variable
    nRowCountOwner = objEnoviaSearchOwner.rowCount
    
   'Wrting the Row Count in the Log                                                                     
    Log.Message("Name Search Owner RowCount = " &nRowCountOwner-1)
                                                                    
    IF nRowCountOwner > 1 then        
       For i= 1 to nRowCountOwner-1               
           if instr(Trim(objEnoviaSearchOwner.Cell(i,9).innerText),Trim(sSearchOwner)) > 0 then
              Log.Message(objEnoviaSearchOwner.Cell(i,9).innerText)         
           else
              Log.Message("Name Search Owner is not available " + objEnoviaSearchOwner.Cell(i,9).innerText)        
           End if
       Next
    End if
              
    If Err.Number = 0 Then
       EnoviaNameSearch_Validate_Owner = True
    Else
       EnoviaNameSearch_Validate_Owner  = False
    End If 
                                        
End Function
                                        
                                         
'**************************************************************************************
' Purpose:  Locates the Alert Window object and clicks the "OK" Button  
'**************************************************************************************                              
                      
Function EnoviaNameSearch_HandlingAlertWindow(AlertMsg)
    On Error Resume Next
    
   'Get the object of Alert Box and OK Button into the variable                           
    Set objAlert = objGetObject(OR_EnoviaSearch_AlertWnd,"","")
    Set objAlertOK = objGetObject(OR_EnoviaSearch_AlertOKBtn,"","")
                                                                  
    If AlertMsg <> "" Then
       If objAlert.Exists and instr(1,objAlert.Message,AlertMsg,1)  Then   'Check if Alert pop up is displayed and the Alert Message has field Name
         AlertCount = AlertCount+1
         Delay 1000
         EnoviaSearch_HandlingAlertWindow = True  
       else
         EnoviaSearch_HandlingAlertWindow = False   
       End If
    End If
                                     
    objAlertOK.Click
                                                                    
End Function
                                          
                                                
'*********************************************************************************************
'            End of Named Search Field Validation
'*********************************************************************************************



'*********************************************************************************************
'            Start of Full Text Search Field Validation
'*********************************************************************************************


'******************************************************************************
' Purpose:  To call Enovia Full Text Search related fields validation Functions  
'******************************************************************************
                                                                                        
   'OR_EnoviaSearch_Name = Array("WEBOBJECT", "idStr~ObjectIdentifier", "treeBodyTable~treeBodyTable", "")
                                                                                  
    'sUrl1 = "https://plmtest.pg.com/enovia/common/emxNavigator.jsp"                          
     sUrl1 = "https://plmtraining.pg.com/enovia/common/emxNavigator.jsp"                                                       
              
    OR_EnoviaFullTextSearch_Name = Array("WEBOBJECT", "idStr~ObjectIdentifier", "treeBodyTable~treeBodyTable", "")   
    
    OR_EnoviaFullTextSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "")
                                              
    sUrl2 = "https://plmtest.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES%3Dtype_pgIPMDocument%2Ctype_Document%2Ctype_pgPLISecurityClassification%2Ctype_IPControlClass%2Ctype_pgPOADocument%2Ctype_pgFabricatedPart%2Ctype_FormulationPart%2Ctype_RawMaterialPart%2CpgMakingInstructions%2CpgProcessStandard%2Ctype_pgAncillaryRawMaterialPart%2Ctype_pgDeviceProductPart%2Ctype_pgAssembledProductPart%2Ctype_pgPLIProcessingInstruction%2Ctype_pgAuthorizedConfigurationStandard%2Ctype_FormulaTechnicalSpecification%2Ctype_pgMasterProductPart%2Ctype_pgMasterRawMaterialPart%2Ctype_VirtualIntermediate&default=CPN_STATE%3DRelease&showInitialResults=false&table=pgIPMCPNProductDataRefDocSearchList&freezePane=Name&hideHeader=true&HelpMarker=emxhelpfullsearch&queryType=Indexed&formInclusionList=CPN_TYPE%2CCPN_STATE%2CCPN_CATEGORY%2CCPN_CSS_BUSINESS_CATEGORY%2CCPN_PLANT%2CCPN_OWNING_STANDARDS_OFFICE%2CCPN_REVISION&fieldLabels=CPN_TYPE%3AType%2CCPN_STATE%3AState%2CCPN_CATEGORY%3ASecurity+Category+Classification%2CCPN_CSS_BUSINESS_CATEGORY%3ACSS+Business+Category+%28Legacy%29%2CCPN_PLANT%3APlant&removeFieldName=TYPE%2CNAME%2CDESCRIPTION%2COWNER_FULLNAME%2CPOLICY%2CVAULT%2CREVISION%2CCURRENT%2CORIGINATED%2CMODIFIED%2CORIGINATOR_FULLNAME%2CCOMMENT%2CTITLE&viewFormBased=true&showTypeField=false&switchedNavMode=false&parameter=FullTextSearch&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup"
    'sUrl2 = "https://plmtraining.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES%3Dtype_pgIPMDocument%2Ctype_Document%2Ctype_pgPLISecurityClassification%2Ctype_IPControlClass%2Ctype_pgPOADocument%2Ctype_pgFabricatedPart%2Ctype_FormulationPart%2Ctype_RawMaterialPart%2CpgMakingInstructions%2CpgProcessStandard%2Ctype_pgAncillaryRawMaterialPart%2Ctype_pgDeviceProductPart%2Ctype_pgAssembledProductPart%2Ctype_pgPLIProcessingInstruction%2Ctype_pgAuthorizedConfigurationStandard%2Ctype_FormulaTechnicalSpecification%2Ctype_pgMasterProductPart%2Ctype_pgMasterRawMaterialPart%2Ctype_VirtualIntermediate&default=CPN_STATE%3DRelease&showInitialResults=false&table=pgIPMCPNProductDataRefDocSearchList&freezePane=Name&hideHeader=true&HelpMarker=emxhelpfullsearch&queryType=Indexed&formInclusionList=CPN_TYPE%2CCPN_STATE%2CCPN_CATEGORY%2CCPN_CSS_BUSINESS_CATEGORY%2CCPN_PLANT%2CCPN_OWNING_STANDARDS_OFFICE%2CCPN_REVISION&fieldLabels=CPN_TYPE%3AType%2CCPN_STATE%3AState%2CCPN_CATEGORY%3ASecurity+Category+Classification%2CCPN_CSS_BUSINESS_CATEGORY%3ACSS+Business+Category+%28Legacy%29%2CCPN_PLANT%3APlant&removeFieldName=TYPE%2CNAME%2CDESCRIPTION%2COWNER_FULLNAME%2CPOLICY%2CVAULT%2CREVISION%2CCURRENT%2CORIGINATED%2CMODIFIED%2CORIGINATOR_FULLNAME%2CCOMMENT%2CTITLE&viewFormBased=true&showTypeField=false&switchedNavMode=false&parameter=FullTextSearch&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup" 
        
    OR_EnoviaSearchFullText_SearchLinkLnk = Array("WEBOBJECT","ObjectIdentifier~ObjectType~className~tagName~VisibleOnScreen","mx_btn_search~Link~btn-search~A~True","")

                                                                
Sub EnoviaFullTextSearch_FieldsValidation_Main()  
                                         
''  sPath_FullTextSearch = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\"&"SearchSpecification_FullText"&".xlsx"
''  Set g_oModel_FullTextSearch = EnoviaSearch_ReadExcel_Name(sPath_FullTextSearch,"Full Text ")   
                                  
    'Browsers.Item(btIExplorer).Run sUrl1
                         
   ' Delay 50000
                               
    OR_EnoviaSearch_SearchTypeDrp = Array("EVALUATEXPATH",".//*[@id='AEFGlobalFullTextSearch']/a/label","","") 
                      
    Set objsearchType = objGetObject(OR_EnoviaSearch_SearchTypeDrp, "", "")
    If objsearchType.Exists then
      Sys.HighlightObject(objsearchType)
      objsearchType.Click()
    End IF
     
    OR_EnoviaSearch_FullTextSearch = Array("EVALUATEXPATH","//*[@id='AEFGlobalSearchHolder']/div[2]/div/div[2]/ul/li[4]/a/label","","")
    
    Set objsearchFullText = objGetObject(OR_EnoviaSearch_FullTextSearch, "", "")
    IF objsearchFullText.Exists then
       Sys.HighlightObject(objsearchFullText)
       objsearchFullText.Click()
    End IF
         
    Delay 10000 
                                               
    'Browsers.Item(btIExplorer).Navigate sUrl2
                     
    'Delay 50000   
    
    OR_EnoviaSearchFullText_SearchLinkLnk = Array("WEBOBJECT","ObjectIdentifier~ObjectType~className~tagName~VisibleOnScreen","mx_btn_search~Link~btn-search~A~True","")   
                                               
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box
    Set objsearchFullTextValue = objGetObject(OR_EnoviaSearchFullText_SearchEdt,sUrl2,"")
    If objsearchFullTextValue.Exists then 
       Sys.HighlightObject(objsearchFullTextValue)      
    'objsearchValue.SetText(g_oModel_FullTextSearch.Common.SearchValue)
   ' Delay 10000
       objsearchFullTextValue.SetText("CUP*")
       Set objsearchFullTextValue = Nothing
    End IF   
    
    'Delay 5000
                                                      
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box   
    Set objsearchFullTextLink = objGetObject(OR_EnoviaSearchFullText_SearchLinkLnk,sUrl2,"")
    IF objsearchFullTextLink.Exists then
       Sys.HighlightObject(objsearchFullTextLink)
       objsearchFullTextLink.Click()
       Set objsearchFullTextLink = Nothing
    End IF     
     
    Delay 15000
      Call EnoviaFullTextSearch_Validate_Name            
      Call EnoviaFullTextSearch_Validate_Revision
      Call EnoviaFullTextSearch_Validate_Type
      Call EnoviaFullTextSearch_Validate_State
      Call EnoviaFullTextSearch_Validate_Plant
      Call EnoviaFullTextSearch_Validate_PDFString
         
End Sub
       

'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Name column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'********************************************************************************************
                                        
Function EnoviaFullTextSearch_Validate_Name()  
    On Error Resume Next         
    OR_EnoviaFullTextSearch_Name = Array("WEBOBJECT", "idStr~ObjectIdentifier", "treeBodyTable~treeBodyTable", "")                          
   sUrl2 = "https://plmqa.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES%3Dtype_pgIPMDocument%2Ctype_Document%2Ctype_pgPLISecurityClassification%2Ctype_IPControlClass%2Ctype_pgPOADocument%2Ctype_pgFabricatedPart%2Ctype_FormulationPart%2Ctype_RawMaterialPart%2CpgMakingInstructions%2CpgProcessStandard%2Ctype_pgAncillaryRawMaterialPart%2Ctype_pgDeviceProductPart%2Ctype_pgAssembledProductPart%2Ctype_pgPLIProcessingInstruction%2Ctype_pgAuthorizedConfigurationStandard%2Ctype_FormulaTechnicalSpecification%2Ctype_pgMasterProductPart%2Ctype_pgMasterRawMaterialPart%2Ctype_VirtualIntermediate&default=CPN_STATE%3DRelease&showInitialResults=false&table=pgIPMCPNProductDataRefDocSearchList&freezePane=Name&hideHeader=true&HelpMarker=emxhelpfullsearch&queryType=Indexed&formInclusionList=CPN_TYPE%2CCPN_STATE%2CCPN_CATEGORY%2CCPN_CSS_BUSINESS_CATEGORY%2CCPN_PLANT%2CCPN_OWNING_STANDARDS_OFFICE%2CCPN_REVISION&fieldLabels=CPN_TYPE%3AType%2CCPN_STATE%3AState%2CCPN_CATEGORY%3ASecurity+Category+Classification%2CCPN_CSS_BUSINESS_CATEGORY%3ACSS+Business+Category+%28Legacy%29%2CCPN_PLANT%3APlant&removeFieldName=TYPE%2CNAME%2CDESCRIPTION%2COWNER_FULLNAME%2CPOLICY%2CVAULT%2CREVISION%2CCURRENT%2CORIGINATED%2CMODIFIED%2CORIGINATOR_FULLNAME%2CCOMMENT%2CTITLE&viewFormBased=true&showTypeField=false&switchedNavMode=false&parameter=FullTextSearch&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup"
           
    Dim nRowCountFullTextName, sSearchFullTextName
            
    sSearchFullTextName = "CUP*"
                                                                     
   'Get the EnoviaNameSearch_HandlingAlertWindow function to handle Alert Box Window        
    'Call EnoviaNameSearch_HandlingAlertWindow("")
                             
   'Get the object of Name into the variable            
    Set objEnoviaFullTextSearchName = objGetObject(OR_EnoviaFullTextSearch_Name,sUrl2,"")
    
    IF objEnoviaFullTextSearchName.Exists then
   'Highlight the object for confirmation                                 
       Sys.HighlightObject(objEnoviaFullTextSearchName.Cell(1,1))
    End If
        
   'Getting the Row Count and storing in a variable                                         
    nRowCountFullTextName = objEnoviaFullTextSearchName.rowCount
                  
   'Wrting the Row Count in the Log                                       
    Log.Message("Full Text Search Name RowCount = " &nRowCountFullTextName-1)
                      
   'Replacing the Wild card Character( "*" ) with space                                                                           
    sSearchFullTextName = aqString.Replace(sSearchFullTextName, "*", "")
                                                                           
       IF nRowCountFullTextName > 1 then        
          For i= 1 to nRowCountFullTextName-1
              if instr(Trim(objEnoviaFullTextSearchName.Cell(i,1).innerText),Trim(sSearchFullTextName)) > 0 then
                 Log.Message(objEnoviaFullTextSearchName.Cell(i,1).innerText)          
              else
                 Log.Message("Full Text Search Name is not available " + objEnoviaFullTextSearchName.Cell(i,1).innerText)
              End If      
          Next        
       End if
            
       If Err.Number = 0 Then
           EnoviaFullTextSearch_Validate_Name = True
       Else
          EnoviaFullTextSearch_Validate_Name  = False
       End If                               
End Function 
                                                                
                                                                                                               
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Revision column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaFullTextSearch_Validate_Revision
    On Error Resume Next
                             
    DIM sSearchFullTextRevision, nRowCountFullTextRevision
                                                                
   'Get the Revision value from Data Model Excel   
    sSearchFullTextRevision  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaFullTextSearchRevision = objGetObject(OR_EnoviaFullTextSearch_Fields,sUrl2,"")
                                                    
    IF objEnoviaFullTextSearchRevision.Exists then                                             
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaFullTextSearchRevision.Cell(1,0))
    End IF
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountFullTextRevision = objEnoviaFullTextSearchRevision.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Full Text Search Revision RowCount = " &nRowCountFullTextRevision-1)
                                      
    IF nRowCountFullTextRevision > 1 then        
       For i= 1 to nRowCountFullTextRevision-1
           if instr(Trim(objEnoviaFullTextSearchRevision.Cell(i,0).innerText),Trim(sSearchFullTextRevision)) > 0 then
              Log.Message(objEnoviaFullTextSearchRevision.Cell(i,0).innerText)          
           else
                 Log.Message("Full Text Search Revision is not available " + objEnoviaFullTextSearchRevision.Cell(i,0).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaFullTextSearch_Validate_Revision = True
    Else
       EnoviaFullTextSearch_Validate_Revision  = False
    End If        
                                     
End Function
                                 
                                                   
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaFullTextSearch_Validate_Type
    On Error Resume Next
        
    DIM sSearchFullTextType, nRowCountFullTextType
                                                               
'   sSearchFullTextType = "Finished Product Part"                                                                   
      
   'Get the Revision value from Data Model Excel   
    sSearchFullTextType  = g_oModel_FullTextSearch.oFullTxtSrch.Common.sType
                                                            
    Set objEnoviaFullTextSearchType = objGetObject(OR_EnoviaFullTextSearch_Fields, sUrl2,"")
    If objEnoviaFullTextSearchType.Exists then                                            
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaFullTextSearchType.Cell(1,2))
    End IF
                                           
   'Getting the Row Count and storing in a variable                            
    nRowCountFullTextType = objEnoviaFullTextSearchType.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Full Text Search Type RowCount = " &nRowCountFullTextType-1)
                                      
    IF nRowCountFullTextType > 1 then        
       For i= 1 to nRowCountFullTextType-1
           if instr(Trim(objEnoviaFullTextSearchType.Cell(i,2).innerText),Trim(sSearchFullTextType)) > 0 then
              Log.Message(objEnoviaFullTextSearchType.Cell(i,2).innerText)          
           else
              Log.Message(" Full Text Search Type is not available " + objEnoviaFullTextSearchType.Cell(i,2).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaFullTextSearch_Validate_Type = True
    Else
       EnoviaFullTextSearch_Validate_Type  = False
    End If      
                                        
End Function 
                                                         
                                
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the State column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'******************************************************************************************* 
                           
Function EnoviaFullTextSearch_Validate_State 
    On Error Resume Next
                                        
    DIM sSearchFullTextState, nRowCountFullTextState
                                                 
'    sSearchFullTextState = "Release" 
               
   'Get the State value from Data Model Excel   
    sSearchFullTextState  = g_oModel_FullTextSearch.oFullTxtSrch.Common.State
                                            
    Set objEnoviaFullTextSearchState = objGetObject(OR_EnoviaFullTextSearch_Fields,sUrl2,"")
                                            
    IF objEnoviaFullTextSearchState.Exists then                                  
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaFullTextSearchState.Cell(1,6))
    End IF
                                                                                 
   'Getting the Row Count and storing in a variable 
    nRowCountFullTextState = objEnoviaFullTextSearchState.rowCount
                  
   'Wrting the Row Count in the Log                                                 
    Log.Message("Full Text Search State RowCount = " &nRowCountFullTextState-1)
                                                                                                                                     
    IF nRowCountFullTextState > 1 then              
       For i= 1 to nRowCountFullTextState-1      
           if instr(Trim(objEnoviaFullTextSearchState.Cell(i,6).innerText),Trim(sSearchFullTextState)) > 0 then
              Log.Message(objEnoviaFullTextSearchState.Cell(i,6).innerText)    
           else
              Log.Message("Full Text Search State is not available " + objEnoviaFullTextSearchState.Cell(i,6).innerText)
           End If     
       Next    
    End if
                                
    If Err.Number = 0 Then
       EnoviaFullTextSearch_Validate_State = True
    Else
      EnoviaFullTextSearch_Validate_State  = False
    End If         
                            
End Function
                                   
                                
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Plant column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'******************************************************************************************** 
                                              
Function EnoviaFullTextSearch_Validate_Plant
    On Error Resume Next
                                                                 
    DIM sSearchFullTextPlant, nRowCountFullTextPlant
                         
'   sSearchFullTextPlant = "Dish Care"              
      
   'Get the Plant value from Data Model Excel   
    sSearchFullTextPlant  = g_oModel_FullTextSearch.oFullTxtSrch.Plant
                                                                           
    Set objEnoviaFullTextSearchPlant = objGetObject(OR_EnoviaFullTextSearch_Fields,sUrl2,"")
                                                  
    IF objEnoviaFullTextSearchPlant.Exists then                                            
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaFullTextSearchPlant.Cell(1,8))
    End IF   
                                                                               
   'Getting the Row Count and storing in a variable                                                                                 
    nRowCountFullTextPlant = objEnoviaFullTextSearchPlant.rowCount
                                                       
   'Wrting the Row Count in the Log                                                              
    Log.Message("Full Text Search Plant RowCount = " &nRowCountFullTextPlant-1)
                                                                                                                     
    IF nRowCountFullTextPlant > 1 then      
       For i= 1 to nRowCountFullTextPlant-1          
           if instr(Trim(objEnoviaFullTextSearchPlant.Cell(i,8).innerText),Trim(sSearchFullTextPlant)) > 0 then
              Log.Message(objEnoviaFullTextSearchPlant.Cell(i,8).innerText)    
           else
              Log.Message(" Full Text Search Plant is not available " + objEnoviaFullTextSearchPlant.Cell(i,8).innerText)        
           End if
       Next
    End if
                                                   
    If Err.Number = 0 Then
       EnoviaFullTextSearch_Validate_Plant = True
    Else
       EnoviaFullTextSearch_Validate_Plant  = False
    End If
                                                                                  
End Function
                                                                                                                              
                                                                                            
'********************************************************************************************
' Purpose:  After Clicking the PDF file available in the Browser, Dowloads or Stores the File
'           in the local Folder, Stores the file content to a variable and find the String
'           availability in the File  
' Returns:  If the string is available in the PDF file, then it logs the message
'           as "The document contains the string " with String value 
'           If String is not available in the PDF File, then it logs the message 
'           as " The document does not contain the specified string "
'********************************************************************************************
                                                                                                                        
Function EnoviaFullTextSearch_Validate_PDFString
    On Error Resume Next                             
    'sUrl2= "https://plmqa.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES%3Dtype_pgIPMDocument%2Ctype_Document%2Ctype_pgPLISecurityClassification%2Ctype_IPControlClass%2Ctype_pgPOADocument%2Ctype_pgFabricatedPart%2Ctype_FormulationPart%2Ctype_RawMaterialPart%2CpgMakingInstructions%2CpgProcessStandard%2Ctype_pgAncillaryRawMaterialPart%2Ctype_pgDeviceProductPart%2Ctype_pgAssembledProductPart%2Ctype_pgPLIProcessingInstruction%2Ctype_pgAuthorizedConfigurationStandard%2Ctype_FormulaTechnicalSpecification%2Ctype_pgMasterProductPart%2Ctype_pgMasterRawMaterialPart%2Ctype_VirtualIntermediate&default=CPN_STATE%3DRelease&showInitialResults=false&table=pgIPMCPNProductDataRefDocSearchList&freezePane=Name&hideHeader=true&HelpMarker=emxhelpfullsearch&queryType=Indexed&formInclusionList=CPN_TYPE%2CCPN_STATE%2CCPN_CATEGORY%2CCPN_CSS_BUSINESS_CATEGORY%2CCPN_PLANT%2CCPN_OWNING_STANDARDS_OFFICE%2CCPN_REVISION&fieldLabels=CPN_TYPE%3AType%2CCPN_STATE%3AState%2CCPN_CATEGORY%3ASecurity+Category+Classification%2CCPN_CSS_BUSINESS_CATEGORY%3ACSS+Business+Category+%28Legacy%29%2CCPN_PLANT%3APlant&removeFieldName=TYPE%2CNAME%2CDESCRIPTION%2COWNER_FULLNAME%2CPOLICY%2CVAULT%2CREVISION%2CCURRENT%2CORIGINATED%2CMODIFIED%2CORIGINATOR_FULLNAME%2CCOMMENT%2CTITLE&viewFormBased=true&showTypeField=false&switchedNavMode=false&parameter=FullTextSearch&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup"
    OR_EnoviaFullTextSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "")    
    g_SearchPageURL   = "https://*.pg.com*/enovia/common/emxFullSearch.jsp"                                                                                                       
    DIM sSearchFullTextPDFString, nRowCountFullTextTSPDF
                                                            
    Set objEnoviaFullTextSearchTSPDF = objGetObject(OR_EnoviaFullTextSearch_Fields,g_SearchPageURL,"")
    
    IF objEnoviaFullTextSearchTSPDF.Exists then                                               
   'Getting the Row Count and storing in a variable                                                                                 
       nRowCountFullTextTSPDF = objEnoviaFullTextSearchTSPDF.rowCount
    End IF
                                                                                     
   'Wrting the Row Count in the Log                                                              
    Log.Message("Full Text Search TSPDF RowCount = " &nRowCountFullTextTSPDF-1)
                 
    nRowCountFullTextTSPDF = 2
                                        
    IF nRowCountFullTextTSPDF > 1 then      
       For i= 1 to nRowCountFullTextTSPDF-1  
           Sys.HighlightObject(objEnoviaFullTextSearchTSPDF.Cell(i,1)).Link(0).Image("iconActionPDF_gif")
           objEnoviaFullTextSearchTSPDF.Cell(i,1).Link(0).Image("iconActionPDF_gif").click    
           Delay 4000    
           g_sPDFFilename = EnoviaFullTextSearch_DowloadPDF                                               
           Delay 2000
           Call EnoviaFullTextSearch_SearchStringIPDF_Deletefile(g_sPDFFilename)
           Delay 3000
       Next
    End if  
                          
    If Err.Number = 0 Then
       EnoviaFullTextSearch_Validate_PDFString = True
    Else
       EnoviaFullTextSearch_Validate_PDFString = False
    End If                                                                                               
                                                                                           
End Function
                                                                                     
                                                                              
Function EnoviaFullTextSearch_DowloadPDF                                         
                                                                                 
    Set s1=Sys.Browser("iexplore").Browserwindow(1)                               
                                                                               
    Set frame=s1.findChild("WndClass","Frame Notification Bar",5)                              
            
    Set Namevalue = frame.FindChild("ObjectIdentifier","Notification_bar_Text",2)               
    Sys.HighlightObject(Namevalue) 
    
    Delay 1000                                      
    sValue= Namevalue.value                                         
                                         
    Obj1=split(sValue,".")                                      
    objfilename=Obj1(0)                                             
    sPDFFilename=Trim(Mid(objfilename,20)&".pdf")                             
                                                                                              
    Set objdownbtn=frame.findChild("Name","UIAObject(1)",5)
    Sys.HighlightObject(objdownbtn)                          
    objdownbtn.Click                                                            
                                                                                    
    Delay(3000)                                                              
                                                                                
    Sys.Keys "[Down][Enter]"                                                                         
    Delay 2000                                                                    
                                                                              
    Set objwnd = Sys.Process(g_strBrowserType).window("*","Save As")                          
                                                                         
   ' Set objEdit = objwnd.FindChild("WndClass","Edit",5)                          
                                                                       
 '  objEdit.Keys foldinfo&filename                
                                                                       
    Set objsavebtn = objwnd.FindChild("WndCaption","&Save")
    'Delay 2000
    
    'Sys.HighlightObject(objsavebtn)
    objsavebtn.Click                                                         
                                                                                 
    Delay 5000  
    
''  Sys.Browser("iexplore").Window("#32770", "Confirm Save As", 1).
'  UIAObject("Confirm_Save_As").Window("CtrlNotifySink", "", 7).
'  Window("Button", "&Yes", 1) 
'   
   Set objwnd1 = Sys.Process(g_strBrowserType).window("*","Confirm Save As") 
   Sys.HighlightObject(objwnd1)
   
   If objwnd1.Exists then    
    Set objYesbtn = objwnd1.FindChild("WndCaption", "&Yes",4)
       
    
    Sys.HighlightObject(objYesbtn)      
    objYesbtn.Click
    
   End If
        
   'Delay 2000
                                      
   Set objClosebtn = frame.FindChild("ObjectIdentifier","Close",2) 
                                                            
   objClosebtn.click     
     
    EnoviaFullTextSearch_DowloadPDF=sPDFFilename
                                                                                                
End Function 

 
Function  EnoviaFullTextSearch_SearchStringIPDF_Deletefile (Var1)
           
   ' sPath = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\SearchData.xlsx"
    'g_pdf_SearchFilePath
'    sPath = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\Search.xlsx"
'    g_pdf_SearchFilePath = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.Path&"Files\PDF\"
'   msgbox  g_pdf_SearchFilePath  
                                                                                                    
    Set objPDF = Javaclasses.org_apache_pdfbox_pdmodel.PDDocument.load_3("D:\Users\venkkuma\Downloads\"&Var1)
 
    'Set objPDF = Javaclasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(g_pdf_SearchFilePath&Var1)
                                                                                            
    Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
                                                  
    If textStripperObj.Exists then
       text = textStripperObj.getText_2(objPDF)
    End IF
                                                                                                    
    Stringtofind = "CUP"                                      
                                                                                             
    If (aqString.Find(text, Stringtofind)> -1) Then                                 
        Log.Message "The document contains the string: " &Stringtofind                      
    Else                                                                         
        Log.Warning("The document does not contain the specified string ")              
    End If
      
    sDeleteStatus = aqFileSystem.DeleteFile("D:\Users\venkkuma\Downloads\"&Var1)
      
    IF sDeleteStatus = True then
      Log.Message "The PDF file " +Var1 + "has been deleted Successfully from the Folder " 
    else
     Log.Warning "The PDF file has not been deleted from the Folder " 
    end if
              
    If Err.Number = 0 Then
       EnoviaFullTextSearch_SearchStringIPDF_Deletefile = True
    Else
       EnoviaFullTextSearch_SearchStringIPDF_Deletefile  = False
    End If
                         
End Function
                                                                                      
                                                                                                                                                                      
'*********************************************************************************************
'            End of Full Text Search Field Validation
'*********************************************************************************************



'*********************************************************************************************
'            Start of Product Data Search Field Validation
'*********************************************************************************************
                                                                   
                                                                                          
'**********************************************************************************
' Purpose:  To call Enovia Product Data Search related fields validation Functions  
'**********************************************************************************
    sUrl1 = "https://plmtraining.pg.com/enovia/common/emxNavigator.jsp" 
    sUrl3 = "https://*.pg.com/enovia/common/emxFullSearch.jsp"
                                           
    OR_EnoviaSearch_SearchDrp = Array("EVALUATEXPATH",".//*[@id='AEFGlobalFullTextSearch']/a/label","","")
    OR_EnoviaSearchProductSpec_SearchDrp = Array("EVALUATEXPATH",".//*[@id='CPNSearch']/label","","") 
    OR_EnoviaSearchFindProdData_SearchDrp = Array("EVALUATEXPATH",".//*[@id='AEFGlobalSearchHolder']/div[2]/div/div[2]/ul/li[5]/ul/li[1]/a/label","","")
    OR_EnoviaSearchFindProdData_SearchEdt = Array("NATIVEWEBOBJECT", "idStr", "txtTextSearch","INPUT")
    OR_EnoviaSearchProdData_SearchLinkLnk = Array("WEBOBJECT","ObjectIdentifier~ObjectType~className~tagName~VisibleOnScreen","mx_btn_search~Link~btn-search~A~True","")
    OR_EnoviaProductDataSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "") 
    OR_EnoviaProductDataSearch_Name = Array("WEBOBJECT", "idStr~ObjectIdentifier", "treeBodyTable~treeBodyTable", "")
                                                                                                                                        
Sub EnoviaProductDataSearch_FieldsValidation_Main()  
                                                                   
'need to change                                                                                      
''  sPath_ProductDataSearch = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\"&"SearchSpecification_FullText"&".xlsx"
''  Set g_oModel_ProductDataSearch = EnoviaSearch_ReadExcel_Name(sPath_FullTextSearch,"Full Text ") 
    
    Browsers.Item(btIExplorer).Run sUrl1
    
    Delay 40000
    
    Set objsearchType=objGetObject(OR_EnoviaSearch_SearchDrp, "", "")
    IF objsearchType.Exists then
       objsearchType.Click()
       Set objsearchType = Nothing
    End IF
                 
    Set objsearchFindProdDataSpec=objGetObject(OR_EnoviaSearchProductSpec_SearchDrp, "", "")
    If objsearchFindProdDataSpec.Exists then
       objsearchFindProdDataSpec.Click()
       Set objsearchFindProdDataSpec = Nothing
    End IF   
      
    Set objsearchFindProdData=objGetObject(OR_EnoviaSearchFindProdData_SearchDrp, "", "")
    If objsearchFindProdData.Exists then
       objsearchFindProdData.Click()
       Set objsearchFindProdData = Nothing
    End If
      
    Set objSearchVal = objGetObject(OR_EnoviaSearchFindProdData_SearchEdt,sUrl3,"")
    If objSearchVal.Exists then
    'objSearchVal.SetText(oModel.Common.SearchValue)
       Sys.HighlightObject(objSearchVal)
       objSearchVal.SetText("CUP*")
       Set objSearchVal = Nothing
    End IF       
      
    Set objPageSize = objGetObject(OR_EnoviaSearchFindProdData_PagesizeEdt,sUrl3,"")
    If objPageSize.Exists then
    'objPageSize.SetText(oModel.Common.LimitResults)
       objPageSize.SetText("10")
       Set objPageSize = Nothing
    End IF   
    
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box   
    Set objsearchProductDataLink = objGetObject(OR_EnoviaSearchProdData_SearchLinkLnk,sUrl3,"")
    IF objsearchProductDataLink.Exists then
       Sys.HighlightObject(objsearchProductDataLink)
       objsearchProductDataLink.Click()
       Set objsearchProductDataLink = Nothing
    End IF     
       
    Delay 20000                                      
                                                                      
    Call EnoviaProductDataSearch_Validate_Revision 
    Call EnoviaProductDataSearch_Validate_Type
    Call EnoviaProductDataSearch_Validate_Specification_Sub_Type
    Call EnoviaProductDataSearch_Validate_Title_SAP_Description
    Call EnoviaProductDataSearch_Validate_State
    Call EnoviaProductDataSearch_Validate_Originator
    Call EnoviaProductDataSearch_Validate_Policy
    Call EnoviaProductDataSearch_Validate_Other_Names
    Call EnoviaProductData_Validate_PDFString
    
End Sub


'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Name column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values         
'********************************************************************************************
                                        
Function EnoviaProductDataSearch_Validate_Name()  
    On Error Resume Next   
          
    OR_EnoviaProductDataSearch_Name = Array("WEBOBJECT", "idStr~ObjectIdentifier", "treeBodyTable~treeBodyTable", "")                          
    sUrl2 = "https://plmqa.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES=pgSignupForm,Part,Technical Specification,type_IPControlClass,type_FormulationProcess,type_pgMaterialComposition,type_InternalMaterial:Type!=type_pgNonGCASPart,type_pgManufacturerMaterial:POLICY=Experimental Formulation,Hypothetical-Public Formulation Part,Pilot Formulation,Experimental Formulation Part,Hypothetical-Public Formulation,Production Formulation Part,Production Product Data,Pilot Formulation Part,Pilot Product Data,Hypothetical-Public Product Data,Production Formulation,Hypothetical-Private Formulation,Experimental Product Data,Product Data Specification,Hypothetical-Private Formulation Part,Restricted Product Data Specification,Hypothetical-Private Product Data,Supplier Equivalent,Manufacturer Equivalent,Common Table,pgURTProductData,Classification,Export Control Classification,POA,Virtual Intermediate,Internal Material,Production Formulation Process &removeFieldName=OWNER_FULLNAME,POLICY,VAULT,ORIGINATED,MODIFIED,ORIGINATOR,ORIGINATOR_FULLNAME,TYPE,NAME,REVISION,CURRENT,COMMENT,TITLE&showInitialResults=false&viewFormBased=true&filterColumnPosition=last&queryType=Indexed&table=pgIPMCPNProductDataSearchList&toolbar=CPNFullSearchToolbar&HelpMarker=emxhelpsearchingproductdata&submitAction=refreshCaller&switchedNavMode=false&queryLimit=2000&default=CURRENT=policy_IPMPart.state_Release&program=emxAEFFullSearch:searchProductData&exportButtons=true&showTypeField=false&table=pgIPMCPNProductDataSearchList&Style=dialog&listMode=search&multiColumnSort=true&sortColumnName=Name%2CRevision&parameter=ProductData&toolBar=CPNFullSearchToolbar&suiteKey=eServiceSuiteCPN&HelpMarker=emxhelpsearchingproductdata&selection=multiple&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup"
           
    Dim nRowCountProductDataName, sSearchProductDataName
            
    sSearchProductDataName = "CUP*"
                                                                     
   'Get the EnoviaNameSearch_HandlingAlertWindow function to handle Alert Box Window        
    'Call EnoviaNameSearch_HandlingAlertWindow("")
                             
   'Get the object of Name into the variable            
    Set objEnoviaProductDataSearchName = objGetObject(OR_EnoviaProductDataSearch_Name,sUrl3,"")
    
    IF objEnoviaProductDataSearchName.Exists then
   'Highlight the object for confirmation                                 
       Sys.HighlightObject(objEnoviaProductDataSearchName.Cell(1,1))
    End If
                                  
   'Getting the Row Count and storing in a variable                                         
    nRowCountProductDataName = objEnoviaProductDataSearchName.rowCount
                  
   'Wrting the Row Count in the Log                                       
    Log.Message("Find Product Data Search Name RowCount = " &nRowCountProductDataName-1)
                      
   'Replacing the Wild card Character( "*" ) with space                                                                           
    sSearchProductDataName = aqString.Replace(sSearchProductDataName, "*", "")
                                                                           
    IF nRowCountProductDataName > 1 then        
       For i= 1 to nRowCountProductDataName-1
           if instr(Trim(objEnoviaProductDataSearchName.Cell(i,1).innerText),Trim(sSearchProductDataName)) > 0 then
              Log.Message(objEnoviaProductDataSearchName.Cell(i,1).innerText)          
           else
                 Log.Message("Find Product data Search Name is not available " + objEnoviaProductDataSearchName.Cell(i,1).innerText)
           End If      
       Next        
    End if
            
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Name = True
    Else
       EnoviaProductDataSearch_Validate_Name  = False
    End If
                                                                   
End Function
                                                                                 
                                                                             
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Revision column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Revision
    On Error Resume Next
                             
    DIM sSearchProductDataRevision, nRowCountProductDataRevision
                                                                
    sSearchProductDataRevision = "001"
    
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataRevision  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaProductDataSearchRevision = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
    If objEnoviaProductDataSearchRevision.Exists then                                                     
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaProductDataSearchRevision.Cell(1,0))
    End If
                                                                                 
   'Getting the Row Count and storing in a variable
    nRowCountProductDataRevision = objEnoviaProductDataSearchRevision.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Revision RowCount = " &nRowCountProductDataRevision-1)
                                      
    IF nRowCountProductDataRevision > 1 then        
       For i= 1 to nRowCountProductDataRevision-1
           if instr(Trim(objEnoviaProductDataSearchRevision.Cell(i,0).innerText),Trim(sSearchProductDataRevision)) > 0 then
              Log.Message(objEnoviaProductDataSearchRevision.Cell(i,0).innerText)          
           else
                 Log.Message("Product Data Search Revision is not available " + objEnoviaProductDataSearchRevision.Cell(i,0).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Revision = True
    Else
       EnoviaProductDataSearch_Validate_Revision  = False
    End If        
                                     
End Function
                                                                                   
                                                                         
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Type
    On Error Resume Next
        
    DIM sSearchProductDataType, nRowCountProductDataType
                                                               
    sSearchProductDataType = "FP"                                                                   
      
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataType  = g_oModel_FullTextSearch.oFullTxtSrch.Common.sType
                                                            
    Set objEnoviaProductDataSearchType = objGetObject(OR_EnoviaProductDataSearch_Fields, sUrl3,"")
    IF objEnoviaProductDataSearchType.Exists then                                              
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaProductDataSearchType.Cell(1,2))
    End if   
                                           
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataType = objEnoviaProductDataSearchType.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Type RowCount = " &nRowCountProductDataType-1)
                                      
    IF nRowCountProductDataType > 1 then        
       For i= 1 to nRowCountProductDataType-1
           if instr(Trim(objEnoviaProductDataSearchType.Cell(i,2).innerText),Trim(sSearchProductDataType)) > 0 then
              Log.Message(objEnoviaProductDataSearchType.Cell(i,2).innerText)          
           else
              Log.Message("Product Data Search Type is not available " + objEnoviaProductDataSearchType.Cell(i,2).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Type = True
    Else
       EnoviaProductDataSearch_Validate_Type  = False
    End If      
                                        
End Function 


'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Specification_Sub_Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Specification_Sub_Type
    On Error Resume Next
        
    DIM sSearchProductDataSpecification_Sub_Type, nRowCountProductDataSpecification_Sub_Type
                                                               
    sSearchProductDataSpecification_Sub_Type = "No Access"                                                                   
      
   'Get the Revision value from Data Model Excel   
    'sSearchProductDataSpecification_Sub_Type  = g_oModel_FullTextSearch.oFullTxtSrch.Common.sType
                                                            
    Set objEnoviaProductDataSearchSpecification_Sub_Type = objGetObject(OR_EnoviaProductDataSearch_Fields, sUrl3,"")
                             
    If objEnoviaProductDataSearchSpecification_Sub_Type.Exists then                                              
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(1,4))
    End If
                                                                              
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataSpecification_Sub_Type = objEnoviaProductDataSearchSpecification_Sub_Type.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Specification_Sub_Type RowCount = " &nRowCountProductDataSpecification_Sub_Type-1)
                                      
    IF nRowCountProductDataSpecification_Sub_Type > 1 then        
       For i= 1 to nRowCountProductDataSpecification_Sub_Type-1
           if instr(Trim(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,4).innerText),Trim(sSearchProductDataSpecification_Sub_Type)) > 0 then
              Log.Message(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,4).innerText)          
           else
              Log.Message("Product Data Search Specification_Sub_Type is not available " + objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,4).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Specification_Sub_Type = True
    Else
       EnoviaProductDataSearch_Validate_Specification_Sub_Type  = False
    End If      
                                        
End Function 
                                                                                    
                                                                        
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Title_SAP_Description column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Title_SAP_Description
    On Error Resume Next
        
    DIM sSearchProductDataTitle_SAP_Description, nRowCountProductDataTitle_SAP_Description
                                                               
    sSearchProductDataTitle_SAP_Description = "No Access"                                                                   
      
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataTitle_SAP_Description  = g_oModel_FullTextSearch.oFullTxtSrch.Common.sType
                                                            
    Set objEnoviaProductDataSearchTitle_SAP_Description = objGetObject(OR_EnoviaProductDataSearch_Fields, sUrl3,"")
                             
    If objEnoviaProductDataSearchTitle_SAP_Description.Exists then
   'Highlight the object for confirmation 
       Sys.HighlightObject(objEnoviaProductDataSearchTitle_SAP_Description.Cell(1,5))
    End IF
                                                                                    
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataTitle_SAP_Description = objEnoviaProductDataSearchTitle_SAP_Description.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Title_SAP_Description RowCount = " &nRowCountProductDataTitle_SAP_Description-1)
                                      
    IF nRowCountProductDataTitle_SAP_Description > 1 then        
       For i= 1 to nRowCountProductDataTitle_SAP_Description-1
           if instr(Trim(objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText),Trim(sSearchFullTextType)) > 0 then
              Log.Message(objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText)          
           else
              Log.Message("Product Data Search Title_SAP_Description is not available " + objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Title_SAP_Description = True
    Else
       EnoviaProductDataSearch_Validate_Title_SAP_Description  = False
    End If      
                                        
End Function 


'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Other_Names column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
' Other Names Time being is not coded, this field is not available in PLMTraining,
' But i need to confirm in PLMTest Environment
                              
Function EnoviaProductDataSearch_Validate_Other_Names
    On Error Resume Next
                             
    DIM sSearchProductDataOther_Names, nRowCountProductDataOther_Names
                                          
    sSearchProductDataOther_Names = "No Access"   
                                                                                    
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataOther_Names  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaProductDataSearchOther_Names = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
                    
    If objEnoviaProductDataSearchOther_Names.Exists then                                                     
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaProductDataSearchOther_Names.Cell(1,6))
    End IF   
                                                                                                             
   'Getting the Row Count and storing in a variable
    nRowCountProductDataOther_Names = objEnoviaProductDataSearchOther_Names.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Other_Names RowCount = " &nRowCountProductDataOther_Names-1)
                                      
    IF nRowCountProductDataOther_Names > 1 then        
       For i= 1 to nRowCountProductDataOther_Names-1
           if instr(Trim(objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText),Trim(sSearchProductDataOther_Names)) > 0 then
              Log.Message(objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText)          
           else
                 Log.Message("Product Data Search Other_Names is not available " + objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Other_Names = True
    Else
       EnoviaProductDataSearch_Validate_Other_Names  = False
    End If        
                                     
End Function


'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the State column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_State
    On Error Resume Next
                             
    DIM sSearchProductDataState, nRowCountProductDataState
    
    sSearchProductDataState = "No Access"
                                               
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataState  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaProductDataSearchState = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
    
    IF objEnoviaProductDataSearchState.Exists then
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaProductDataSearchState.Cell(1,7))
    End IF
                                                                                                        
   'Getting the Row Count and storing in a variable
    nRowCountProductDataState = objEnoviaProductDataSearchState.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search State RowCount = " &nRowCountProductDataState-1)
                                      
    IF nRowCountProductDataState > 1 then        
       For i= 1 to nRowCountProductDataState-1
           if instr(Trim(objEnoviaProductDataSearchState.Cell(i,7).innerText),Trim(sSearchProductDataState)) > 0 then
              Log.Message(objEnoviaProductDataSearchState.Cell(i,7).innerText)          
           else
                 Log.Message("Product Data Search State is not available " + objEnoviaProductDataSearchState.Cell(i,7).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_State = True
    Else
       EnoviaProductDataSearch_Validate_State  = False
    End If        
                                     
End Function
                                                                            
                                                     
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Originator column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Originator
    On Error Resume Next
                             
    DIM sSearchProductDataOriginator, nRowCountProductDataOriginator
              
    sSearchProductDataOriginator = "colmenares.b"
                                                      
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataOriginator  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaProductDataSearchOriginator = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
                                           
    IF objEnoviaProductDataSearchOriginator.Exists then                                                 
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaProductDataSearchOriginator.Cell(1,9))
    End IF
                                                                                                                         
   'Getting the Row Count and storing in a variable
    nRowCountProductDataOriginator = objEnoviaProductDataSearchOriginator.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Originator RowCount = " &nRowCountProductDataOriginator-1)
                                      
    IF nRowCountProductDataOriginator > 1 then        
       For i= 1 to nRowCountProductDataOriginator-1
           if instr(Trim(objEnoviaProductDataSearchOriginator.Cell(i,9).innerText),Trim(sSearchProductDataOriginator)) > 0 then
              Log.Message(objEnoviaProductDataSearchOriginator.Cell(i,9).innerText)          
           else
              Log.Message("Product Data Search Originator is not available " + objEnoviaProductDataSearchOriginator.Cell(i,9).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Originator = True
    Else
       EnoviaProductDataSearch_Validate_Originator  = False
    End If        
                                     
End Function
                                                                           
                                                           
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Policy column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Policy
    On Error Resume Next
                             
    DIM sSearchProductDataPolicy, nRowCountProductDataPolicy
           
    sSearchProductDataPolicy = "No Access"
                                                         
   'Get the Revision value from Data Model Excel   
   'sSearchProductDataPolicy  = g_oModel_FullTextSearch.oFullTxtSrch.Revision 
                                                                                        
    Set objEnoviaProductDataSearchPolicy = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
    
    If objEnoviaProductDataSearchPolicy.Exists then
   'Highlight the object for confirmation
       Sys.HighlightObject(objEnoviaProductDataSearchPolicy.Cell(1,11))
    End IF
                                                                                                     
   'Getting the Row Count and storing in a variable
    nRowCountProductDataPolicy = objEnoviaProductDataSearchPolicy.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Policy RowCount = " &nRowCountProductDataPolicy-1)
                                      
    IF nRowCountProductDataPolicy > 1 then        
       For i= 1 to nRowCountProductDataPolicy-1
           if instr(Trim(objEnoviaProductDataSearchPolicy.Cell(i,11).innerText),Trim(sSearchProductDataPolicy)) > 0 then
              Log.Message(objEnoviaProductDataSearchPolicy.Cell(i,11).innerText)          
           else
                 Log.Message("Product Data Search Policy is not available " + objEnoviaProductDataSearchPolicy.Cell(i,11).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Policy = True
    Else
       EnoviaProductDataSearch_Validate_Policy  = False
    End If        
                                     
End Function
                                                                     
                                                                       
                                                                
'********************************************************************************************
' Purpose:  After Clicking the PDF file available in the Browser, Dowloads or Stores the File
'           in the local Folder, Stores the file content to a variable and find the String
'           availability in the File  
' Returns:  If the string is available in the PDF file, then it logs the message
'           as "The document contains the string " with String value 
'           If String is not available in the PDF File, then it logs the message 
'           as " The document does not contain the specified string "
'********************************************************************************************
                                                                                                                        
Function EnoviaProductData_Validate_PDFString
    On Error Resume Next                             
     
    DIM sSearchProductDataPDFString, nRowCountProductDataTSPDF
                                                            
    Set objEnoviaProductDataSearchTSPDF = objGetObject(OR_EnoviaProductDataSearch_Fields,sUrl3,"")
    
    IF objEnoviaProductDataSearchTSPDF.Exists then
   'Sys.HighlightObject(objEnoviaProductDataSearchTSPDF.Cell(1,1))
   'Getting the Row Count and storing in a variable                                                                                 
       nRowCountProductDataTSPDF = objEnoviaProductDataSearchTSPDF.rowCount
    End IF
                                                                                     
   'Wrting the Row Count in the Log                                                              
    Log.Message("Product Data Search TSPDF RowCount = " &nRowCountProductDataTSPDF-1)
                 
    nRowCountProductDataTSPDF = 3
                                        
    IF nRowCountProductDataTSPDF > 1 then      
       For i= 1 to nRowCountProductDataTSPDF-1  
           Sys.HighlightObject(objEnoviaProductDataSearchTSPDF.Cell(i,1)).Link(0).Image("iconActionPDF_gif")
           IF objEnoviaProductDataSearchTSPDF.Cell(i,1).ChildCount >= 1 then
              objEnoviaProductDataSearchTSPDF.Cell(i,1).Link(0).Image("iconActionPDF_gif").click  
              Delay 2000      
              g_sProductDataPDFFilename = EnoviaProductDataSearch_DowloadPDF                                               
              Delay 2000
              Call EnoviaProductDataSearch_SearchStringinPDF_Deletefile(g_sProductDataPDFFilename)
              Delay 2000
           End if           
       Next
    End if  
                          
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_PDFString = True
    Else
       EnoviaProductDataSearch_Validate_PDFString = False
    End If                                                                                               
                                                                                           
End Function
                                                                                     
                                                                              
Function EnoviaProductDataSearch_DowloadPDF                                         
                                                                                 
    Set s1=Sys.Browser("iexplore").Browserwindow(0)                               
                                                                               
    Set frame=s1.findChild("WndClass","Frame Notification Bar",5)                              
        
    Set Namevalue = frame.FindChild("ObjectIdentifier","Notification_bar_Text",2)               
    Sys.HighlightObject(Namevalue)  
    
    Delay 1000                                     
    z= Namevalue.value                                         
                                         
    Obj1=split(z,".")                                      
    b=Obj1(0)                                             
    sProductDataPDFFilename=Trim(Mid(b,20)&".pdf")                             
                                                                                              
    Set objdownbtn=frame.findChild("Name","UIAObject(1)",5)  
    If objdownbtn.Exists then                         
       objdownbtn.Click                                                            
    End IF
                                                                                
    Delay(3000)                                                              
                                                                                
    Sys.Keys "[Down][Enter]"                                                                         
    Delay 2000                                                                    
                                                                              
    Set objwnd = Sys.Process(g_strBrowserType).window("*","Save As")                          
                                                                         
    Set objEdit = objwnd.FindChild("WndClass","Edit",5)                          
                                                                  
 '  objEdit.Keys foldinfo&filename                                        
                                                                      
    Set objsavebtn = objwnd.FindChild("WndCaption","&Save") 
    If objsavebtn.Exists then                        
       objsavebtn.Click                                                         
    End IF
                                                                             
    Delay 2000                   
                                                     
    Set objClosebtn = frame.FindChild("ObjectIdentifier","Close",2) 
    If objClosebtn.Exists then                       
    'Sys.HighlightObject(objClosebtn)                                                     
       objClosebtn.click
    End IF        
      
    EnoviaProductDataSearch_DowloadPDF=sProductDataPDFFilename
                                                                                                
End Function 
                                                                        
                                                                                      
Function  EnoviaProductDataSearch_SearchStringinPDF_Deletefile (Var1)
                                                                                                              
    Set objPDF = Javaclasses.org_apache_pdfbox_pdmodel.PDDocument.load_3("D:\Users\venkkuma\Downloads\"&Var1)
                                                                                         
    Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
                                       
    If textStripperObj.Exists then
    text = textStripperObj.getText_2(objPDF)
    End IF
                                                                                                 
    Stringtofind = "CUP"                                      
                                                                                             
    If (aqString.Find(text, Stringtofind)> -1) Then                                 
        Log.Message "The document contains the string: " &Stringtofind                      
    Else                                                                         
        Log.Warning("The document does not contain the specified string ")              
    End If
      
    sProductDataDeleteStatus = aqFileSystem.DeleteFile("D:\Users\venkkuma\Downloads\"&Var1)
      
    IF sProductDataDeleteStatus = True then
      Log.Warning "The Product Data Search PDF file  " + Var1 + "  has been deleted Successfully from the Folder " 
    else
     Log.Warning "The Product Data Search PDF file has not been deleted from the Folder " 
    end if
              
    If Err.Number = 0 Then
       EnoviaProductDataSearch_SearchStringinPDF_Deletefile = True
    Else
       EnoviaProductDataSearch_SearchStringinPDF_Deletefile  = False
    End If
                         
End Function
                                                                 
                                                                              
'*********************************************************************************************
'            End of Product Data Search Field Validation
'*********************************************************************************************
                                                           
                                                                                                                                                      
'*******************************************************************************
' To findout the column number by passing the column name for Named Search
'*******************************************************************************

Sub BB

Dim nColumnNumber, sColumnName, sSearchType

 sColumnName = "Revision"
 sSearchType = "OR_EnoviaSearch_Fields_Header"
 nColumnNumber = EnoviaSearch_FindColumnNumber(sSearchType, sColumnName)
 Log.Message "The Passed Value is " & sColumnName  + " and the Column Number is "  &nColumnNumber

End Sub 

'********************************************************************************************
' Purpose:  Need to pass the search Type("Named" or "Full Text" or "Find Prod Data" )
' Returns:  Returns Column Name
'********************************************************************************************

Function EnoviaSearch_FindColumnNumber(sSearchType, sColumnName)

OR_EnoviaSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~True", "")
OR_EnoviaSearch_Fields_Header = Array("WEBOBJECT", "idStr~ObjectIdentifier", "headTable~headTable", "")

OR_EnoviaFullTextSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "")
OR_EnoviaFullTextSearch_Fields_Header = Array("WEBOBJECT", "idStr~ObjectIdentifier~ObjectType", "headTable~headTable~Table", "")

OR_EnoviaProductDataSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "")
OR_EnoviaProductDataSearch_Fields_Header = Array("WEBOBJECT", "idStr~ObjectIdentifier~ObjectType", "headTable~headTable~Table", "")
 
Dim nColumnNo

' For Named Search

If Ucase(sSearchType) = Ucase("OR_EnoviaSearch_Fields_Header") then
                      
    If Ucase(sColumnName) = Ucase("Revision") then
       Set objEnoviaSearchRevision12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchRevision12.Exists then
          Set oRevision_Label=objEnoviaSearchRevision12.FindChild("contentText","Revision",6)
          nColumnIndex=(oRevision_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If
    End If

    If Ucase(sColumnName) = Ucase("Type") then
       Set objEnoviaSearchType12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchType12.Exists then 
          Set oType_Label=objEnoviaSearchType12.FindChild("contentText","Type",6)
          nColumnIndex=(oType_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                      
    If Ucase(sColumnName) = Ucase("State") then
       Set objEnoviaSearchState12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchState12.Exists then
          Set oState_Label=objEnoviaSearchState12.FindChild("contentText","State",6)
          nColumnIndex=(oState_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If 
    End If

    If Ucase(sColumnName) = Ucase("Modified") then
       Set objEnoviaSearchModified12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchModified12.Exists then
          Set oModified_Label=objEnoviaSearchModified12.FindChild("contentText","Modified",6)
          nColumnIndex=(oModified_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                         
    If Ucase(sColumnName) = Ucase("Originated") then
       Set objEnoviaSearchOriginated12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchOriginated12.Exists then
          Set oOriginated_Label=objEnoviaSearchOriginated12.FindChild("contentText","Originated",6)
          nColumnIndex=(oOriginated_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End IF   
    End If
                                                         
    If Ucase(sColumnName) = Ucase("Title") then
       Set objEnoviaSearchTitle12 = objGetObject(OR_EnoviaSearch_Fields_Header,"","")
       If objEnoviaSearchTitle12.Exists then
          Set oTitle_Label=objEnoviaSearchTitle12.FindChild("contentText","Title",6)
          nColumnIndex=(oTitle_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
    
End If
                                                          
'For Full Text Search
                                                         
If Ucase(sSearchType) = Ucase("OR_EnoviaFullTextSearch_Fields_Header") then
                                                              
    If Ucase(sColumnName) = Ucase("Revision") then
       Set objEnoviaFullTextSearchRevision12 = objGetObject(OR_EnoviaFullTextSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaFullTextSearchRevision12.Exists then       
          Set oRevisionFT_Label=objEnoviaFullTextSearchRevision12.FindChild("contentText","Revision",6)
          nColumnIndex=(oRevisionFT_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                          
    If Ucase(sColumnName) = Ucase("Type") then
       Set objEnoviaFullTextSearchType12 = objGetObject(OR_EnoviaFullTextSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaFullTextSearchType12.Exists then       
          Set oTypeFT_Label=objEnoviaFullTextSearchType12.FindChild("contentText","Type",6)
          nColumnIndex=(oTypeFT_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                      
    If Ucase(sColumnName) = Ucase("Title/SAP Description") then
       Set objEnoviaFullTextSearchTitleSAPDesc12 = objGetObject(OR_EnoviaFullTextSearch_Fields_Header,g_SearchPageURL,"")
       IF objEnoviaFullTextSearchTitleSAPDesc12.Exists then
          Set oTitleSAPDescFT_Label=objEnoviaFullTextSearchTitleSAPDesc12.FindChild("contentText","Title/SAP Description",6)
          nColumnIndex=(oTitleSAPDescFT_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If
    End If
                                                                                           
    If Ucase(sColumnName) = Ucase("State") then
       Set objEnoviaFullTextSearchState12 = objGetObject(OR_EnoviaFullTextSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaFullTextSearchState12.Exists then       
          Set oStateFT_Label=objEnoviaFullTextSearchState12.FindChild("contentText","State",6)
          nColumnIndex=(oStateFT_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                               
    If Ucase(sColumnName) = Ucase("Plants") then
       Set objEnoviaFullTextSearchPlants12 = objGetObject(OR_EnoviaFullTextSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaFullTextSearchPlants12.Exists then      
          Set oPlantsFT_Label=objEnoviaFullTextSearchPlants12.FindChild("contentText","Plants",6)
          nColumnIndex=(oPlantsFT_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                
End If
                                                           
' For Find Prod Data
                                                          
If Ucase(sSearchType) = Ucase("OR_EnoviaProductDataSearch_Fields") then
                                                               
    If Ucase(sColumnName) = Ucase("Revision") then
       Set objEnoviaProductDataSearchRevision12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchRevision12.Exists then       
          Set oRevisionPD_Label=objEnoviaProductDataSearchRevision12.FindChild("contentText","Revision",6)
          nColumnIndex=(oRevisionPD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If

    If Ucase(sColumnName) = Ucase("Type") then
       Set objEnoviaProductDataSearchType12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchType12.Exists then
          Set oTypePD_Label=objEnoviaProductDataSearchType12.FindChild("contentText","Type",6)
          nColumnIndex=(oTypePD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                     
    If Ucase(sColumnName) = Ucase("Specification SubType") then
       Set objEnoviaProductDataSearchSpecSubType12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchSpecSubType12.Exists then
          Set oSpecSubTypePD_Label=objEnoviaProductDataSearchSpecSubType12.FindChild("contentText","Specification SubType",6)
          nColumnIndex=(oSpecSubTypePD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                                          
    If Ucase(sColumnName) = Ucase("Title/SAP Description") then
       Set objEnoviaProductDataSearchTitleSAPDesc12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       IF objEnoviaProductDataSearchTitleSAPDesc12.Exists then
          Set oTitleSAPDescPD_Label=objEnoviaProductDataSearchTitleSAPDesc12.FindChild("contentText","Title/SAP Description",6)
          nColumnIndex=(oTitleSAPDescPD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If
    End If
                                                       
    If Ucase(sColumnName) = Ucase("Other Names") then
       Set objEnoviaProductDataSearchOtherNames12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchOtherNames12.Exists then
          Set oOtherNamesPD_Label=objEnoviaProductDataSearchOtherNames12.FindChild("contentText","Other Names",6)
          nColumnIndex=(oOtherNamesPD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If
    End If
                                                     
    If Ucase(sColumnName) = Ucase("State") then
       Set objEnoviaProductDataSearchState12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchState12.Exists then
          Set oStatePD_Label=objEnoviaProductDataSearchState12.FindChild("contentText","State",6)
          nColumnIndex=(oStatePD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
                                                       
    If Ucase(sColumnName) = Ucase("Originator") then
       Set objEnoviaProductDataSearchOriginator12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchOriginator12.Exists then
          Set oOriginatorPD_Label=objEnoviaProductDataSearchOriginator12.FindChild("contentText","Originator",6)
          nColumnIndex=(oOriginatorPD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If
    End If
                                              
    If Ucase(sColumnName) = Ucase("Policy") then
       Set objEnoviaProductDataSearchPolicy12 = objGetObject(OR_EnoviaProductDataSearch_Fields_Header,g_SearchPageURL,"")
       If objEnoviaProductDataSearchPolicy12.Exists then
          Set oPolicyPD_Label=objEnoviaProductDataSearchPolicy12.FindChild("contentText","Policy",6)
          nColumnIndex=(oPolicyPD_Label.ColumnIndex)/2
          Log.Message(nColumnIndex)
          nColumnNo = nColumnIndex
       End If   
    End If
        
End IF
                                                     
EnoviaSearch_FindColumnNumber = nColumnIndex
                                                     
End Function 


'*******************************************************************************
' End of EnoviaSearch_FindColumnNumber
'*******************************************************************************