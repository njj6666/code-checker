'USEUNIT WebObjectLib
'USEUNIT OR_Enovia
'USEUNIT ExcelLib
'USEUNIT EnoviaPDT_ValidationUtils
'USEUNIT StringLib
'USEUNIT WindowsUtility
'USEUNIT GlobalVars
'USEUNIT LogLib
'USEUNIT EnoviaPDT_PDTUtils

'Purpose      : Function to Check order of fields in a given page
'Inputs       : sSheetName - SheetName in excel containing the Fields in the expected order
'             : sPartType - Name of the Part type being worked on
'Output       : None               
'Author       : Sandeep  
         
Sub EnoviaPDT_CheckOrderOfFields(sSheetName,sPartType)

  Dim sColumnName, sFilePath, nSearchDepth, sErrorMessage, bPassed, oParent, aFields, oFieldWithSI, aSourceIndexApp,_
  oFieldCollection, aSourceIndex, bFieldFound, oMatchedFieldsDict, aFieldNotFound, aORObject, sURL 
  
  sColumnName = "Field" 'Name of column to be searched in the Excel
  sFilePath =  g_pdt_FileLocation&sPartType&".xlsx"  'Part Type excel file path
  nSearchDepth = Null 'Depth at which FindAllChildren method is run
  sErrorMessage = ""
  bPassed = ""
  'On Error Resume Next
    
  Select Case Ucase(sSheetName) ' Select the Parent Object based on the SheetName
    Case "CREATE"
      If sPartType = "Virtual Intermediate" Then
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","")
        nSearchDepth = 1   
      else  
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,g_CreatePage_URL,"")
        nSearchDepth = 1   
      End If
      aORObject = OR_EnoviaPDT_CreateTbl  
    Case "ATTRIBUTES","MASTER"
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","")
      nSearchDepth = 1
      aORObject = OR_EnoviaPDT_CreateTbl
    Case "HIST"
      Set oParent = objGetObject(OR_EnoviaPDT_HistoryFme,"","")
      nSearchDepth = 3
      aORObject = OR_EnoviaPDT_HistoryFme      
    Case "SAP BOM AS FED"
      Set oParent = objGetObject(OR_EnoviaPDT_SAPBOMTbl,"","")
      nSearchDepth = 1
      aORObject = OR_EnoviaPDT_SAPBOMTbl
    Case "COMPONENT MATERIALS","ALTERNATE PARTS","PROJECTS","RELATED ATS","WHERE USED","ALTERNATE PART FOR","R&D SITES","RELATED ACS","FORMULA","REVISIONS","TABLES",_
    "TABLES WEIGHT","NOTES","EBOM","SUBSTITUTE PARTS IN","MARKUPS","RELATED SPECIFICATIONS","FORMULAITON PROCESS","FORMULATION PARTS AND PRO...","AFFECTED FINISHED PRODUCT...",_
    "MULTIPLE OWNERSHIP ACCESS","DISCUSSIONS","ROUTES","FORMULATION PROCESS","CUP ARTWORK","PRIMARY ALTERNATE WHERE U...","RELATED PARTS"
      Set oParent = objGetObject(OR_EnoviaPDT_RefDocFrm,"","")
      nSearchDepth = 5
      aORObject = OR_EnoviaPDT_RefDocFrm
    Case "SUBSTANCES & MATERIALS","RELATED IAPS","PLANTS","STARTING MATERIALS","MATERIALS PRODUCED"
      Set oParent = objGetObject(OR_EnoviaPDT_PlantsFme,"","")
      nSearchDepth = 7
      aORObject = OR_EnoviaPDT_PlantsFme
    Case "TRANSPORT UNIT","TASKS SIGNATURES","APPROVALS","CHARACTERISTICS REFERENCE...","CONTENT","WHERE USED SPEC","RELATED PART",_
    "COUNTRY CLEARANCE","SUBSCRIPTIONS","COUNTRIES APPROVED"
      Set oParent = objGetObject(OR_EnoviaPDT_RefDocFrm,"","")
      nSearchDepth = 3 
      aORObject = OR_EnoviaPDT_RefDocFrm
    Case "REFERENCE DOCUMENTS"
      Set oParent = objGetObject(OR_EnoviaPDT_RefDocFrm,"","")
      if (sPartType="Affected Finished Product Part List")or (sPartType="Art")or (sPartType="Illustration")or (sPartType="Packing Instruction") or (sPartType="Quality Specification")or (sPartType="Stacking Pattern Specification") or (sPartType="Standard Operating Procedure")then
        nSearchDepth = 3
      else
        nSearchDepth = 5
      end if
      aORObject = OR_EnoviaPDT_RefDocFrm 
    Case "SUBSTITUTES"
      Set oParent = objGetObject(OR_EnoviaPDT_RefDocFrm,g_CopyPage_URL,"")
      nSearchDepth = 5
      aORObject = OR_EnoviaPDT_RefDocFrm
    Case "COPY"
      If sPartType = "Formulation Process" Then 'Copy URL for Formulation Process is same as create URL
        sURL = g_CreatePage_URL
      else
        sURL = g_CopyPage_URL
      End If 
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,sURL,"")
      nSearchDepth = 1
      aORObject = OR_EnoviaPDT_CreateTbl 
    Case "DERIVED FROM"
      Set oParent = objGetObject(OR_EnoviaPDT_DerivedFromFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_DerivedFromFme
    Case "DERIVED TO"
      Set oParent = objGetObject(OR_EnoviaPDT_DerivedToFme,"","")
      nSearchDepth = 6 
      aORObject = OR_EnoviaPDT_DerivedToFme  
    Case "REFERENCED BY"
      Set oParent = objGetObject(OR_EnoviaPDT_ReferencedByFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ReferencedByFme
    Case "CLASSIFICATION BOM"
      Set oParent = objGetObject(OR_EnoviaPDT_ClassificationBOMFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ClassificationBOMFme
    Case "CLASSIFICATION"
      Set oParent = objGetObject(OR_EnoviaPDT_ClassificationFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ClassificationFme
    Case "CHANGE ORDER"
      Set oParent = objGetObject(OR_EnoviaPDT_ChangeOrderFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ChangeOrderFme
    Case "CHANGE REQUEST"
      Set oParent = objGetObject(OR_EnoviaPDT_ChangeRequestFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ChangeRequestFme
    Case "CHANGE LEGACY"
      Set oParent = objGetObject(OR_EnoviaPDT_ChangeLegacyFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_ChangeLegacyFme
    Case "WEIGHTS & DIMENSIONS","COUNTRIES OF SALE"
      Set oParent = objGetObject(OR_EnoviaPDT_WeightsDimensionsFrm,"","")
      nSearchDepth = 5
      aORObject = OR_EnoviaPDT_WeightsDimensionsFrm
    Case "ISSUES"
      Set oParent = objGetObject(OR_EnoviaPDT_RefDocFrm,"","")
      if sPartType="Affected Finished Product Part List" then
        nSearchDepth = 3 
      else
        nSearchDepth = 5 
      end if 
      aORObject = OR_EnoviaPDT_IssuesFme
    Case "IP CLASSES"
      Set oParent = objGetObject(OR_EnoviaPDT_IPClassesFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_IPClassesFme
    Case "SECURITY CLASSES"
      Set oParent = objGetObject(OR_EnoviaPDT_SecurityClassesFme,"","")
      nSearchDepth = 6
      aORObject = OR_EnoviaPDT_SecurityClassesFme
    Case "MANUFACTURER EQUIVALENTS"
      Set oParent = objGetObject(OR_EnoviaPDT_ManufacturerEquivalentsFme,"","")
      nSearchDepth = 5
      aORObject = OR_EnoviaPDT_ManufacturerEquivalentsFme
    Case "SUPPLIER EQUIVALENTS"
      Set oParent = objGetObject(OR_EnoviaPDT_SupplierEquivalentsFme,"","")
      nSearchDepth = 5 
      aORObject = OR_EnoviaPDT_SupplierEquivalentsFme    
    Case "COUNTRIES OF SALE"
      Set oParent = objGetObject(OR_EnoviaPDT_CountriesOfSaleFra,"","")
      nSearchDepth = 5
      aORObject = OR_EnoviaPDT_CountriesOfSaleFra 
    Case Else
      sErrorMessage = sErrorMessage&"The Sheet Name given does not have a Page object assigned "
      Log.Warning sErrorMessage
      Exit Sub    
  End Select

  aFields = Excel_GetColumnValues(sSheetName,sFilePath,sColumnName) 'Call to get all ColumnValues in a excel sheet into an Array
  If Not(IsArray(aFields)) Then
    sErrorMessage = sErrorMessage&"Failed to retrieve Column values from Excel Sheet "
    Log.Warning sErrorMessage
    bPassed = False  
'    Exit Sub
  End If
  
  Set oFieldWithSI = EnoviaPDT_GetAllFieldsFromApp(oParent,sSheetName,nSearchDepth,aORObject,sPartType)
  aSourceIndexApp = oFieldWithSI.Keys 'Get sourceindex of all the Fields from the application under the Parent object
   
  If Ubound(aSourceIndexApp) < 0 Then 'Check if there no objects returned from GetAllFieldsFromApp function
    sErrorMessage = sErrorMessage&"Required fields were not found in the Application "
    Log.Warning sErrorMessage
    bPassed = False    
    'Exit Sub
  End IF
  
  If Not(bPassed = False) Then
    ReDim aSourceIndex(Ubound(aFields)) 
    bFieldFound = True
    Redim aFieldNotFound(Ubound(aFields))
    l = 0

    oFieldCollection = oParent.FindAllChildren("ObjectType","Cell",nSearchDepth)  'Find all children of type Cell
    If Ubound(oFieldCollection) < 0 Then
     sErrorMessage = sErrorMessage& "There are no objects of type Cell"
     Log.Warning sErrorMessage 
     'Exit Sub
    End If

    For i = 0 to Ubound(aFields)
      bFieldFound = False
      For j = Ubound(oFieldCollection) to 0 Step -1
        If UCase(oFieldCollection(j).ContentText) = Ucase(aFields(i)) and oFieldCollection(j).clientHeight > 0 Then  'Compare with content Text property
          If EnoviaPDT_CheckStringValinArray(aSourceIndex,oFieldCollection(j).SourceIndex) = False Then
            aSourceIndex(i) = oFieldCollection(j).SourceIndex 'Get the sourceindex of the objects into an array
            bFieldFound = True
            Exit For
          End If  
        End If
        If j = 0 and bFieldFound = False Then   'If field is not found add it into an array
          aFieldNotFound(l) = aFields(i)
          l=l+1
        End IF
      Next
    Next  

    ReDim Preserve aFieldNotFound(l-1)
  
    If Ubound(aFieldNotFound) >= 0 Then   
      bPassed = False
      Log.Warning "Field(s) "&Join(aFieldNotFound,",")&" is/are not available in the application"
      For x = 0 to Ubound(aFieldNotFound)
        sErrorMessage = "Field "&aFieldNotFound(x)&" is not available in application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFieldNotFound(x)&" Should be in expected order",bPassed,sErrorMessage,"")
        g_isBlocked = False
      Next
    else
      Set oMatchedFieldsDict = EnoviaPDT_CompareArrays(aSourceIndexApp,aSourceIndex)  'Compare Arrays are in same order and have same value
      If oMatchedFieldsDict.item("ErrorMsg") <> "" Then
        sErrorMessage = sErrorMessage&oMatchedFieldsDict.item("ErrorMsg")&" "
      End If
    
      If oMatchedFieldsDict.item("MisMatch") <> "" Then
        Call EnoviaPDT_LogPassedStepsFieldWise(oFieldWithSI,oMatchedFieldsDict)
        bPassed = False
        sErrorMessage = sErrorMessage&"MisMatch with the Field '"&oFieldWithSI.item(Cint(oMatchedFieldsDict.item("MisMatch")))&"', when comparing the Field List between Excel sheet and Application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&oFieldWithSI.item(Cint(oMatchedFieldsDict.item("MisMatch")))&" Should be in expected order",bPassed,sErrorMessage,"")
        Log.Warning sErrorMessage
      
      Else If bFieldFound and oMatchedFieldsDict.item("MisMatch") = "" and Err.Number = 0 THen
        Call EnoviaPDT_LogPassedStepsFieldWise(oFieldWithSI,oMatchedFieldsDict)
        Log.Message "Fields are in Expected Order"
      
      else
        bPassed = False
        sErrorMessage = sErrorMessage&"Fields are not in Expected order. "&Err.Description
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Fields Should be in expected order",bPassed,sErrorMessage,"")
        Log.Warning sErrorMessage
        Err.Clear
      End IF
      End If   
    End If
  else
    Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Fields Should be in expected order",bPassed,sErrorMessage,"")
    'Log.Warning sErrorMessage
  End If    
  
  'Clean up the variables
  EnoviaPDT_ClearVariable sColumnName 
  EnoviaPDT_ClearVariable sFilePath
  EnoviaPDT_ClearVariable nSearchDepth
  EnoviaPDT_ClearVariable sErrorMessage
  EnoviaPDT_ClearVariable bPassed
  EnoviaPDT_ClearVariable oParent
  EnoviaPDT_ClearVariable aFields
  EnoviaPDT_ClearVariable oFieldWithSI
  EnoviaPDT_ClearVariable aSourceIndexApp
  EnoviaPDT_ClearVariable oFieldCollection
  EnoviaPDT_ClearVariable aSourceIndex
  EnoviaPDT_ClearVariable bFieldFound
  EnoviaPDT_ClearVariable oMatchedFieldsDict
  EnoviaPDT_ClearVariable aFieldNotFound 
  EnoviaPDT_ClearVariable sURL
  ' doesn't block anything 
  g_isBlocked = False
End Sub
