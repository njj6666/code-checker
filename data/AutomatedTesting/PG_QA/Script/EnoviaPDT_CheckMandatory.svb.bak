'USEUNIT WebObjectLib
'USEUNIT OR_Enovia
'USEUNIT ExcelLib
'USEUNIT EnoviaPDT_ValidationUtils
'USEUNIT EnoviaPDT_PDTUtils
'USEUNIT StringLib
'USEUNIT WindowsUtility
'USEUNIT GlobalVars
'USEUNIT LogLib

'Description  : Function to Check Mandatory fields are listed and working as expected in a given page
'Inputs       : sSheetName - sSheetName in excel containing the Fields in the expected order
'             : sPartType - Name of the Part type being worked on
'Output       : None               
'Author       : Sandeep  

Sub EnoviaPDT_CheckMandatoryFields(sSheetName,sPartType)

  On Error Resume Next  

  Dim sFieldsColName, sColumnName, sInputFieldColName, sFilePath, nSearchDepth, sErrorMessage, bPassed,_
  oParent, oDoneButton, oCancelButton, aFields, oFieldCollection, aLabelArray, oMandFieldWithSIDict, oMatchedFieldsDict,_
  oInputDict, aActualField, aFieldNotFound, aMatchedFields, sAlertMsg, bFailFlag, oWshell, oParentTable, oReqCell, oFloatingWnd,_
  oReqfield, oResultsDict, nFieldFound, ErrObj, nDelayLoop, sSearchURL, oActualNotesCell, oTypeAhead_TextNode, oDone_Link,_
  sExisitngVal, bRadioButtonChanged, oRadio, i, j, k, l, y, x  

  nSearchDepth = Null  'Depth at which FindAllChildren method is run
  sFilePath =  g_pdt_FileLocation&sPartType&".xlsx"  'Part Type excel file path
  sColumnName = "Mandatory" 'Name of column to be searched in the Excel
  sFieldsColName = "Field"
  sInputFieldColName = "Input"
  sErrorMessage = ""
  bPassed = ""
  
  Select Case Ucase(sSheetName)  'Select the Parent Object based on the sSheetName
    Case "CREATE"
      If sPartType = "Virtual Intermediate" Then
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","")  
        Set oDoneButton = objGetObject(OR_EnoviaPDT_DoneBtn,"","")  
        Set oCancelButton =  objGetObject(OR_EnoviaPDT_CancelBtn,"","")  
      else  
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,g_CreatePage_URL,"") 
        Set oDoneButton =  objGetObject(OR_EnoviaPDT_DoneBtn,g_CreatePage_URL,"")
        Set oCancelButton = objGetObject(OR_EnoviaPDT_CancelBtn,g_CreatePage_URL,"")
      End If 
      nSearchDepth = 4 
    Case "ATTRIBUTES"
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","")
      Set oDoneButton = objGetObject(OR_EnoviaPDT_DoneBtn,"","")
      Set oCancelButton = objGetObject(OR_EnoviaPDT_CancelBtn,"","")
      nSearchDepth = 4 
    Case "TABLES","TABLES WEIGHT"
      Set oParent = objGetObject(OR_EnoviaPDT_TablesFme,"","")
      Set oTableBody = objGetObject(OR_EnoviaPDT_TablesBodyTbl,"","")
      Sys.HighlightObject oTableBody,1,0  'Highlight Object to move it to the begining
      Set oDoneButton = objGetObject(OR_EnoviaPDT_NotesSaveBtn,"","")
      Set oCancelButton = objGetObject(OR_EnoviaPDT_NotesResetBtn,"","")
      nSearchDepth = 6 
      If Ucase(sSheetName) = "TABLES" Then
        Call EnoviaPDT_AddNewRow_Table  'Add a new row to Table
      else
        Call EnoviaPDT_AddNewRowWtChar(sPartType,oParent,oDoneButton,"Gross Weight",2)  'Add a new row to Table weight
      End If
    Case "NOTES"
      Set oParent = objGetObject(OR_EnoviaPDT_NotesFme,"","")
      Set oDoneButton = objGetObject(OR_EnoviaPDT_NotesSaveBtn,"","")
      Set oCancelButton = objGetObject(OR_EnoviaPDT_NotesResetBtn,"","")
      nSearchDepth = 6
    Case "COPY"
      If sPartType = "Formulation Process" Then 'Copy URL for Formulation Process is same as create URL
        sSearchURL = g_CreatePage_URL
      else
        sSearchURL = g_CopyPage_URL
      End If  
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,sSearchURL,"")
      Set oDoneButton = objGetObject(OR_EnoviaPDT_DoneBtn,sSearchURL,"")  
      Set oCancelButton = objGetObject(OR_EnoviaPDT_CancelBtn,sSearchURL,"") 
      nSearchDepth = 6               
      sSearchURL = ""
    Case Else
      sErrorMessage = sErrorMessage&"The Sheet Name given does not have a Page object assigned "
      Log.Warning sErrorMessage
      Exit Sub  
  End Select
  
  Set oInputDict = Excel_CreateDictionaryForInput(sSheetName,sFilePath,sFieldsColName,sInputFieldColName) 'Dictionary object which contains Field Name and its input mapping
 
  oFieldCollection = oParent.FindAllChildren("ObjectType","Cell",nSearchDepth) 'Find all Cell objects under the Parent
  If Ubound(oFieldCollection) < 0 Then
   sErrorMessage = sErrorMessage&"There are no objects of type Cell "
   Log.Warning sErrorMessage
   bPassed = False
   'Exit Sub
  End If
  
  aFields = Excel_GetColumnValues(sSheetName,sFilePath,sColumnName)
  If Not(IsArray(aFields)) Then
    sErrorMessage = sErrorMessage&"Failed to retrieve Column values from Excel Sheet "
    Log.Warning sErrorMessage
    bPassed = False  
'    Exit Sub
  End If
  
  If Not(bPassed = False) Then
    Redim aActualField(Ubound(aFields))
    Redim aLabelArray(Ubound(aFields))
    Redim aFieldNotFound(Ubound(aFields))
    k=0
    l=0
    For i = 0 to Ubound(aFields) 
      nFieldFound = False
      For j = 0 to Ubound(oFieldCollection)
        If UCase(oFieldCollection(j).ContentText) = Ucase(aFields(i)) and oFieldCollection(j).CurrentStyle.fontStyle = "italic"  Then  'Compare with content Text property and check font style
          aLabelArray(k) = oFieldCollection(j).SourceIndex 'Get the sourceindex of the Label objects into an array
          If Ucase(sSheetName) = "TABLES" OR Ucase(sSheetName) = "NOTES" OR Ucase(sSheetName) = "TABLES WEIGHT"  Then
            'Get the Cell containing the Field object from the Lable object
            If Ucase(sSheetName) = "TABLES WEIGHT" and sPartType = "Finished Product Part" Then
              Set aActualField(k) = EnoviaPDT_GetChild_TablesnNotes(oFieldCollection(j),False) 'For FPP new row is added below existing row
            else
              Set aActualField(k) = EnoviaPDT_GetChild_TablesnNotes(oFieldCollection(j),True)  
            End If
          else If Ucase(sSheetName) = "CREATE" and sPartType = "Virtual Intermediate" Then
            Set oActualCell = oParent.cell(oFieldCollection(j).RowIndex+1,oFieldCollection(j).ColumnIndex) 'Get the Actual Field object by adding 1 to Column index of Lable Cell
            Set aActualField(k) = EnoviaPDT_GetChild(oActualCell) 'Get the Field Object from the Cell
          else
            Set oActualCell = oParent.cell(oFieldCollection(j).RowIndex,oFieldCollection(j).ColumnIndex+1) 'Get the Actual Field object by adding 1 to Column index of Lable Cell
            Set aActualField(k) = EnoviaPDT_GetChild(oActualCell) 'Get the Field Object from the Cell
          End IF
          End If
          Set oActualCell = Nothing
          If aActualField(k) Is Nothing = False Then 'Check if Field object is found
            nFieldFound = True
            k=k+1
            Exit For
          End If
        End If
        If j = Ubound(oFieldCollection) and nFieldFound = False Then   'If field is not found add it into an array
          aFieldNotFound(l) = aFields(i)
          l=l+1
        End IF
      Next
    Next  
  
    ReDim Preserve aFieldNotFound(l-1)
    Set oFieldCollection = Nothing
    
    If Ubound(aFieldNotFound) >= 0 Then  'Check if there are expected fields are not mandatory 
      Log.Warning "Field(s) "&Join(aFieldNotFound,",")&" are not mandatory fields in the application"
      bPassed = False
      For x = 0 to Ubound(aFieldNotFound)
        sErrorMessage = "Field "&aFieldNotFound(x)&" is not a mandatory field in the application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFieldNotFound(x)&" Should be a mandatory field",bPassed,sErrorMessage,"")
        g_isBlocked = False
      Next
      If oCancelButton.exists and Ucase(sSheetName) <> "CREATE" Then 'click on Cancel to close the window
        oCancelButton.Click
      End IF
      'Exit Sub
    else  'Proceed if all expected fields are mandatory
      Set oMandFieldWithSIDict = EnoviaPDT_GetAllMandatoryFieldsFromApp(oParent,sSheetName,nSearchDepth)  'Get all mandatory fields from the application
      Set oMatchedFieldsDict = EnoviaPDT_ArrayComparison(oMandFieldWithSIDict.Keys,aLabelArray) 'Compare the mandatory fields obtained from the Excel with Application
      
      If oMatchedFieldsDict.item("MisMatch") <> "" Then 'Check for any mismatch between mandatory fields obtained from App and those from Excel
        aMatchedFields = oMatchedFieldsDict.item("Array")
        For y = 0 to Ubound(aMatchedFields)
           Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "& oMandFieldWithSIDict.item(Cint(aMatchedFields(y)))&" is listed as mandatory",True,"","")
           g_isBlocked = False
           Log.Message(oMandFieldWithSIDict.item(Cint(aMatchedFields(y)))&" is listed as mandatory")
        Next
        bPassed = False
        sErrorMessage = sErrorMessage&"MisMatch with the Field "&oMandFieldWithSIDict(oMatchedFieldsDict.item("MisMatch"))&", when comparing the Field List between Excel sheet and Application "  'is not in the expected Order/ not marked as mandatory in Excel Sheet"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field"&oMatchedFieldsDict.item("MisMatch")&" Should be a mandatory field",bPassed,sErrorMessage,"")
        g_isBlocked = False
        Log.Warning sErrorMessage
        If oCancelButton.exists and Ucase(sSheetName) <> "CREATE" Then 'click on Cancel to close the window
          oCancelButton.Click
        End IF
        'Exit Sub
      else

        bFailFlag = False  'To check if the mandatory field is working as expected
        nFieldFound = 0    'To check if the field type being worked on is found/exists
  
        If Ucase(sSheetName) = "TABLES" or Ucase(sSheetName) = "TABLES WEIGHT" Then   'Handling Tables separately as behaviour is different. Works on a newly added row
          sAlertMsg = "Columns in red are required"  'Alert Message shown in case of Tables
          Set oParentTable = objGetObject(OR_EnoviaPDT_TablesBodyTbl,"","")
      
          For i = Ubound(aActualField) to 0 Step -1
            sErrorMessage = ""
            Set oReqfield = EnoviaPDT_GetFieldInFloatingWnd(oParentTable,aActualField(i))
            If oReqfield Is Nothing Then 'Field is not Found
              sErrorMessage = sErrorMessage&"Could not FInd the Child Object for "&aFields(i)
              Log.Warning sErrorMessage
            End If
            If Ucase(sSheetName) = "TABLES WEIGHT" Then
              Set oResultsDict = EnoviaPDT_CheckMandatoryTableWt(oParent,aFields(i),aActualField(i),oReqfield,oInputDict,oDoneButton) 'Checks for Mandatory fields for Tables Weight 
              bFailFlag = oResultsDict.item("FailFlag")
              nFieldFound = oResultsDict.item("FieldFound")
              sErrorMessage = sErrorMessage&oResultsDict.item("ErrorMsg")
              If i = 0 Then
                  oDoneButton.Click
                  Delay 1000
                  If oParent.FindChild("ObjectIdentifier","iconStatusError_gif",10).Exists Then
                    bFailFlag = True
                    sErrorMessage = sErrorMessage&" The newly added Row could not be saved " 
                  End If
                Call EnoviaPDT_Table_CleanUp(sPartType,sSheetName,oParent,"Name")
              End If
            else  
              Set oResultsDict = EnoviaPDT_CheckMandatoryTables(oParent,aFields(i),aActualField(i),oReqfield,oInputDict,oDoneButton,sAlertMsg) 'Checks for Mandatory fields for Tables
              bFailFlag = oResultsDict.item("FailFlag")
              nFieldFound = oResultsDict.item("FieldFound")
              sErrorMessage = sErrorMessage&oResultsDict.item("ErrorMsg")
              If i = 0 Then 
                oDoneButton.Click  'Save the changes if end of the loop
                Set ErrObj = oParent.FindChild("ObjectIdentifier","iconStatusError_gif",10)
                nDelayLoop = 0
                Do Until ErrObj.Exists = False  'Wait until Error Status image is not shown
                  Delay (500)
                  nDelayLoop = cint(nDelayLoop) + 500
                  If nDelayLoop > g_dblWaitTime Then
                     Exit Do
                  End If  
                Loop
                If ErrObj.Exists Then
                  sErrorMessage = "Could not save the newly added Table Row "
                  Log.Warning sErrorMessage
                  bFailFlag = True
                End If
                Set ErrObj = Nothing
                Call EnoviaPDT_Table_CleanUp(sPartType,sSheetName,oParent,"No.") 'Delete the newly added row
              End If
            End if
            If bFailFlag = False and nFieldFound = 1 Then
              bPassed  = True
              Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" is listed and functioning as a mandatory field",bPassed,sErrorMessage,"")
              Log.Message "Field "&aFields(i)&" is listed and functioning as a mandatory field"
              g_isBlocked = False
            else
              bPassed  = False
              sErrorMessage = sErrorMessage&"Field "&aFields(i)&" is not functioning as a mandatory field"
              Log.Warning sErrorMessage
              Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" is listed and functioning as a mandatory field",bPassed,sErrorMessage,"")
              g_isBlocked = False
            End If
            Set oResultsDict = Nothing
            Set oReqCell = Nothing
            Set oReqfield = Nothing    
          Next
          Set oParentTable = Nothing

        else  'For tabs other than Tables and Tables weight
        
          For i = 0 to Ubound(aActualField)
            sSearchURL = ""
            sErrorMessage = ""
            nFieldFound = 0
            bFailFlag = False
            aActualField(i).ScrollintoView() 
            If Ucase(sSheetName) = "NOTES" Then
              sAlertMsg = "Columns in red are required"  'Alert Message shown in case of Notes
              Set oActualNotesCell = aActualField(i)
              aActualField(i).click (aActualField(i).Width)*0.75,(aActualField(i).offsetHeight)*0.5  'Click to ensure the link within the cell is not clicked
              Set oFloatingWnd = objGetObject(OR_EnoviaPDT_TablesFloatingDivPnl,"",5000)
                If oFloatingWnd Is Nothing = False THen
                  oFloatingWnd.WaitProperty "ScreenLeft",aActualField(i).ScreenLeft,1000  'Check the ScreenLeft property of the Label Field with Floating Window
                  Set aActualField(i) = oFloatingWnd.Child(oFloatingWnd.ChildCount-1)  'Get the required field within the floating window
                  Set oFloatingWnd = Nothing
                else
                  sErrorMessage = sErrorMessage&"Floating window is not displayed"
                  Log.Warning sErrorMessage
                  Set aActualField(i) = Nothing
                End If
            else
              sAlertMsg = aFields(i) 'Alert Message shown in other cases contain the Field Name
            End IF
            If aActualField(i) Is Nothing Then
              sErrorMessage = sErrorMessage&"Could not FInd the Child Object for "&aFields(i)
              'Exit For
            End If    
            If aActualField(i).ObjectType  = "Textarea" or aActualField(i).ObjectType  = "Textbox" Then
              nFieldFound = nFieldFound+1 
              ExistingVal = aActualField(i).Value  'Store the existing value to be entered later
              aActualField(i).Value = ""   'Set the field to empty
              oDoneButton.Click 
              If EnoviaPDT_HandlingAlertWindow(sAlertMsg) = False Then 'Handles Alert Window and checks for displayed Message
                sErrorMessage = sErrorMessage&"The Alert Pop up displayed is not for the expected field "&aFields(i)
                bFailFlag = True
                Log.Warning sErrorMessage
                'Exit Sub
              End If
              If IsObject(oActualNotesCell) Then
                oActualNotesCell.Click
                Set oActualNotesCell = Nothing
              End If 
              If i <> Ubound(aActualField) Then
                If aActualField(i).isContentEditable = True Then 'Make sure Field is editable
                  If aActualField(i).Parent.ChildCOunt > 1 and aqObject.IsSupported(aActualField(i),"start") OR instr(1,aActualField(i).ObjectIdentifier,"CharacteristicDisplay",1) Then 'For Handling the Type Ahead Fields
                    If ExistingVal = "" Then
                      If oInputDict.Exists(aFields(i)) Then
                        aActualField(i).SetText oInputDict.item(aFields(i))
                      else
                        If Strcomp(aFields(i),"Project Security Classification",1) = 0 Then
                          aActualField(i).Keys "Scc"
                        else If Strcomp(aActualField(i).ObjectIdentifier,"CharacteristicDisplay",1) = 0 Then
                          aActualField(i).Keys "Test"
                        else
                          aActualField(i).Keys "Dish"
                        End If
                        End If
                      End If  
                    else
                      aActualField(i).Value =  ExistingVal
                    End If
            
                    If sPartType = "Virtual Intermediate" Then  'Select the sSearchURL based on the page we are on
                      sSearchURL = ""   
                    else If IsEmpty(objGetPage(g_CreatePage_URL)) = False Then 
                      sSearchURL = g_CreatePage_URL 
                    else If IsEmpty(objGetPage(g_CopyPage_URL)) = False Then
                      sSearchURL = g_CopyPage_URL
                    End If
                    End If 
                    End If
                    Set oTypeAhead_TextNode = objGetObject(OR_EnoviaPDT_TypeAheadTxtNd,sSearchURL,3000)
                    If (oTypeAhead_TextNode Is Nothing) = False Then
                      oTypeAhead_TextNode.Click
                      Delay 1000
                      Set oTypeAhead_TextNode = Nothing
                    End IF
                    Set objDone_Link = objGetObject(OR_EnoviaPDT_TypeAheadDoneLnk,sSearchURL,500)  
                    If (objDone_Link Is Nothing) = False Then
                      objDone_Link.Click
                      Set objDone_Link = Nothing
                    End If

                  else if instr(1,aActualField(i).ObjectIdentifier,"Owner",1) Then 'For Handling Owner Fields
                    If instr(1,ExistingVal,"ion",1) Then
                      aActualField(i).Keys Split(ExistingVal)(1)
                     else
                      aActualField(i).Keys ExistingVal
                     End If
                     'aActualField(i).Keys "[Tab]" ' 6/20 JR look like we can just tab out. TypeAhead doesn't seem to return anything in SIT
                     
                     If IsEmpty(objGetPage(g_CreatePage_URL)) = False Then 
                      sSearchURL = g_CreatePage_URL
                     else If IsEmpty(objGetPage(g_CopyPage_URL)) = False Then
                      sSearchURL = g_CopyPage_URL
                     End If
                     End If  ' Commented out 6/20 JR, uncommented 6/28 JR. looks like typeAhead is needed again :D
                     Set oTypeAhead_TxtNode = objGetObject(OR_EnoviaPDT_TypeAheadTxtNd,sSearchURL,"") 
                     If (oTypeAhead_TxtNode Is Nothing) = False Then
                      oTypeAhead_TxtNode.Click
                      Delay 2000
                      Set oTypeAhead_TxtNode = Nothing
                     End IF
                     
                  else If instr(1,aActualField(i).ObjectIdentifier,"Dimension",1) Then 'For Handling Dimension fields which need integer input
                     If ExistingVal = "0.0" Then
                      If oInputDict.Exists(aFields(i)) Then
                        aActualField(i).Keys oInputDict.item(aFields(i))
                      else
                        aActualField(i).Keys "2"
                      End If
                    else
                      aActualField(i).Value =  ExistingVal
                     End If
                   
                  else  'For all other fields
                    If ExistingVal = "" Then
                      If oInputDict.Exists(aFields(i)) Then
                        aActualField(i).Value = oInputDict.item(aFields(i))
                      else
                        aActualField(i).Keys "Test"
                      End If
                    else
                      aActualField(i).Value =  ExistingVal
                    End If
                    ExistingVal = "" 
                  End If
                  End If
                  End If  
                Else  'If Field is not Editable
                  Log.Message "Field "&aFields(i)&" is not editable"
                End IF
                If Ucase(sSheetName) <> "CREATE" Then
                  Set oWshell = CreateObject("WScript.Shell")  'SendKeys to avoid/Close the Auto complete List that is displayed
                  oWshell.SendKeys "{TAB}"
                  Delay 500
                  oWshell.SendKeys "{RIGHT}"
                  Set oWshell = Nothing
                End If
              End if
            Else If aActualField(i).ObjectType  = "Select" Then 'Handles Objects of Type Select
    
              nFieldFound = nFieldFound+1  
              sExisitngVal = aActualField(i).wText 'Store the existing value to be entered later
              If aActualField(i).wText = "" or Left(aActualField(i).wItemList,1) = aActualField(i).wListSeparator Then 'Check if dropdown can be set to an empty value
                If Left(aActualField(i).wItemList,1) = aActualField(i).wListSeparator Then
                  aActualField(i).ClickItem(0) 'Select empty Value
                End IF
                oDoneButton.Click
                If EnoviaPDT_HandlingAlertWindow(sAlertMsg) = False Then 'Handles Alert Window and checks for displayed Message
                  sErrorMessage = sErrorMessage&"The Alert Pop up displayed is not for the expected field "&aFields(i)
                  bFailFlag = True
                  Log.Warning sErrorMessage
                  'Exit Sub
                End If
                If sExisitngVal = "" Then
                  If oInputDict.Exists(aFields(i)) Then
                    If IsNumeric(oInputDict.item(aFields(i))) Then
                      aActualField(i).Clickitem Cint(oInputDict.item(aFields(i)))
                    else
                      aActualField(i).Clickitem oInputDict.item(aFields(i))  
                    End If  
                  else
                    aActualField(i).Clickitem(1)
                  End If
                else
                  aActualField(i).Clickitem(sExisitngVal)
                End If
              End If 
        
            Else If aActualField(i).ObjectType="Panel" then  'Special case where Panel object consists of Radio Buttons in Create Page
    
              nFieldFound = nFieldFound+1
              bRadioButtonChanged = False
              nCount=aActualField(i).ChildCount
              For x=0 to nCount-1
                Set oRadio = aActualField(i).Child(x)
                If oRadio.Enabled = True and oRadio.wChecked = False then  'Click Radio button if it is not selected
                  If Ucase(oRadio.Value) = "YES" Then
                    oRadio.Click
                    bRadioButtonChanged = True
                    Exit For
                  End If  
                End if
              NEXT
'              If bRadioButtonChanged = True then
'                Log.Message "Radio Button Value Changed for "&aFields(i)
'              End if
            else If aActualField(i).ObjectType="Cell" then  'Check Cell exists. Cells are not editable
              nFieldFound = nFieldFound+1
            End If
            End if  
            End If
            End If
            Delay 500
            If i = Ubound(aActualField) and oCancelButton.exists and Ucase(sSheetName) <> "CREATE" Then 'End of the loop click on Cancel
              oCancelButton.Click
              'Exit For
            End IF
            If bFailFlag = False and nFieldFound = 1 Then
              bPassed  = True
              Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" is listed and functioning as a mandatory field",bPassed,sErrorMessage,"")
              Log.Message "Field "&aFields(i)&" is listed and functioning as a mandatory field"
              g_isBlocked = False
            else
              bPassed  = False
              sErrorMessage = sErrorMessage&"Field "&aFields(i)&" is not functioning as a mandatory field"
              Log.Warning sErrorMessage
              Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" is listed and functioning as a mandatory field",bPassed,sErrorMessage,"")
              g_isBlocked = False
            End If     
          Next
        End If
      End If    
    End If
    Set oMandFieldWithSIDict = Nothing
    Set oMatchedFieldsDict = Nothing
  else
    Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Fields Should be in expected order",bPassed,sErrorMessage,"")
    Log.Warning sErrorMessage
  End If
  
  g_isBlocked = False
  'Clean up all the variables    
  EnoviaPDT_ClearVariable sFieldsColName
  EnoviaPDT_ClearVariable sColumnName
  EnoviaPDT_ClearVariable sInputFieldColName
  EnoviaPDT_ClearVariable sFilePath
  EnoviaPDT_ClearVariable nSearchDepth
  EnoviaPDT_ClearVariable sErrorMessage
  EnoviaPDT_ClearVariable bPassed
  EnoviaPDT_ClearVariable oParent
  EnoviaPDT_ClearVariable oDoneButton
  EnoviaPDT_ClearVariable oCancelButton
  EnoviaPDT_ClearVariable aFields
  EnoviaPDT_ClearVariable oFieldCollection
  EnoviaPDT_ClearVariable aLabelArray
  EnoviaPDT_ClearVariable oMandFieldWithSIDict
  EnoviaPDT_ClearVariable oMatchedFieldsDict
  EnoviaPDT_ClearVariable oInputDict
  EnoviaPDT_ClearVariable aActualField
  EnoviaPDT_ClearVariable aFieldNotFound
  EnoviaPDT_ClearVariable aMatchedFields
  EnoviaPDT_ClearVariable sAlertMsg
  EnoviaPDT_ClearVariable bFailFlag
  EnoviaPDT_ClearVariable oWshell
  EnoviaPDT_ClearVariable oParentTable
  EnoviaPDT_ClearVariable oReqCell
  EnoviaPDT_ClearVariable oFloatingWnd
  EnoviaPDT_ClearVariable oReqfield
  EnoviaPDT_ClearVariable oResultsDict
  EnoviaPDT_ClearVariable nFieldFound
  EnoviaPDT_ClearVariable ErrObj
  EnoviaPDT_ClearVariable nDelayLoop
  EnoviaPDT_ClearVariable sSearchURL
  EnoviaPDT_ClearVariable oActualNotesCell
  EnoviaPDT_ClearVariable oTypeAhead_TextNode
  EnoviaPDT_ClearVariable oDone_Link
  EnoviaPDT_ClearVariable sExisitngVal
  EnoviaPDT_ClearVariable bRadioButtonChanged
  EnoviaPDT_ClearVariable oRadio
  EnoviaPDT_ClearVariable i
  EnoviaPDT_ClearVariable j
  EnoviaPDT_ClearVariable k
  EnoviaPDT_ClearVariable l
  EnoviaPDT_ClearVariable y
  EnoviaPDT_ClearVariable x
  
End Sub

