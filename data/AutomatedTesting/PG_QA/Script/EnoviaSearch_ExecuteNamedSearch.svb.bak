'USEUNIT EnoviaSearch_PopulateSearchModel
'USEUNIT EnoviaSearchModels
'USEUNIT OR_Enovia
'USEUNIT LogLib
'USEUNIT WindowsUtility
'USEUNIT EnoviaUtils
'USEUNIT GlobalVars
'USEUNIT WebObjectLib
'USEUNIT EnoviaSearch_Utility
'USEUNIT EnoviaSearch_ValidateResults
'USEUNIT PerformanceStepNames

Function EnoviaSearch_StartNamedSearch(oModel)
  
  On Error Resume Next
  
  'Maximising the window if minimised
  If g_isBlocked = false Then
    Call MaximizeAllWindows()
  End If

  'Perform the first named search
  bPassed = true
  sErrorMsg = ""
  Call EnoviaSearch_SelectAndRunNamedSearch(oModel)
  If Err.Number <> 0 Then
    bPassed = false
    sErrorMsg = Err.Description
  End If
  Call LogStepData("Initial Search", bPassed, sErrorMsg, CombineSearchStrings(oModel.Common.SearchValue))
  
  'Handle the alert window if it pops up
  If g_isBlocked = false Then
    Call EnoviaSearch_AlertWindow("")
  End If
  
  'Validate the first named search results
  If g_isBlocked = false Then
    If CombineSearchStrings(oModel.Common.ResultsMain) <> "$" Then
      Call EnoviaSearch_ValidateNameSearch(oModel,"Main")
    End If
    
    If Err.Number <> 0 Then
      bPassed = false
      sErrorMsg = Err.Description
    End If    
  Else
    sErrorMsg = ""
    bPassed = true
  End If
  Call LogStepData("Validate Initial Search", bPassed, sErrorMsg, CombineSearchStrings(oModel.Common.ResultsMain))
  
  'Perform the refined search
  If g_isBlocked = false Then
    If CombineSearchStrings(oModel.Common.ResultsRefined) <> "$" Then
      Call EnoviaSearch_ExecuteRefinedSearch(oModel)
    End If
    
    If Err.Number <> 0 Then
      bPassed = false
      sErrorMsg = Err.Description
    End If    
  Else
    sErrorMsg = ""
    bPassed = true
  End If
  Call LogStepData("Refined Search", bPassed, sErrorMsg, CombineSearchStrings(oModel.Common.SearchValue))
  
  'Validate the refined search results
  If g_isBlocked = false Then
    If CombineSearchStrings(oModel.Common.ResultsRefined) <> "$" Then
      Call EnoviaSearch_ValidateNameSearch(oModel,"Refined")
    End If
    
    If Err.Number <> 0 Then
      bPassed = false
      sErrorMsg = Err.Description
    End If    
  Else
    sErrorMsg = ""
    bPassed = true
  End If
  
  Call ResetNameSearch()
    
  Call LogStepData("Validate Refined Search", bPassed, sErrorMsg, CombineSearchStrings(oModel.Common.ResultsRefined))
  
End Function

'-------------------------------------Named Search----------------------------------------------------------------

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteNamedSearch
'Description                  : Selects the NamedSearch Type and searches for value in global search box
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 22 - May- 2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################

Function EnoviaSearch_SelectAndRunNamedSearch(oModel)

  If (EnoviaSearch_ValCheck(oModel.Common.SearchValue) = True) Then

    Set objsearchType = objGetObject(OR_EnoviaSearch_SearchDrp,"",2000)
    objsearchType.Click()
    Set objsearchType = Nothing
  
    Set objsearchType = objGetObject(OR_EnoviaSearch_SearchDrop,"",2000)
    objsearchType.Click()
    Set objsearchType = Nothing
    
    Set objsearchValue = objGetObject(OR_EnoviaSearch_SearchValueEdt,"",2000)
    If IsArray(oModel.Common.SearchValue) = True Then
      sSearch = oModel.Common.SearchValue
      For i = 0 to UBound(sSearch)      
        objsearchValue.Keys(sSearch(i)&"|")
      Next
    Else
      objsearchValue.SetText(oModel.Common.SearchValue)
    End If
    Set objsearchValue = Nothing
   
    Set objsearchLink = objGetObject(OR_EnoviaSearch_SearchLinkLnk,"",2000)
    objsearchLink.Click()
    Set objsearchLink = Nothing
    
    delayVal = 5000
    Delay(delayVal)
    Log.Message("Delay: " & delayVal)
    Log.Message("Starting Search (" & CombineSearchStrings(oModel.Common.SearchValue) & ")")
    aqPerformance.Start(c_NameSearchRealTime_SN)
    'Table("treeHeadTable")
    Set objEnoviaSearchName = objGetObjectPerformance(OR_EnoviaSearch_Name,"","")
    Log.Message("Search (" & CombineSearchStrings(oModel.Common.SearchValue) & "): " & aqPerformance.Value(c_NameSearchRealTime_SN)/1000)
    Call LogPerformance(c_NameSearchRealTime_SN, False, CombineSearchStrings(oModel.Common.SearchValue))
    
  Else
    Call Err.Raise (60000,"EnoviaNamed_ExecuteNamedSearch","Missing search value in spreadsheet.")
  End If
  
End Function

'##################################################################################################################
'Function Name                : EnoviaSearch_AddFilterOption
'Description                  : Adds a filter option and value to a string
'Arguments                    : sFilterString - the string to be appended to
'Arguments                    : bHasOptionAlready - specifies if the string already contains a filter option
'Arguments                    : sOptionName - the name of the filter option
'Arguments                    : sOptionValue - the value of the filter option
'Return Value                 : the sFilterString with the filter options appended to it
'Author                       : Chris Rupp
'##################################################################################################################

Function EnoviaSearch_AddFilterOption(sFilterString, bHasOptionAlready, sOptionName, sOptionValue)
  sReturnValue = sFilterString
  If bHasOptionAlready = true Then
    sReturnValue = sReturnValue & ", "
  End If
  sReturnValue = sReturnValue & sOptionName & ":" & sOptionValue
  EnoviaSearch_AddFilterOption = sReturnValue
End Function

'##################################################################################################################
'Function Name                : EnoviaSearch_ExecuteRefinedSearch
'Description                  : Calls all the functions used for NamedSearch
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 17 & 18 & 19 - May -2017
'Special Conditions           : NA                                     
'Revision History             : Geetanjali - Added Validations for Array Check and multi select
'Revision Date                : 1-Jun-2017
'##################################################################################################################

Function EnoviaSearch_ExecuteRefinedSearch(oModel)
  Dim bFlag, sFilterOptions
  bFlag = False
  sFilterOptions = "["
 
 Call EnoviaSearch_RealTimeSearch()
 
'-------------------------------------------------------------------------------------------------------------
  If oModel.CaseSensitive <> "" Then
    Set objcasesensitive = objGetObject(OR_EnoviaSearch_SearchCaseSensitiveChk,"",2000)
    If Not (objcasesensitive is Nothing) Then
      objcasesensitive.ClickChecked(oModel.CaseSensitive)
      Set objcasesensitive = Nothing
    End If
    
    If oModel.CaseSensitive = true Then
      sFilterOptions = EnoviaSearch_AddFilterOption(sFilterOptions, bFlag, "CaseSensitive", "True")
    Else
      sFilterOptions = EnoviaSearch_AddFilterOption(sFilterOptions, bFlag, "CaseSensitive", "False")
    End If
    bFlag = True
  End If
 
'------------------------------------------------------------------------------------------------------------- 
  
  If oModel.Common.LimitResults <> "" Then 
    Set objLimitto = objGetObject(OR_EnoviaSearch_SearchLimitToChk,"",2000)
    If Not (objLimitto is Nothing) Then
      objLimitto.SetText(oModel.Common.LimitResults)
      Set objLimitto = Nothing
    End If
    
    sFilterOptions = EnoviaSearch_AddFilterOption(sFilterOptions, bFlag, "Limit", oModel.Common.LimitResults)
    bFlag = True
  End If 

'-------------------------------------------------------------------------------------------------------------
  If (EnoviaSearch_ValCheck(oModel.Common.sType) = True) Then
    Call EnoviaNamed_ExecuteType(oModel)
        
    sFilterOptions = EnoviaSearch_AddFilterOption(sFilterOptions, bFlag, "Type", oModel.Common.SType)
    bFlag = True 
  End If
    
'-------------------------------------------------------------------------------------------------------------
  
  If (EnoviaSearch_ValCheck(oModel.Revision.Revision) = True) Then
    Set objRevision = objGetObject(OR_EnoviaSearch_SearchRevisionEdt,"",1500)
    If Not (objRevision is Nothing) Then
      objRevision.SetText(oModel.Revision.Revision)
      sFilterOptions = EnoviaSearch_AddFilterOption(sFilterOptions, bFlag, "Revision", oModel.Revision.Revision)
      Set objRevision = Nothing
    End If
  End If
    
  If oModel.Revision.Highest <> "" Then
    Set objHighest = objGetObject(OR_EnoviaSearch_SearchHighestChk,"",1500)
    If Not (objHighest is Nothing) Then
      objHighest.ClickChecked(oModel.Revision.Highest)
      Set objHighest = Nothing
    End If
  End If
    
  If oModel.Revision.ByState <> "" Then
    Set objState = objGetObject(OR_EnoviaSearch_SearchStateChk,"",1500)
    If Not (objState is Nothing) Then
      objState.ClickChecked(oModel.Revision.ByState)
      Set objState = Nothing
    End If
    bFlag = True
  End If
    
'-------------------------------------------------------------------------------------------------------------
  
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.User) = True) Then
    Call EnoviaNamed_ExecuteOwner(oModel)
    bFlag = True 
  End If

'-------------------------------------------------------------------------------------------------------------

  If (EnoviaSearch_ValCheck(oModel.Common.Policy) = True) Then
    Call EnoviaNamed_ExecutePolicy(oModel)  
    bFlag = True
  End If
      
'-------------------------------------------------------------------------------------------------------------
      
  If (EnoviaSearch_ValCheck(oModel.Common.State) = True) Then
    Call EnoviaNamed_ExecuteState(oModel)
    bFlag = True
  End If  
    
'-------------------------------------------------------------------------------------------------------------  
      
  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.User) = True) Then
    Call EnoviaNamed_ExecuteOriginator(oModel)
    bFlag = True 
  End If
    
'-------------------------------------------------------------------------------------------------------------    
  If (oModel.OriginatedDate.SDate <> "" OR oModel.Common.Title <> "" OR oModel.ModifiedDate.SDate <> "") Then
    Set objSearchPanel = objGetObject(OR_EnoviaSearch_Panel,"",1500)
    If Not (objSearchPanel is Nothing) Then
      For k = 1 to 4
        objSearchPanel.Click (objSearchPanel.Width)*0.97,(objSearchPanel.Height)*0.99
      Next 
    End If
  End If
      
'-------------------------------------------------------------------------------------------------------------    
    
  If oModel.OriginatedDate.SDate <> "" Then
    Set objOriginated = objGetObject(OR_EnoviaSearch_OriginatedDate,"",1500)
    Call EnoviaSearch_SetDate(OR_EnoviaSearch_OriginatedDate,oModel)
    If Not (objOriginated is Nothing) Then
      objOriginated.Click()
      Set objOriginated = Nothing
    End If
    Set objOriginated_Done = objGetObject(OR_EnoviaSearch_Originated_Done,"",1500)
    If Not (objOriginated_Done is Nothing) Then
      objOriginated_Done.Click()
      Set objOriginated_Done = Nothing
    End If
    bFlag = True
  End If    

'-------------------------------------------------------------------------------------------------------------
  
  If oModel.Common.Title <> "" Then
    Set objTitle = objGetObject(OR_EnoviaSearch_SearchTitlePnl,"",2500)
    aqUtils.Delay 1000,"Title Loading"
    If Not (objTitle is Nothing) Then
      objTitle.Click()
      Set objTitle = Nothing
    Else
      Call Err.Raise(65010,"Refined Search","Title field not found.")
    End If
    
    Set objTitleInput = objGetObject(OR_EnoviaSearch_SearchTitleEdt,"","")
    If Not (objTitleInput is Nothing) Then
      objTitleInput.Keys "^a"
      objTitleInput.Keys(oModel.Common.Title)
      Set objTitleInput = Nothing
    End If
      
    Set objModifiedText = objGetObject(OR_EnoviaSearch_ModifiedText,"",1500)
    If Not (objModifiedText is Nothing) Then
      objModifiedText.click()
      Set objModifiedText = nothing
    End If
    bFlag = True
  End If
      
'-------------------------------------------------------------------------------------------------------------
  
  If oModel.ModifiedDate.SDate <> "" Then
    Set objModifiedDate = objGetObject(OR_EnoviaSearch_ModifiedDate,"",1500)
    Call EnoviaSearch_SetDate(OR_EnoviaSearch_ModifiedDate,oModel)
    If Not (objModifiedDate is Nothing) Then
      objModifiedDate.Click()
      Set objModifiedDate = Nothing
    End If
    Set objModifiedDate_Done = objGetObject(OR_EnoviaSearch_Modified_Done,"",1500)
    If Not (objModifiedDate_Done is Nothing) Then
      objModifiedDate_Done.Click()
      Set objModifiedDate_Done = Nothing
    End If
    bFlag = True
  End If
    
  If bFlag = True Then
    Set objRefresh = objGetObject(OR_EnoviaSearch_SSearchRefreshCmd,"",1500)
    Sys.Refresh
    
    aqPerformance.Start(c_NameSearchRealTime_SN)
    If Not (objRefresh is Nothing) Then
      objRefresh.Click()
    End If
    
    Call LogPerformance(c_NameSearchRealTime_SN, False, CombineSearchStrings(sIdentifier))
    
    Set objRefresh = Nothing
  End If
    
  Call EnoviaSearch_AlertWindow("")
    
End Function 

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteType
'Description                  : Create Filtering for Few Field values
'Arguments                    : NA 
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 23 - May 2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : Geetanjali - Added Validations for Array Check and multi select
'Revision Date                : 1-Jun-2017
'##################################################################################################################

Function EnoviaNamed_ExecuteType(oModel)

  Set objType = objGetObject(OR_EnoviaSearch_SearchTypePnl,"",2000)
  If Not (objType is Nothing) Then
    objType.Click()
    Set objType = Nothing
  End If
   
  Set objSelectItem = objGetObject(OR_EnoviaSearch_STypeDrp,"",2500)
  
  If not(objSelectItem is NOTHING) Then
    IF IsArray(oModel.Common.SType) = True Then       
      objSelectItem.MultiSelect(oModel.Common.SType)
    Else
      objSelectItem.ClickItem(oModel.Common.SType)
    End IF
    Set objselect = objGetObject(OR_EnoviaSearch_STypeBtn,"","")
    If Not (objselect is Nothing) Then
      objselect.ClickButton()
      Set objselect = Nothing
    End If
  Else
    Call EnoviaSearch_DynText(objDynText,oModel.Common.SType)
  End If  
       
  Set objSelectItem = Nothing  
  
End Function

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteOwner
'Description                  : Selecting Owner
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 24 - May 2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : Geetanjali - Added Validations for Array Check and multi user
'Revision Date                : 1-Jun-2017
'##################################################################################################################

Function EnoviaNamed_ExecuteOwner(oModel)

  Set objOwner = objGetObject(OR_EnoviaSearch_SearchOwnerPnl,"",2000)
  If Not (objOwner is Nothing) Then
    objOwner.Click()
    Set objOwner = Nothing
  End If
  
  Call EnoviaSearch_AlertWindow("")
      
  Call MaximizeAllWindows()
    
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.User) = True) Then
    Call EnoviaNamed_ExecuteOwnerDetails(oModel,g_strEnvironment)
  End IF
    
End Function

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteOwnerDetails
'Description                  : Performing Operations on Owner
'Arguments                    : NA 
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 25 & 26 - May-2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################

Function EnoviaNamed_ExecuteOwnerDetails(oModel,sEnv)

Dim bOwnCheck
bOwnCheck = False
        
  If (oModel.OwnerUser.CaseSensitive) <> "" Then
    Set objCaseSensitive = objGetObject(OR_EnoviaSearch_SOwnerCaseSensitiveChk, g_SearchPageURL, 1000)
    If Not (objCaseSensitive is Nothing) Then
      objCaseSensitive.ClickChecked(oModel.OwnerUser.CaseSensitive)
      Set objCaseSensitive = Nothing
    End If
  End If
  
  If (oModel.OwnerUser.LimitResults) <> "" Then
    Set objLimitTo = objGetObject(OR_EnoviaSearch_SOwnerLimitToChk, g_SearchPageURL, 1000)
    If Not (objLimitTo is Nothing) Then
      objLimitTo.SetText(oModel.OwnerUser.LimitResults)
      Set objLimitTo = Nothing
    End If
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.NameOrNumber) = True) Then
    Set objNameNumber = objGetObject(OR_EnoviaSearch_SOwnerNameNumberPnl,g_SearchPageURL,1000)
    If Not (objNameNumber is Nothing) Then
      objNameNumber.Click
      Set objNameNumber = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OwnerUser.NameOrNumber)
    bOwnCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.FirstName) = True) Then
    'if sEnv="plmdev" then
      Set objFirstName = objGetObject(OR_EnoviaSearch_SOwnerFNamePnl1, g_SearchPageURL, 1000)
'    else
'      Set objFirstName = objGetObject(OR_EnoviaSearch_SOwnerFNamePnl, g_SearchPageURL, 1000)
'    end if
    If Not (objFirstName is Nothing) Then
      objFirstName.Click()
      Set objFirstName = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OwnerUser.FirstName)
    bOwnCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.LastName) = True) Then
    'if sEnv="plmdev" then
      Set objLastName = objGetObject(OR_EnoviaSearch_SOwnerLnamePnl1,g_SearchPageURL,1000)
'    else
'      Set objLastName = objGetObject(OR_EnoviaSearch_SOwnerLnamePnl,g_SearchPageURL,1000)
'    end if
    If Not (objLastName is Nothing) Then
      objLastName.Click()
      Set objLastName = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OwnerUser.LastName)
    bOwnCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OwnerUser.Member) = True) Then
    Set objMember = objGetObject(OR_EnoviaSearch_SOwnerMemberPnl, g_SearchPageURL, 1000)
    If Not (objMember is Nothing) Then
      objMember.Click()
      Set objMember = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OwnerUser.Member)
    bOwnCheck = True
  End If
    
  If bOwnCheck = False Then
    Set objNameNumber = objGetObject(OR_EnoviaSearch_SOwnerNameNumberPnl,g_SearchPageURL,1000)
    If Not (objNameNumber is Nothing) Then
      objNameNumber.Click
      Set objNameNumber = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OwnerUser.User)
  End If
  
  Set objRefresh = objGetObject(OR_EnoviaSearch_SOwnerRefreshCmd, g_SearchPageURL, 2000)
  If Not (objRefresh is Nothing) Then
    objRefresh.Click()
    Set objRefresh = Nothing
  End If
  
  Set objSelectItem = objGetObject(OR_EnoviaSearch_SOwnerChk, g_SearchPageURL, 2000)
  If Not (objSelectItem is Nothing) Then
    objSelectItem.ClickChecked(True)
    Set objSelectItem = Nothing
  End If
  
  Set objsubmit = objGetObject(OR_EnoviaSearch_SOwnerBtn, g_SearchPageURL, 2000)
  If Not (objsubmit is Nothing) Then
    objsubmit.ClickButton()
    Set objsubmit = Nothing
  End If

End Function

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecutePolicy
'Description                  : Create Filtering for Few Field values
'Arguments                    : NA 
'Return Value                 : Nothing
'Author                       : Geetanjali Vajrapu
'Creation Date                : 16 - Aug 2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : Geetanjali - Added Validations for Array Check and multi select
'##################################################################################################################

Function EnoviaNamed_ExecutePolicy(oModel)

  Set objPolicy = objGetObject(OR_EnoviaSearch_SearchPolicyPnl,"",2500)
    If Not (objPolicy is Nothing) Then
      objPolicy.Click()
      Set objPolicy = Nothing
    Else
      Call Err.Raise(65008,"Refined Search","Policy field not found.")
    End If
   
    Set objSelectItem = objGetObject(OR_EnoviaSearch_SPolicyDrp,"",2500)
  
    If not(objSelectItem is NOTHING) Then
      If IsArray(oModel.Common.Policy) = True Then       
        objSelectItem.MultiSelect(oModel.Common.Policy)
      Else
        objSelectItem.ClickItem(oModel.Common.Policy)
      End If
      Set objselect = objGetObject(OR_EnoviaSearch_SPolicyBtn,"","")
      If Not (objselect is Nothing) Then
        objselect.ClickButton()
        Set objselect = Nothing
      End If
    Else
      Call EnoviaSearch_DynText(objDynText,oModel.Common.Policy)
    End If  
       
  Set objSelectItem = Nothing  
  
End Function

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteState()
'Description                  : Selecting State
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 29 - May-2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : Geetanjali - Added Validations for Array Check and multi state
'Revision Date                : 7-Jun-2017
'##################################################################################################################

Function EnoviaNamed_ExecuteState(oModel)
  
  Sys.Refresh
  Set objState = objGetObject(OR_EnoviaSearch_SearchStatePnl,"",1500)
  If Not (objState is Nothing) Then
    objState.Click()
    Set objState = Nothing
  End If
  Sys.Refresh
  
  Set objstateInput = objGetObject(OR_EnoviaSearch_SStateDrp,"",6000)
    
  If Not (objstateInput is Nothing) Then                 
    IF IsArray(oModel.Common.State) = True Then
      objstateInput.MultiSelect(oModel.Common.State)
    Else
      objstateInput.ClickItem(oModel.Common.State)
    End IF
      Set objStateSubmit = objGetObject(OR_EnoviaSearch_SStateBtn,"",2000)
      If Not (objStateSubmit is Nothing) Then
        objStateSubmit.Click()
      End If
    Else
     Call EnoviaSearch_DynText(objDynText,oModel.Common.State)
  End If
         
End Function


'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteOriginator
'Description                  : Selecting Originator
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 30- May-2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : Geetanjali - Added Validations for Array Check and multi user
'Revision Date                : 1-Jun-2017
'##################################################################################################################

Function EnoviaNamed_ExecuteOriginator(oModel)

  Set objOriginator = objGetObject(OR_EnoviaSearch_SearchOriginatorPnl,"",2000)
  If Not (objOriginator is Nothing) Then
    objOriginator.Click()
    Set objOriginator = Nothing
  End If
      
  Call EnoviaSearch_AlertWindow("")
  
  Call MaximizeAllWindows()
  
  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.User) = True) Then
    Call EnoviaNamed_ExecuteOriginatorDetails(oModel,g_strEnvironment)
  End IF
     
End Function

'##################################################################################################################
'Function Name                : EnoviaNamed_ExecuteOriginatorDetails
'Description                  : Performing Operations on Originator
'Arguments                    : NA
'Return Value                 : Nothing
'Author                       : Sumana Gottipati
'Creation Date                : 30 - May-2017
'Special Conditions           : Test Object should Exists on screen else will return false & null object                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
  
Function EnoviaNamed_ExecuteOriginatorDetails(oModel,sEnv)

Dim bOrgCheck
bOrgCheck = False

  If (oModel.OriginatorUser.CaseSensitive) <> "" Then
    Set objCaseSensitive = objGetObject(OR_EnoviaSearch_SOriginatorCaseSensitiveChk, g_SearchPageURL,1000)
    If Not (objCaseSensitive is Nothing) Then
      objCaseSensitive.ClickChecked(oModel.OriginatorUser.CaseSensitive)
      Set objCaseSensitive = Nothing
    End If
  End If
  
  If (oModel.OriginatorUser.LimitResults) <> "" Then
    Set objLimitTo = objGetObject(OR_EnoviaSearch_SOriginatorLimitToChk, g_SearchPageURL,1000)
    If Not (objLimitTo is Nothing) Then
      objLimitTo.SetText(oModel.OriginatorUser.LimitResults)
      Set objLimitTo = Nothing
    End If
  End If

  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.NameOrNumber) = True) Then
    Set objNumber = objGetObject(OR_EnoviaSearch_SOriginatorNameNumbPnl, g_SearchPageURL,1000)
    If Not (objNumber is Nothing) Then
      objNumber.Click()
      Set objNumber = nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OriginatorUser.NameOrNumber)
    bOrgCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.FirstName) = True) Then
    'if sEnv="plmdev" then
      Set objFirstName = objGetObject(OR_EnoviaSearch_SOwnerFNamePnl1, g_SearchPageURL, 1000)
'    else
'      Set objFirstName = objGetObject(OR_EnoviaSearch_SOwnerFNamePnl, g_SearchPageURL, 1000)
'    end if
    If Not (objFirstName is Nothing) Then
      objFirstName.Click()
      Set objFirstName = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OriginatorUser.FirstName)
    bOrgCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.LastName) = True) Then
    'if sEnv="plmdev" then
      Set objLastName = objGetObject(OR_EnoviaSearch_SOwnerLnamePnl1,g_SearchPageURL,1000)
'    else
'      Set objLastName = objGetObject(OR_EnoviaSearch_SOwnerLnamePnl,g_SearchPageURL,1000)
'    end if
    If Not (objLastName is Nothing) Then
      objLastName.Click()
      Set objLastName = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OriginatorUser.LastName)
    bOrgCheck = True
  End If
  
  If (EnoviaSearch_ValCheck(oModel.OriginatorUser.Member) = True) Then
    Set objInputMember = objGetObject(OR_EnoviaSearch_SOriginatorMemberEdt,g_SearchPageURL,1000)
    If Not (objInputMember is Nothing) Then
      objInputMember.Click()
      Set objInputMember = Nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OriginatorUser.Member)
    bOrgCheck = True
  End If
  
  If bOrgCheck = False Then
    Set objNumber = objGetObject(OR_EnoviaSearch_SOriginatorNameNumbPnl, g_SearchPageURL,1000)
    If Not (objNumber is Nothing) Then
      objNumber.Click()
      Set objNumber = nothing
    End If
    Call EnoviaSearch_DynText(objDynText,oModel.OriginatorUser.User)
  End If

  Set objRefresh = objGetObject(OR_EnoviaSearch_SOriginatorRefreshCmd,g_SearchPageURL,1000)
  If Not (objRefresh is Nothing) Then
    objRefresh.Click()
    Set objRefresh = Nothing
  End If

  Set objSelectItem = objGetObject(OR_EnoviaSearch_SOriginatorChk,g_SearchPageURL,1000)
  If Not (objSelectItem is Nothing) Then
    objSelectItem.ClickChecked(True)
    Set objSelectItem = Nothing
  End If
  
  Set objsubmit = objGetObject(OR_EnoviaSearch_SOriginatorBtn,g_SearchPageURL,1000)
  If Not (objsubmit is Nothing) Then
    objsubmit.ClickButton()
    Set objsubmit = Nothing
  End If
  
End Function

