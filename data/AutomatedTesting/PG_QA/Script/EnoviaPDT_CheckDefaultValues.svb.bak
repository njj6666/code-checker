'USEUNIT WebObjectLib
'USEUNIT OR_Enovia
'USEUNIT ExcelLib
'USEUNIT EnoviaPDT_ValidationUtils
'USEUNIT StringLib
'USEUNIT WindowsUtility
'USEUNIT GlobalVars
'USEUNIT LogLib
'USEUNIT EnoviaPDT_PDTUtils
'USEUNIT EnoviaUtils

'Description  : Function to Check default values of fields in a given page
'Inputs       : sSheetName - SheetName in excel containing the Fields in the expected order
'             : sPartType - Name of the Part type being worked on
'Output       : None               
'Author       : Sandeep  

Sub EnoviaPDT_DefaultValuesValidation(sSheetName,sPartType)

  On Error Resume Next
    
  Dim sColumnName, sColumnName_1, sInputFieldColName, sFilePath, nSearchDepth, sErrorMessage, bPassed, oParent,_
  oAttrParent, oAttrDoneBtn, bInEditMode, aFields, oAttrFieldCollection, oCellValMapping, oActualCell, aDefaultVal,_
  oInputDict, aActualField, oFieldCollection, aFieldNotFound, aDefValFailed, arrValuesToIgnore, arrSplitDefVal, bFailFlag,_
  oWshell, strCompareRes, i, j, k, l, y, sSearchURL, aHeaderFieldNames(), aHeaderFieldDefaults()
  
  sColumnName = "Field" 'Name of column to be searched in the Excel
  sColumnName_1 = "Default Value" 'Name of column to be searched in the Excel
  sInputFieldColName = "Input"
  sFilePath =  g_pdt_FileLocation&sPartType&".xlsx"  'Part Type excel file path
  sFilePath_1 =  g_pdt_FileLocation&"Formulation.xlsx"
  nSearchDepth = 10 'Depth at which FindAllChildren method is run
  sErrorMessage = ""
  bPassed = ""
  
  Select Case Ucase(sSheetName) ' Select the Parent Object based on the SheetName
    Case "CREATE"
      If sPartType = "Virtual Intermediate" Then
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","") 
      else  
        Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,g_CreatePage_URL,"")
      End If  
    Case "ATTRIBUTES"
      If sPartType = "Formulation Process" OR sPartType = "Formulation Part" Then
        Set oFormulationPrepInfo = EnoviaPDT_PrepForFormulationValidation(sFilePath_1,sSheetName,sColumnName,sPartType) 'Gather all data from the Parent Formulation
        Set oCellValMapping = oFormulationPrepInfo.item("AttrValueMapping") 'Get the all the Attribute values of Formulation
        set oFieldValues = oFormulationPrepInfo.item("FormulationNos")  'Get the Formulation, part and process numbers
        set oRevisionValues = oFormulationPrepInfo.item("RevisionValues") 'Get the corresponding revision values

        nFormulationNo = oFieldValues.item("Formulation")&" "&oRevisionValues.item("Formulation") 'Append Revision value to Formulation
        nFormulationPartNo = oFieldValues.item("Formulation Part")&" "&oRevisionValues.item("Formulation Part") 'Append Revision value to Formulation Part
        nFormulationProcessNo = oFieldValues.item("Formulation Process")
      End If
      
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,"","") 
'    Case "TABLES WEIGHT" JR 0815 doesn't seem to have default value field in spreadsheet
'      Set oParent = objGetObject(OR_EnoviaPDT_TablesFme,"","")  
    Case "COPY"
      Set oCellValMapping = EnoviaPDT_ReadAttributeValues(sFilePath,sColumnName,nSearchDepth)
      If sPartType = "Formulation Process" Then
        Sys.Browser(g_strBrowserType).FindChild(Array("ObjectType","WndCaption"),Array("BrowserWindow","3DEXPERIENCE Platform*"),1).Activate  'Activate the Main window to gather data from Formulation
        Set oFormulationPrepInfo = EnoviaPDT_PrepForFormulationValidation(sFilePath_1,sSheetName,sColumnName,sPartType) 'Gather all data from the Parent Formulation
        Set oCellValMapping_Formulation = oFormulationPrepInfo.item("AttrValueMapping") 'Get the all the Attribute values of Formulation Part
      
        If oCellValMapping_Formulation.exists("Formulation Type") Then
          oCellValMapping.add "Formulation Type",oCellValMapping_Formulation.item("Formulation Type") 'Add Formulation type to mapping
        End If
        Sys.Browser(g_strBrowserType).FindChild(Array("ObjectType","WndCaption"),Array("BrowserWindow","*Copy*"),1).Activate 'Activate the Copy window to gather data from Formulation
      End If

      If sPartType = "Formulation Process" Then 'Copy URL for Formulation Process is same as create URL
        sSearchURL = g_CreatePage_URL
      else
        sSearchURL = g_CopyPage_URL
      End If    
      Set oParent = objGetObject(OR_EnoviaPDT_CreateTbl,sSearchURL,"")  'Get Copy Page's parent
      oParent.Click 'Click to avoid weird IE crashes
      Delay 1000
      'MaximizeAllWindows
      Set oAttrFieldCollection = Nothing
      set oAttrParent = Nothing
      Set oAttrDoneBtn = Nothing 
    Case Else
      sErrorMessage = sErrorMessage&"The Sheet Name given does not have a Page object assigned "
      Log.Warning sErrorMessage
      Exit Sub
  End Select
  
  aFields = Excel_GetColumnValues(sSheetName,sFilePath,sColumnName) 'Call to get all ColumnValues in a excel sheet into an Array
  aDefaultVal = Excel_GetColumnValues(sSheetName,sFilePath,sColumnName_1) 'Call to get all ColumnValues in a excel sheet into an Array
  Set oInputDict = Excel_CreateDictionaryForInput(sSheetName,sFilePath,sColumnName,sInputFieldColName) 'Dictionary object which contains Field Name and its input mapping
  
  If Not(IsArray(aFields)) or Not(IsArray(aDefaultVal)) Then  'Check Columns values are returned 
    sErrorMessage = sErrorMessage&"Failed to retrieve Column values from Excel Sheet "
    Log.Warning sErrorMessage
    bPassed = False  
    'Exit Sub
  End If
  
  ' JR 06/30. We need to check Header default values as well. 
  If Ucase(sSheetName) = "ATTRIBUTES" Then
    aColumnArray = Array("HeaderCell","CellDefaul")
    aHeaderFields = Excel_GetMultipleColumnValues("Attributes", sFilePath, aColumnArray, True)  
  
    ' We can get Global headers from attributes page
    bAddFlag = False
    k=0
    For i=0 to Ubound(aHeaderFields)
    
      If bAddFlag = True Then
        ReDim Preserve aHeaderFieldNames(k)
        ReDim Preserve aHeaderFieldDefaults(k)
        
        aHeaderFieldNames(k)    = aHeaderFields(i,0)
        aHeaderFieldDefaults(k) = aHeaderFields(i,1)
        k=k+1
      End If
    
      If aHeaderFields(i,0) = "Global Header" Then
        bAddFlag = True
      End If
    Next
    RemainingLen = Ubound(aFields) - UBound(aDefaultVal)
    For x = 1 to RemainingLen
      ReDim Preserve aDefaultVal(UBound(aDefaultVal)+1)
      aDefaultVal(UBound(aDefaultVal)) = ""
    Next
    ' Add extra fields and values into process arrays
    For kk=0 to Ubound(aHeaderFieldNames)
      ReDim Preserve aFields(Ubound(aFields)+1)
      ReDim Preserve aDefaultVal(UBound(aDefaultVal)+1)
      
      aFields(Ubound(aFields)) = aHeaderFieldNames(kk)
      aDefaultVal(UBound(aDefaultVal)) = aHeaderFieldDefaults(kk)
    Next
    
  End If '-----
  
  l = 0
  oFieldCollection = oParent.FindAllChildren("ObjectType","Cell",nSearchDepth)  'Find all children of type Cell
  If Ubound(oFieldCollection) < 0 Then
   sErrorMessage = sErrorMessage&"There are no objects of type Cell "
   Log.Warning sErrorMessage
   bPassed = False
   'Exit Sub
  End If
  
  If Not(bPassed = False) Then 
    Redim aActualField(Ubound(aFields))
    Redim aFieldNotFound(Ubound(aFields))
    Redim aDefValFailed(Ubound(aFields))
    k=0
    l=0
    For i = 0 to Ubound(aFields) 
      bFieldFound = False
      For j = 0 to Ubound(oFieldCollection)
        If UCase(oFieldCollection(j).ContentText) = Ucase(aFields(i)) Then  'Compare with content Text property
          If Ucase(sSheetName) = "CREATE" and sPartType = "Virtual Intermediate" Then
            If oParent.FindChild(Array("RowIndex","ColumnIndex"),Array(oFieldCollection(j).RowIndex+1,oFieldCollection(j).ColumnIndex)).Exists Then
              Set oActualCell = oParent.cell(oFieldCollection(j).RowIndex+1,oFieldCollection(j).ColumnIndex) 'Get the Actual Field object by adding 1 to Column index of Lable Cell
              Set aActualField(k) = EnoviaPDT_GetChild(oActualCell) 'Get the Field Object from the Cell
            else
              Set aActualField(k) = EnoviaPDT_GetChild(oFieldCollection(j))  
            End If
          else If Ucase(sSheetName) = "TABLES" OR Ucase(sSheetName) = "NOTES" OR Ucase(sSheetName) = "TABLES WEIGHT" Then
              Set aActualField(k) = EnoviaPDT_GetChild_TablesnNotes(oFieldCollection(j),True)
          else
            Set oActualCell = oParent.cell(oFieldCollection(j).RowIndex,oFieldCollection(j).ColumnIndex+1) 'Get the Actual Field object by adding 1 to Column index of Lable Cell
            Set aActualField(k) = EnoviaPDT_GetChild(oActualCell) 'Get the Field Object from the Cell
          End IF
          End If
          If aActualField(k) Is Nothing = False Then 'Check if Field object is found
            bFieldFound = True
            k=k+1
            Exit For
          End If
        End If
        If j = Ubound(oFieldCollection) and bFieldFound = False Then   'If field is not found add it into an array
          aFieldNotFound(l) = aFields(i)
          l=l+1
        End IF
      Next
    Next  

    ReDim Preserve aFieldNotFound(l-1)
 
    If Ubound(aFieldNotFound) >= 0 Then   
      Log.Warning "Field(s) "&Join(aFieldNotFound,",")&" is/are not available in the application"
      bPassed = False
      For x = 0 to Ubound(aFieldNotFound)
        sErrorMessage = "Field "&aFieldNotFound(x)&" is not available in the application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFieldNotFound(x)&" Should be available in the application",bPassed,sErrorMessage,"")
      Next
      'Exit Sub
    else
      icnt=0
  
      If Ucase(sSheetName) = "CREATE" and Not(sPartType = "Virtual Intermediate") Then  'Select the part type for create page
        aActualField(0).ScrollIntoView
        aActualField(0).CLickItem sPartType
        WaitPageLoad(g_CreatePage_URL)
      End If
  
      arrValuesToIgnore = Array("null","Auto","None") 'Ignore these values for Default Validation
  
      k=0
      For i = 0 to Ubound(aDefaultVal)
        bFailFlag = False
        sErrorMessage = ""
        If instr(aDefaultVal(i),"DEPENDENT") Then 'If there is a keyword DEPENDENT
          arrSplitDefVal = Split(aDefaultVal(i),":")  'Format- DEPENDENT:Dependent_Field:DefaultValue
          For y = 0 to Ubound(aFields)
            If strcomp(aFields(y),arrSplitDefVal(1),1) = 0 Then 'Check if Dependent_Field mentioned is valid
              Exit For
            End If
          Next
          If y > Ubound(aFields) Then
            sErrorMessage = sErrorMessage&"Dependent Field "&arrSplitDefVal(1)&" mentioned is invalid"
            Log.Warning sErrorMessage
            'Exit Sub
          End If
          If oInputDict.Exists(aFields(y)) Then 'Check if input has been defined
            Call EnoviaPDT_CheckTypeNInput(aActualField(y),oInputDict.item(aFields(y)))  'Enter input value
            Set oWshell = CreateObject("WScript.Shell")  'TAB out 
            oWshell.SendKeys "{TAB}"
            oWshell.SendKeys "{RIGHT}"
            Delay 1500
            Set oWshell = Nothing
          End If
          If arrSplitDefVal(2) = "" Then  'If the third part is empty then use the Dependent_Field's value as Default Value
            aDefaultVal(i) = EnoviaPDT_ReadExistingValue(aActualField(y))
          else
            aDefaultVal(i) = arrSplitDefVal(2)  'Set the third part as Default value
          End If
        else If instr(1,aDefaultVal(i),"Inherited",1) Then  'If there is a keyword Inherited
          If oCellValMapping.exists(aFields(i)) Then 'oCellValMapping is a dictionary object containing the Field Names as Keys and their values as value 
            aDefaultVal(i) = oCellValMapping.item(aFields(i))  'Set the value obtained from Attribute page as default
          End If
        else If instr(1,aDefaultVal(i),"Formulation No",1) Then
          aDefaultVal(i) = nFormulationNo
        Else If instr(1,aDefaultVal(i),"Formulation Part No",1) Then
          aDefaultVal(i) = nFormulationPartNo
        End If
        End If 
        End If   
        End If
        If aDefaultVal(i) <> "" Then  'Make sure Default value is not empty
          If aDefaultVal(i) = "Test Method(DSO)" and Ucase(sSheetName) = "COPY" Then 'Comparison between Copy and Attributes fails as Type name has (DSO)
            aDefaultVal(i) = "Test Method"
          End If
          If EnoviaPDT_CheckStringValinArray(arrValuesToIgnore,aDefaultVal(i)) = False Then 'Check if Default value is not among arrValuesToIgnore
            strCompareRes = strcomp(EnoviaPDT_Trimvalue(EnoviaPDT_ReadExistingValue(aActualField(i))),EnoviaPDT_Trimvalue(aDefaultVal(i)),1) 'Compare the Existing value of the field and compare with default value from Excel/App 
            If strCompareRes = Null or strCompareRes <> 0 Then  'if String Compare Fails
              bFailFlag = True
            End If
          else If strcomp(aDefaultVal(i),"null",1) = 0 Or strcomp(aDefaultVal(i),"None",1) = 0 Then
            If aFields(i) = "Fix Target % As Consumed" Then 'Excel states default as None, but as per property returned it will be false
              strCompareRes = strcomp(EnoviaPDT_ReadExistingValue(aActualField(i)),False,1)
            else
              strCompareRes = strcomp(EnoviaPDT_ReadExistingValue(aActualField(i)),"",1)
            End If  
            If strCompareRes = Null or strCompareRes <> 0 Then  'if String Compare Fails
              bFailFlag = True
            End If
'          else If strcomp(aDefaultVal(i),"Auto",1) = 0 Then
'            If EnoviaPDT_ReadExistingValue(aActualField(i)) = "" Then  'Check Field value is not empty
'              bFailFlag = True    
'            End If
'          End If  
          End If 
          End If
          If bFailFlag = False Then
            bPassed  = True
            Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" has the expected default value",bPassed,sErrorMessage, "")
            Log.Message "Field "&aFields(i)&" has the expected default value"
          else
            bPassed  = False
            sErrorMessage = sErrorMessage&"Field "&aFields(i)&" does not have the expected default value"
            Log.Warning sErrorMessage
            Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Field "&aFields(i)&" should have the expected default value",bPassed,sErrorMessage,"")
          End If
          g_isBlocked = False
        End If    
      Next
    End If  
  else
    Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Fields Should be in expected order",bPassed,sErrorMessage, "")
    Log.Warning sErrorMessage
  End if
  
  g_isBlocked = False
  
  'Clean up the variables
  EnoviaPDT_ClearVariable sColumnName
  EnoviaPDT_ClearVariable sColumnName_1
  EnoviaPDT_ClearVariable sInputFieldColName
  EnoviaPDT_ClearVariable sFilePath
  EnoviaPDT_ClearVariable nSearchDepth
  EnoviaPDT_ClearVariable sErrorMessage
  EnoviaPDT_ClearVariable bPassed
  EnoviaPDT_ClearVariable oParent
  EnoviaPDT_ClearVariable oAttrParent
  EnoviaPDT_ClearVariable oAttrDoneBtn
  EnoviaPDT_ClearVariable bInEditMode
  EnoviaPDT_ClearVariable aFields
  EnoviaPDT_ClearVariable oAttrFieldCollection
  EnoviaPDT_ClearVariable oCellValMapping
  EnoviaPDT_ClearVariable oActualCell
  EnoviaPDT_ClearVariable aDefaultVal
  EnoviaPDT_ClearVariable oInputDict
  EnoviaPDT_ClearVariable aActualField
  EnoviaPDT_ClearVariable oFieldCollection
  EnoviaPDT_ClearVariable aFieldNotFound
  EnoviaPDT_ClearVariable aDefValFailed
  EnoviaPDT_ClearVariable arrValuesToIgnore
  EnoviaPDT_ClearVariable arrSplitDefVal
  EnoviaPDT_ClearVariable bFailFlag
  EnoviaPDT_ClearVariable oWshell
  EnoviaPDT_ClearVariable strCompareRes
  EnoviaPDT_ClearVariable i
  EnoviaPDT_ClearVariable j
  EnoviaPDT_ClearVariable k
  EnoviaPDT_ClearVariable l
  EnoviaPDT_ClearVariable y

End Sub 