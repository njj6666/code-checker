'USEUNIT EnoviaPDF_Vars
'USEUNIT EnoviaPDF_Utils
'USEUNIT LogLib
'USEUNIT GlobalVars
'USEUNIT EnoviaUtils
'USEUNIT WindowsUtility


Function PDFCompareEngine()
 ' On Error Resume Next     
  const xlCellTypeVisible = &Hc
  Call SetCurrentPdfviewTypeProperties() ' Sets g_Pdf_CurrentPdfViewTypeColNo value
  Set oExcel = CreateObject("Excel.Application")
  oExcel.Workbooks.Open g_Pdf_CurrentPDFtoExcelfilePathAndName&".xlsx"
  Set oWorkSheet = oExcel.Worksheets.Item("Table 1")
  Log.AppendFolder("PDF View Type:"&g_pdf_sCurrentViewType)
  For k=1 to Ubound(g_Pdf_CurrentInputExcelSheetNames)-1
      m_StrCurrentSheetName =  g_Pdf_CurrentInputExcelSheetNames(k)
      Select case m_StrCurrentSheetName
        case  "Attributes" , "Organizations" , "Notes", "Performance Characteristics", "Performance Characteristic"       
          Call SetCurrentSheetInputDriver(m_StrCurrentSheetName) ' Sets g_Pdf_CurrentPDFTestDriver
          blntolog = True   
          For y = 0 to UBound(g_Pdf_CurrentPDFTestDriver)
              sIsViewSetToYes = g_Pdf_CurrentPDFTestDriver(y,g_Pdf_CurrentPdfViewTypeColNo)
              If sIsViewSetToYes = "Yes" Then
                  If blntolog then
                      Log.AppendFolder("Table Validatios for: "&m_StrCurrentSheetName)
                      blntolog = false
                  End if
                  Set objValStartCell = Nothing
                  Set objValStartCell = oWorkSheet.cells(oWorkSheet.Rows.count,oWorkSheet.Columns.count).SpecialCells(xlCellTypeVisible).Find(m_StrCurrentSheetName) 
                  If objValStartCell Is Nothing Then   'If Column Name does not exist in Specified Sheet
                      Log.Error "Table Name "&m_StrCurrentSheetName&" is not Found in excel sheet"
                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName,False, m_StrCurrentSheetName&"Table not found in PDF", "") 
                      Exit for
                  End If
                  FoundColumn = objValStartCell.Column
                  FoundRow = objValStartCell.Row+1                                
                  nRowCount = oWorkSheet.UsedRange.Rows.Count  
                  For  z = FoundRow to nRowCount'To get Table end limit
                      sTempCurrentField = oWorkSheet.cells(z,1).Font.Size
                      If sTempCurrentField = 14 and oWorkSheet.cells(z,1) <> m_StrCurrentSheetName then
                          sTableEndlimit = z-1           
                          Exit For
                      End If
                      sTableEndlimit = nRowCount
                  Next
                  sInputFieldName = g_Pdf_CurrentPDFTestDriver(y,8)
                  sInputFieldValue = g_Pdf_CurrentPDFTestDriver(y,7)
                  sInputFieldValueOrientation = g_Pdf_CurrentPDFTestDriver(y,5)
                  Select case sInputFieldValueOrientation
                    Case "Right"
                      bIsFieldFound = False
                      For i= FoundRow to sTableEndlimit                                         
                          FoundColumn = objValStartCell.Column
                          FoundRow = objValStartCell.Row+1                      
                          While oWorkSheet.cells(i,FoundColumn) <> "" or oWorkSheet.cells(i,FoundColumn+oWorkSheet.cells(i,FoundColumn).MergeArea.Columns.Count) <> ""
                              Colval = oWorkSheet.cells(i,FoundColumn)                              
                              TColval = TrimAllSpaces(Colval)
                              sTInputFieldName = TrimAllSpaces(sInputFieldName)
                              If Lcase(TColval) = Lcase(sTInputFieldName) Then
                                  bIsFieldFound = True                                                
                                  MergeCount = oWorkSheet.cells(i,FoundColumn).MergeArea.Columns.Count
                                  FoundColumn = FoundColumn+MergeCount
                                  ActualVal = oWorkSheet.cells(i,FoundColumn)
                                  TActualVal = TrimAllSpaces(ActualVal)
                                  sTInputFieldValue = TrimAllSpaces(sInputFieldValue)                                                    
                                 If IsEmpty(TActualVal) and IsNull(sTInputFieldValue)  Then
                                      Log.Message "FieldName:"&sInputFieldName&", InputValue and PDFFieldValue are Blank"
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "InputValue and PDFFieldValue are Blank", "")
                                    ElseIf IsDate(sInputFieldValue) and IsDate(ActualVal) Then
                                      sInputDate = aqConvert.StrToDate(sInputFieldValue)
                                      sActualDate = aqConvert.StrToDate(ActualVal)
                                      If sInputDate = sActualDate Then 
                                          Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"                                    
                                          Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))
                                          Exit for                                    
                                      End If
                                    ElseIf Lcase(TActualVal) = Lcase(sTInputFieldValue) Then                                         
                                      Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"                                    
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))                                    
                                      Exit for 
                                    ElseIf IsEmpty(TActualVal) = False and IsNull(sTInputFieldValue) = False Then
                                      If aqString.Contains(TActualVal, sTInputFieldValue,0,False) = 0 Then                                         
                                          Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"                                    
                                          Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))                                    
                                          Exit for
                                      End If 
                                    ElseIf RemoveLeadingZeroes(TActualVal) = RemoveLeadingZeroes(sTInputFieldValue)Then                                         
                                      Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"                                    
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))                                    
                                      Exit for
                                    Else                                      
                                      Log.Warning "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Failed"
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, False, "Data mismatch", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))
                                      Exit for 
                                  End If                                 
                              End If
                              MergeCount = oWorkSheet.cells(i,FoundColumn).MergeArea.Columns.Count
                              FoundColumn = FoundColumn+MergeCount      
                          Wend
                      Next
                      If bIsFieldFound = False Then
                          Log.Warning "FieldName:"&sInputFieldName&" is not found in PDF"
                          Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName,False, "Field Name not found in PDF", "") 
                      End If
                    Case "Below"
                      bIsFieldFound = False 
                      For j= FoundRow to sTableEndlimit
                          ColCount = oWorkSheet.UsedRange.columns.count
                          For f=1 to ColCount
                              Colval = oWorkSheet.cells(j,f).value
                              Colval = TrimAllSpaces(Colval)
                              sInputFieldName = TrimAllSpaces(sInputFieldName)            
                              If Lcase(Colval) = Lcase(sInputFieldName) Then
                                  bIsFieldFound = True                              
                                  ActualVal = oWorkSheet.cells(j+1,f)
                                  ActualVal = TrimAllSpaces(ActualVal)
                                  sInputFieldValue = TrimAllSpaces(sInputFieldValue)
                                  If Lcase(ActualVal) = Lcase(sInputFieldValue) Then
                                      Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))
                                    ElseIf IsEmpty(ActualVal) and IsNull(sInputFieldValue)  Then
                                      Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Pass"
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "InputValue and PDFFieldValue are Blank", "")
                                    Else
                                      Log.Warning "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&ActualVal&", Validation Status: Failed"
                                      Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, False, "Data mismatch","ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(ActualVal,450))
                                  End If                                
                                  MergeCount = oWorkSheet.cells(i,FoundColumn).MergeArea.Columns.Count
                                  s=MergeCount-1
                                  f= f+ s            
                             End if 
                          Next    
                      Next
                      If bIsFieldFound = False Then
                          Log.Warning "FieldName:"&sInputFieldName&" is not found in PDF"
                      End If                     
                    Case "BelowPrefix"
                        sCurrentRowNo =  FoundRow
                        If not IsNull(g_Pdf_CurrentPDFTestDriver(y,6)) Then
                          sInputFieldValue = g_Pdf_CurrentPDFTestDriver(y,6)&sInputFieldValue
                        End If
                        For x= sCurrentRowNo+1 to sTableEndlimit
                            If oWorkSheet.Range("B"&X).Borders(9).LineStyle = 1 then
                                nTemplimit = x
                                For b = sCurrentRowNo to nTemplimit                                    
                                    sPdfFieldNametest = sPdfFieldNametest&oWorkSheet.cells(b,1).value                                    
                                Next
                                sPdfFieldNametest = sPdfFieldNametest&"Dummy"
                                If aqString.Contains(sPdfFieldNametest, "Ch") => 0 Then 
                                    CurrentHeadrowEndlimit = x
                                    sPdfFieldNametest = Null
                                    Exit For
                                End If
                            End If                                                       
                        Next                                                   
                           For v=1 to oWorkSheet.UsedRange.columns.count ' iterate for all columns
                                sPdfFieldValue = null
                                sPdfFieldName = null
                                bisbwfFound = False
                                If sInputFieldName = "" Then
                                  log.Warning "Input fieldname is blank"
                                  Exit for
                                End If     
                                For w = sCurrentRowNo to CurrentHeadrowEndlimit ' for Each row                                    
                                    sPdfFieldName = sPdfFieldName&oWorkSheet.cells(w,v).value                                    
                                Next
                                sPdfFieldName = TrimAllSpaces(sPdfFieldName)
                                sInputFieldName = TrimAllSpaces(sInputFieldName)
                                If sInputFieldName = "UnitofMeasure(UoM)" Then
                                    If aqString.Contains(sPdfFieldName, sInputFieldName) > 0 Then
                                        bIsSkip = True 
                                    End If 
                                End If
                                If not IsNull(sInputFieldName) Then                                                       
                                If aqString.Contains(sPdfFieldName, sInputFieldName,0,False) => 0 and bIsSkip = False Then                                                                     
                                    For u = CurrentHeadrowEndlimit+1 to sTableEndlimit
                                        sPdfFieldValue = sPdfFieldValue&oWorkSheet.cells(u,v).value                                        
                                    Next
                                    bIsFieldvalueBlank = false
                                    If IsNull(sInputFieldValue)  Then
                                       Log.Message "FieldName:"&sInputFieldName&", InputValue is Blank, Validation Status: Pass"
                                       Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName&", Input Value is Blank", True, "", "")
                                       bIsFieldvalueBlank = True
                                       bisbwfFound = True
                                       Exit For
                                    End If
                                    If bIsFieldvalueBlank = false Then 
                                     sPdfFieldValue = TrimAllSpaces(sPdfFieldValue)
                                     sInputFieldValue = TrimAllSpaces(sInputFieldValue)
                                    If aqString.Contains(sPdfFieldValue, sInputFieldValue) => 0 Then
                                        Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                        Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(sPdfFieldValue,450))
                                        bisbwfFound = True
                                        Exit For
                                         
                                      Else
                                        log.Warning "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Fail"
                                        Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, False, "Data mismatch", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)&", ActualValue:"&TrimToLog(sPdfFieldValue,450)) 
                                        bisbwfFound = True
                                        Exit For                                        
                                    End If
                                    End If                                                                         
                                End If
                                MergeCount = oWorkSheet.cells(sCurrentRowNo,v).MergeArea.Columns.Count
                                Vars=MergeCount-1
                                v= v+ Vars 
                                End If
                                bIsSkip = False                                                                                            
                            Next   
                           If bisbwfFound = False and sInputFieldName <> "" Then
                              Log.Warning "FieldName:"&sInputFieldName&" is not found in PDF"
                              Call LogStepDatapdf("Table:"&m_StrCurrentSheetName&", FieldName:"&sInputFieldName, False, "Field Name not found in PDF", "") 
                           End If                
                    End Select
                End IF         
            Next             
        case  "Headers"
          Call SetCurrentSheetInputDriver(m_StrCurrentSheetName) ' Sets g_Pdf_CurrentPDFTestDriver
          For o = 0 to UBound(g_Pdf_CurrentPDFTestDriver)
              sIsViewSetToYes = g_Pdf_CurrentPDFTestDriver(o,g_Pdf_CurrentPdfViewTypeColNo+1)
              If sIsViewSetToYes = "Yes" and IsNull(sInputFieldValue) = False Then                               
                  Set ObjPdfToRead = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(g_Pdf_CurrentPDFfilePathAndName&".pdf")
                  Set ObjPdfTextstripper = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()                  
                  ObjPdfTextstripper.setSortByPosition(True)                  
                  If g_Pdf_CurrentPDFTestDriver(o,0) = "Global Header" Then
                      STextToCompare = ObjPdfTextstripper.getText_2(ObjPdfToRead)
                      log.Message "Globel header validation"&g_Pdf_CurrentPDFTestDriver(y,0) 
                      nGHeaderEndlimit = aqString.Contains(STextToCompare, "Attributes", 0, False)
                      nGHeaderText =  aqString.SubString(STextToCompare, 0, nGHeaderEndlimit)
                      nGHeaderText = TrimAllSpaces(nGHeaderText)
                      log.Message "Trim:"&nGHeaderText
                      sInputFieldName = TrimAllSpaces(g_Pdf_CurrentPDFTestDriver(o,9))
                      sInputFieldValue = TrimAllSpaces(g_Pdf_CurrentPDFTestDriver(o,8))
                      Select Case sInputFieldName
                        case "Classification"
                            If aqString.Contains(nGHeaderText, sInputFieldValue, 0, true)= 0 Then
                                Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                Call LogStepDatapdf("PDF Global Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450))
                                bIsHeaderfound = True
                            End If
                        case "HasATS"
                            nFieldNameposition = aqString.Contains(nGHeaderText, sInputFieldName, 0, False)                            
                            If aqString.Contains(nGHeaderText, sInputFieldValue, nFieldNameposition, True) = nFieldNameposition+len(sInputFieldName)+1 Then
                                Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                Call LogStepDatapdf("PDF Global Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)) 
                                bIsHeaderfound = True
                            End If
                        Case "SAPType"
                            nRefFieldposition = aqString.Contains(nGHeaderText, g_pdf_sCurrentPartShortName, 0, False)                            
                            If aqString.Contains(nGHeaderText, sInputFieldValue, nRefFieldposition, True) = nRefFieldposition+len(g_pdf_sCurrentPartShortName)+3 Then
                                Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                Call LogStepDatapdf("PDF Global Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)) 
                                bIsHeaderfound = True
                            End If                                                     
                        case Else 
                             Log.Error "Headers validation not added for "&sInputFieldName
                      End Select
                      Set STextToCompare = Nothing
                  End If   
                  If g_Pdf_CurrentPDFTestDriver(o,0) = "Extended Header" Then
                      ObjPdfTextstripper.setPageStart(2)
                      ObjPdfTextstripper.setEndPage(2)
                      STextToCompare = ObjPdfTextstripper.getText_2(ObjPdfToRead)
                      log.Message "Extended header validation"&g_Pdf_CurrentPDFTestDriver(y,0) 
                      'nEHeaderStartlimit = aqString.Contains(STextToCompare, "Printed", 0, False)
                      nEHeaderEndlimit = aqString.Contains(STextToCompare, "_____", 0, False)
                      nEHeaderText =  aqString.SubString(STextToCompare, 0, nEHeaderEndlimit)
                      nEHeaderText = TrimAllSpaces(nEHeaderText)
                      log.Message "Trim:"&nEHeaderText
                      sInputFieldName = TrimAllSpaces(g_Pdf_CurrentPDFTestDriver(o,9))
                      sInputFieldValue = TrimAllSpaces(g_Pdf_CurrentPDFTestDriver(o,8))
                      Select Case sInputFieldName
                        case "Name"
                            nFieldNameposition = aqString.Contains(nEHeaderText, sInputFieldName, 0, False)
                            v1 = aqString.Contains(nEHeaderText, sInputFieldValue, nFieldNameposition, True)
                            v2 = nFieldNameposition+len(sInputFieldName)+1
                            If aqString.Contains(nEHeaderText, sInputFieldValue, nFieldNameposition, True) = nFieldNameposition+len(sInputFieldName)+1 Then
                                Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                Call LogStepDatapdf("PDF Extended Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)) 
                                bIsHeaderfound = True
                            End If
                        case "Title"
                            nFieldNameposition = aqString.Contains(nEHeaderText, sInputFieldName, 0, False)
                            If nFieldNameposition => 0 Then
                                v1 = aqString.Contains(nEHeaderText, sInputFieldValue, nFieldNameposition, True)
                                v2 = nFieldNameposition+len(sInputFieldName)
                                If aqString.Contains(nEHeaderText, sInputFieldValue, nFieldNameposition, True) = nFieldNameposition+len(sInputFieldName) Then
                                    Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                    Call LogStepDatapdf("PDF Extended Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450)) 
                                    bIsHeaderfound = True
                                  Else
                                  Log.Error "Headers validation Failed for "&sInputFieldName
                                End If
                            End If
                        case "Type"
                             If aqString.Contains(nEHeaderText, Ucase(sInputFieldValue), 0, true) => 0 Then
                                  Log.Message "FieldName:"&sInputFieldName&", InputValue:"&sInputFieldValue&", PDFFieldValue:"&sPdfFieldValue&", Validation Status: Pass"
                                  Call LogStepDatapdf("PDF Extended Headers, FieldName:"&sInputFieldName, True, "", "ExpectedValue:"&TrimToLog(sInputFieldValue,450))
                                  bIsHeaderfound = True
                                Else
                                 Log.Error "Headers validation Failed for "&sInputFieldName 
                            End If                                             
                        case "State"
                            bIsHeaderfound = True
                        case Else 
                             Log.Error "Headers validation not added for "&sInputFieldName
                             bIsHeaderfound = True
                      End Select
                      Set STextToCompare = Nothing                                       
                  End If
                  If bIsHeaderfound = False Then
                      log.Warning sInputFieldName&" Validation case not found"     
                  End If
                  bIsHeaderfound = False
                  Set ObjPdfToRead = Nothing
                  Set ObjPdfTextstripper = Nothing     
              End If               
          Next              
        case else
          log.Warning m_StrCurrentSheetName&" Table not found in the data sheet"           
      End Select
      Log.PopLogFolder  
  Next
  Log.PopLogFolder   
  set S_ArrayHeadings = Nothing
  Set nHeadingscount = Nothing 
  oExcel.ActiveWorkbook.Close
  oExcel.Application.Quit
  Set oWorkSheet = nothing
  Set oExcel = nothing 
  g_isBlocked = False 
End Function

