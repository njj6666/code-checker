'USEUNIT EnoviaUtils
'USEUNIT ExcelLib
'USEUNIT StringLib
'USEUNIT WindowsUtility
'USEUNIT GlobalVars
'USEUNIT OR_Enovia
'USEUNIT EnoviaPDT_PDTUtils
'USEUNIT WebObjectLib
'USEUNIT WebKeywords
'USEUNIT EnoviaUtils
'USEUNIT EnoviaPDT_ValidationUtils

sub testPDF()
 g_strBrowserType = "iexplore"
 Call EnoviaPDT_GeneratePDFTEmplateExcel("Finished Product Part","81654582 001")
end sub

' Function reads application field names and values and creates excel file for PDFViews
Function EnoviaPDT_GeneratePDFTEmplateExcel(PartType, gcasCode)
  On Error Resume Next
  
  Dim dTabsData, bSuccess
  
  Set dTabsData = CreateObject("Scripting.Dictionary")

  Call EnoviaPDT_NavigateTabsAndLinks(gcasCode,"Attributes")
  waitPageLoad("")
  'HEADERS
  Set dTabsData = EnoviaPDT_GetHeaderFieldAndValues(PartType, dTabsData)
  
  ' ATTRIBUTES
  Set dTabsData = EnoviaPDT_GetFieldAndValues("Attributes",OR_EnoviaPDT_CreateTbl, dTabsData, PartType)

  ' NOTES
  If EnoviaPDT_NavigateTabsAndLinks("","Notes") Then
    Set dTabsData = EnoviaPDT_GetFieldAndValues("Notes",OR_EnoviaPDT_NotesPnl, dTabsData, PartType)
  End if
  ' TABLES
  If EnoviaPDT_NavigateTabsAndLinks("","Tables") Then
    Set dTabsData = EnoviaPDT_GetFieldAndValues("Tables",OR_EnoviaPDT_TablesPnl, dTabsData, PartType)
  End If
  
  ' Write spreadsheet
  bSuccess = EnoviaPDT_WritePDFdateExcel(PartType, GcasCode, dTabsData)
  
  If bSuccess = False Or Err.Number <> 0 Then
    EnoviaPDT_GeneratePDFTEmplateExcel = False
  Else
    EnoviaPDT_GeneratePDFTEmplateExcel = True
  End If
  
  EnoviaPDT_ClearVariable dTabsData
End Function

' Function to get header fields from PDT file and values from application
' Structure of Header table is different and needs special logic to process
Function EnoviaPDT_GetHeaderFieldAndValues(PartType, dTabsData)
  
  Dim aFields,aFieldNames(), bAddFlag, aRebuild()
  
  sPDTSheet = g_pdt_FileLocation&PartType
  
  ' Read all the column names from PDT part type specified spreadsheet
  aColumnArray = Array("HeaderCell","Used in All Info?","Used in Gen Doc?","Used in CM View?","Used in Supplier View?",_
                        "Orientation","Prefix","PDF Table Name","PDF Column Name")
 
  aFields = Excel_GetMultipleColumnValues("Attributes",sPDTSheet,aColumnArray, True)  
  
  ' We can get Global headers from attributes page
  bAddFlag = False
  k=0
  For i=0 to Ubound(aFields)
    
    If bAddFlag = True Then
      ReDim Preserve aFieldNames(k)
      aFieldNames(k) = aFields(i,0)
      k=k+1
    End If
    
    If aFields(i,0) = "Global Header" Then
      bAddFlag = True
    End If
  Next
  
  Set oNamesAndValues = EnoviaPDT_GetFieldNamesAndValues(OR_EnoviaPDT_CreateTbl, aFieldNames)
  
  ' Extended Header, we need to hard code harvest the values
  oNamesAndValues.Add Ucase("Name"), objGetObject(OR_EnoviaPDT_PartNumberEle,"","500").ContentText  
  oNamesAndValues.Add Ucase("Title"), objGetObject(OR_EnoviaPDT_HeaderTitleSp,"","500").ContentText
  oNamesAndValues.Add Ucase("Type"), PartType
  oNamesAndValues.Add Ucase("State"), objGetObject(OR_EnoviaPDT_HeaderStateBtn,"","500").ContentText 
  sOwner = String_Split(objGetObject(OR_EnoviaPDT_HeaderOwnerSp,"","500").ContentText,":", "")
  oNamesAndValues.Add Ucase("Owner"), trim(sOwner(1))
  sMod = String_Split(objGetObject(OR_EnoviaPDT_HeaderModifiedSp,"","500").ContentText,":", 2)
  oNamesAndValues.Add Ucase("Modified"), Trim(sMod(1))
  
  ' Need to rebuild the aField array because of columns Extended header and Global header. These will move to first slot in array
  ReDim Preserve aRebuild(Ubound(aFields, 1)-2, Ubound(aFields, 2)+1)
  aHeader = ""
  x=0
  For i=0 to Ubound(aFields, 1)
    If aFields(i,0) = "Global Header" Or aFields(i,0) = "Extended Header" Then
      aHeader = aFields(i,0)
    Else
      aRebuild(x,0) = aHeader
      For j=1 to Ubound(aFields, 2)+1
        aRebuild(x,j) = aFields(i,j-1)
      Next
      x = x+1
    End If
    
  Next
  
  Set dTabsData = EnoviaPDT_BuildPDFViewDataArray(dTabsData, aRebuild, oNamesAndValues, 1)
  
  Set EnoviaPDT_GetHeaderFieldAndValues = dTabsData
  
End Function

' Gets tab data from application and fields from spreadsheet
Function EnoviaPDT_GetFieldAndValues(sTabName, OR_ParentObject, dTabsData, PartType)

  Dim aColumnArray, aFields, aFieldNames()
  
  sPDTSheet = g_pdt_FileLocation&PartType
  
  ' Read all the column names from PDT part type specified spreadsheet
  aColumnArray = Array("Field","Used in All Info?","Used in Gen Doc?","Used in CM View?","Used in Supplier View?",_
                        "Orientation","Prefix","PDF Table Name","PDF Column Name")
 
  aFields = Excel_GetMultipleColumnValues(sTabName,sPDTSheet,aColumnArray, False)
  
  For i=0 to Ubound(aFields)
    ReDim Preserve aFieldNames(i)
    aFieldNames(i) = aFields(i,0)
  Next
  
  ' Different page structure for Attributes tab
  If sTabName = "Attributes" Then
    Set oNamesAndValues = EnoviaPDT_GetFieldNamesAndValues(OR_ParentObject, aFieldNames)
  Else
    Set oNamesAndValues = EnoviaPDT_GetTableFieldNamesAndValues(OR_ParentObject, aFieldNames)
  End If
  
  ' Build result array from PDT 2.0 fields and data read from application. 
  Set dTabsData = EnoviaPDT_BuildPDFViewDataArray(dTabsData, aFields, oNamesAndValues, 0)
  
  'Return dictionary
  Set EnoviaPDT_GetFieldAndValues = dTabsData
  
  EnoviaPDT_ClearVariable aColumnArray
  EnoviaPDT_ClearVariable aFields
End Function 

' Adds data from dictionary into multidimensional array. 
Function EnoviaPDT_BuildPDFViewDataArray(dResultDic, aFields, oData, nFieldNameLoc)
  
  Dim aResultArray(), sResultTabName
  
  ' Init array and add one extra column for data value
  ReDim aResultArray(Ubound(aFields, 1),UBound(aFields, 2))
  
  x=0
  For i=0 to Ubound(aFields,1)
    For j=0 to Ubound(aFields,2)
      ' Add data value
      If Ubound(aFields,2)-1 = j Then
        aResultArray(x,j) = oData(Ucase(aFields(i,nFieldNameLoc)))
      Else
        aResultArray(x,j) = aFields(i,j)
      End if
    Next
    
    ' Second Last field tells us which excel that this info belongs
    sResultTabName = aFields(i,Ubound(aFields,2)-1)
    x=x+1
    
    If i = Ubound(aFields,1) Then
      dResultDic.add sResultTabName, aResultArray
    Else
      If sResultTabName <> aFields(i+1,Ubound(aFields,2)-1) Then
        dResultDic.add sResultTabName, aResultArray
        Erase aResultArray
        ReDim aResultArray(Ubound(aFields,1)-x,UBound(aFields, 2))
        x=0
      End If
    End If
  Next
  
  
  Set EnoviaPDT_BuildPDFViewDataArray = dResultDic
End Function

' Writes PDFView excel. 
Function EnoviaPDT_WritePDFdateExcel(PartType, GcasCode, oTabData)
  On Error Resume Next
  
  Dim oExcel, oWorkSheet, aMainColumns(0,1), GcasCodeNoRev
  
  Set oExcel = CreateObject("Excel.Application")
  Set oWorkbook = oExcel.Workbooks.Add()
  Set oWorksheet = oWorkbook.Worksheets(1)
  
 
  'Main
  oWorksheet.Name = "Main"
  aHeaders = Array("Part Type\pdf views", "GCAS No")
  aMainColumns(0,0) = PartType
  GcasCodeNoRev = String_Split(GcasCode," ", "")
  aMainColumns(0,1) = GcasCodeNoRev(0)
  Call Excel_WriteWorkSheet(oWorkSheet, aHeaders, aMainColumns, False)
     
  ' Loop throuh the dictionary
  For each elem in oTabData
    Set oWorksheet = oWorkbook.Sheets.Add(, oWorkbook.Sheets(oWorkbook.Sheets.Count))
    oWorksheet.Name = elem
    If elem = "Headers" Then
        aHeaders = Array("Header Type", "Field Name",	"AllView", "GenDocView", "CMView", "SupplierView", _
        "Orientation", "Prefix", "PDF Field value", "PDF Field Name")
    Else
        aHeaders = Array("Field Name", "AllView", "GenDocView", "CMView", "SupplierView", _
        "Orientation", "Prefix", "PDF Field value","PDF Field Name")
    End If
    
    Call Excel_WriteWorkSheet(oWorkSheet, aHeaders, oTabData(elem), False)
  Next 
  
  ' PDFView wants empty tab in the End
  Set oWorksheet = oWorkbook.Sheets.Add(, oWorkbook.Sheets(oWorkbook.Sheets.Count))
  oWorksheet.Name = "End"
  
  ' generate outputfile name parttype_gcascode_input.xlsx
  sOutputFileName = g_pdf_PDFViewTemplatePath & PartType&"_"&GcasCodeNoRev(0)&"_Input.xlsx"

    ' Save as New
  oExcel.DisplayAlerts = False
  oWorkbook.SaveAs(sOutputFileName)
  
  ' Close excel and cleanup variables
  oExcel.Workbooks.Close
  oExcel.Quit
  
  If aqFileSystem.Exists(sOutputFileName) and Err.Number = 0 Then
    EnoviaPDT_WritePDFdateExcel = True
  Else
    EnoviaPDT_WritePDFdateExcel = False
  End If
End Function