'USEUNIT EnoviaPDT_CheckDefaultValues
'USEUNIT EnoviaPDT_CreateEditAttributesTables
'USEUNIT EnoviaPDT_PDTMain
'USEUNIT EnoviaPDT_PDTUtils
'USEUNIT EnoviaPDT_ValidateParts
'USEUNIT EnoviaPDT_ValidationUtils
'USEUNIT EnoviaUtils
'USEUNIT ExcelLib
'USEUNIT GlobalVars
'USEUNIT LogLib
'USEUNIT OR_Enovia
'USEUNIT StringLib
'USEUNIT WebObjectLib
'USEUNIT WindowsUtility


' Function that creates and fills part's tabs and pages
Function EnoviaPDT_CreatePartAndFillFields(PartType,PartTypeCount)
  On Error Resume Next
  
  Dim objType
  
  For i = 1 to PartTypeCount
      Log.Message("Creating part type "&PartType)
      ' Create part
      
      ' Open create product data page from + menu
      ' VI has special create window that popsup on right side 
      If PartType = "Virtual Intermediate" Then
      
        Call Enovia_OpenPlusMenu(OR_EnoviaMenu_ProductSpecificationLnk, OR_EnoviaMenu_CreateVILnk)
        
        ' Test Case 1  *************************************************
        Call EnoviaPDT_CreateVI("Create",PartType)
        
        ' Save gcas code into array
        GcasCode = EnoviaPDT_GetGcasCode()
        call EnoviaPDT_SetPartType(PartType,GcasCode)
        
        If GcasCode = "" Then
          g_isBlocked = True
        End If
        
        Call LogTestCase(PartType&" - Create", EnoviaPDT_GetTestCaseID(), EnoviaPDT_GetAlmID(1))
        
        Call EnoviaPDT_FillTabs(PartType)
      Else
        Call Enovia_OpenPlusMenu(OR_EnoviaMenu_ProductSpecificationLnk, OR_EnoviaMenu_CreateProductDataLnk)
        MaximizeByCaption("CreateProductData")
        
        ' Wait for page
        aqPerformance.Start("Open Create Product Data")
        Set objType = objGetObject(OR_EnoviaPDT_TypeCmb,g_CreatePage_URL,30000)
        If Not (objType Is Nothing) Then
          Call LogPerformance("Open Create Product Data", false, "")
        End If
        Set objType = Nothing
        
        ' Call Fill product data function
        ' Test Case 1 **************************************************
        g_pdt_CurrentCategory = "Create Product Data"
        g_pdt_CurrentTab = "Create"
        Call EnoviaPDT_CreateFillAttributesData("Create",PartType)
        
        ' Save gcas code into Array
        GcasCode = EnoviaPDT_GetGcasCode()
        call EnoviaPDT_SetPartType(PartType,GcasCode)
        
        'GcasCode not found. block rest of the test cases
        If GcasCode = "" Then
          g_isBlocked = True
        End If
        
        Call LogTestCase(PartType&" - Create", EnoviaPDT_GetTestCaseID(), EnoviaPDT_GetAlmID(1))
        
        Call EnoviaPDT_FillTabs(PartType)
      End If
    Next
    
  If Err.Number = 0 Then
    EnoviaPDT_CreatePartAndFillFields = True
  Else
    Log.Warning(Err.Description)
    EnoviaPDT_CreatePartAndFillFields = False
  End If
  
End Function

Function EnoviaPDT_FillTabs(PartType)
  On Error Resume Next
  
  ' Open create product data page from + menu
      ' VI has special create window that popsup on right side 
      If PartType = "Virtual Intermediate" Then
        
        If g_isBlocked = False Then
          ' Fill Attributes, VI doesn't have notes or tables tab
          Call EnoviaPDT_NavigateTabsAndLinks("","Attributes")
          g_pdt_CurrentTab = "Attributes"
          ' Test case 2 *************************************************
          Log.AppendFolder("Validate Default values For Attributes tab")
            call EnoviaPDT_EnableTabForValidation("Attributes")
            call EnoviaPDT_DefaultValuesValidation("Attributes", PartType)
          Log.PopLogFolder
          
          ' Fill tab
          Log.AppendFolder("Fill Attributes tab")
          Call EnoviaPDT_CreateVI("Attributes",PartType)
          Log.PopLogFolder
        End If
        
        Call LogTestCase(PartType&" - Fill part tabs", EnoviaPDT_GetTestCaseID(), EnoviaPDT_GetAlmID(2))
        
      Else     
        ' Test Case 2 *************************************************
        If g_isBlocked = False Then
          g_pdt_CurrentCategory = EnoviaPDT_GetGcasByPartType(PartType)
          
          If EnoviaPDT_NavigateTabsAndLinks("","Attributes") Then
            
            ' Need to validate default values for attributes tab before we fill it since data changes
            g_pdt_CurrentTab = "Attributes"
            Log.AppendFolder("Validate Default values For Attributes tab")
            call EnoviaPDT_EnableTabForValidation("Attributes")
            call EnoviaPDT_DefaultValuesValidation("Attributes", PartType)
            Log.PopLogFolder
        
            ' Need to reenable tab for these parts
            If PartType = "Formulation Part" OR PartType = "Formulation Process" Then
              call EnoviaPDT_EnableTabForValidation("Attributes")
            End If
            
            ' Fill Attributes
            Log.AppendFolder("Fill Attributes tab")
            Call EnoviaPDT_CreateFillAttributesData("Attributes",PartType)
            Log.PopLogFolder
          End If
          
          ' Fill Notes
          If EnoviaPDT_CheckCategoryOrTab("Notes") Then
            If EnoviaPDT_NavigateTabsAndLinks("","Notes") Then
              Log.AppendFolder("Fill Notes tab")
              g_pdt_CurrentTab = "Notes"
              call EnoviaPDT_FillNotes("Notes",PartType)
              Log.PopLogFolder
            End If
          End If
        
          ' Fill Tables
          If EnoviaPDT_CheckCategoryOrTab("Tables") Then
            If EnoviaPDT_NavigateTabsAndLinks("","Tables") Then
              Log.AppendFolder("Fill Tables tab")
              g_pdt_CurrentTab = "Tables"
              Call EnoviaPDT_CreateFillTableData("Tables",PartType)
              Log.PopLogFolder
            End If
          End If
          
          ' Fill Transport Unit for FPP
          If PartType = "Finished Product Part" Then
            If EnoviaPDT_NavigateTabsAndLinks("","Transport Unit") Then
              ' Adds already created Transport Unit
              Log.AppendFolder("Add Transport Unit for FPP")
              Call Enovia_OpenMenu(OR_EnoviaTB_ActionBtn, OR_EnoviaTB_ActionAddExistingLnk)
              
              ' see if we have already created one during the run. if not lets just use hardcoded gcas
              sTupGcas = EnoviaPDT_GetGcasByPartType("Transport Unit Part")
              If sTupGcas = "" Then
                sTupGcas = "TUP-00004872"
              End If
              
              Enovia_SearchAndSelectByName(sTupGcas)
              Log.PopLogFolder
            Else
              Log.Error("Unable to find tab: Transport Unit for FPP")
            End If
          End If
       End If
       
       Call LogTestCase(PartType&" - Fill part tabs and validate default values for Attributes tab", EnoviaPDT_GetTestCaseID(), EnoviaPDT_GetAlmID(2))

        ' Test Case 3 Validate tab data *******************************
        
        'Call LogTestCase("Validate part tabs data "&PartType, 3, "n/a")
' JR: these part will be populated in second phase. 

       ' Fill Bill Of Materials
'        If EnoviaPDT_NavigateTabsAndLinks("Bill Of Materials","EBOM") Then
'          ' Select top level part to activate actions
'          Call SetChecked(EBOM_FirstChkBox,"")
'          
'          Set objTopPart = objGetObject(OR_EnoviaTB_EditIconBtn,"","")
'          objTopPart.Click()
'          
'          ' Open action menu and click add existing
'          Call Enovia_OpenMenu(OR_EnoviaTB_Action3BarBtn, OR_EnoviaTB_Action3BarAddExistingLnk)
'          Enovia_SearchAndSelectByName(GetGcasByPartType("Customer Unit Part"))
'          ' Add other parts if needed
'          
'        End If'        
'        ' Fill Reference Documents
'        If EnoviaPDT_NavigateTabsAndLinks("Specs & Documents","Reference Documents") Then
'          ' call function to fill tab
'        End If
        
      End If
End Function

' Sub to create Virtual Intermediate part
Sub EnoviaPDT_CreateVI(sSheetName,sFileName)
  Dim sColumnName,sColumnInput,sFilePath,aFields,oInputDict,oParentobj,oLabel,i,oCell,nRowIndex,nColumnIndex,_
  nCount,oCell1,oDishCare,oDone_Obj,oDone,oPartNumber,sPartNumber,sExpected,sErrorMessage,bPassed,OEdit
  
  sColumnName = "Field"
  sColumnInput="Input"
  sErrorMessage=""
  if Ucase(sSheetName)="ATTRIBUTES" then
    EnoviaPDT_EnableTabForValidation("Attributes")
  end if
  sFilePath = g_pdt_FileLocation&sFileName
  aFields = Excel_GetColumnValues(sSheetName,sFilePath,sColumnName)
  Set oInputDict = Excel_CreateDictionaryForInput(sSheetName,sFilePath,sColumnName,sColumnInput)'Dictionary of Input and field values
  Set oParentobj = objGetObject(OR_EnoviaPDT_CreatePageTbl,"","")'Object for create and attributes page
  oParentobj.Click 200,50 
  For i = 0 to Ubound(aFields)
    Set oLabel=oParentobj.FindChild("contentText",aFields(i),10)'Find all labels in a page based on contentText
    if Ucase(sSheetName)="CREATE" then
      Set oCell=oParentobj.FindChild("objectIdentifier","IsTargetPercentAsConsumedFixed",10)'Object creation of Fix Target % As Consumed
      if aFields(i)="Fix Target % As Consumed" then
        oCell.click
      elseif aFields(i)="Limit access to named users?" then 'To enable Project Security classification we need to make Radio button Yes to true
       Set oCell=oParentobj.FindChild("value","Yes",10)
       oCell.Click
      else
        nRowIndex=(oLabel.RowIndex)+1'add +1 to rowindex of a label to get the cell related to it
        nColumnIndex=oLabel.ColumnIndex 'Column value remains same
        nCount=oParentobj.Cell(nRowIndex, nColumnIndex).ChildCount'Get child count of cell
        if nCount>0 then
          Set oCell=oParentobj.Cell(nRowIndex, nColumnIndex).Child(nCount-1)
          if (oCell.ObjectType="Table") then'if child contains table
            Set oCell1=oCell.Child((oCell.ChildCount)-1)
            Set oCell=oCell1.Child((oCell1.ChildCount)-1)
          end if
          if oCell.ObjectType="Textbox" and oInputDict.Exists(aFields(i))then ' if cell contains textbox
            oCell.setText oInputDict.item(aFields(i))
          elseif oCell.ObjectType="Textarea" and oInputDict.Exists(aFields(i))then ' if cell contains textarea
            oCell.value= oInputDict.item(aFields(i))
          end if 
           if aFields(i)="Primary Organization" or aFields(i)="Project Security Classification" then 'If it has Text node after entering data
            Set oDishCare=objGetObject(OR_EnoviaPDT_TypeAheadTextNodeEdt,"","3000")'Object create for Text node
            oDishCare.Click
           elseif aFields(i)="Security Category Classification" then'If it has Text node and done button after entering data
            Set oDishCare=objGetObject(OR_EnoviaPDT_TypeAheadTextNodeEdt,"","2500")'Object create for Text node
            Set oDone_Obj=objGetObject(OR_EnoviaPDT_TypeAheadDoneLnk,"","2500")'Object create for Done Button
            oDishCare.Click
            Call Delay(2000)
            oDone_Obj.Click
           else
            Call Delay(2000)'If it doesn't have any text node after entering data
            oCell.Click
            oCell.Keys("[Tab]")
          end if
        end if
      end if
    else
     nRowIndex=oLabel.RowIndex 'Row value remains same
     nColumnIndex=(oLabel.ColumnIndex)+1 'add +1 to Columnindex of a label to get the cell related to it
     nCount=oParentobj.Cell(nRowIndex, nColumnIndex).ChildCount
      if nCount>0 and oInputDict.Exists(aFields(i))then 'Child count of a cell should be greater than zero and the value should be exist in dictionary
        Set oCell=oParentobj.Cell(nRowIndex, nColumnIndex).Child(nCount-1)
        oCell.refresh
        if (oCell.ObjectType="Table") then 'if child contains table
          Set oCell1=oCell.Child((oCell.ChildCount)-1)
          Set oCell=oCell1.Child((oCell1.ChildCount)-1)
        end if
        if aFields(i)="Effective Date" or aFields(i)="Expiration Date"then
          oCell.value=MonthName(Month(oInputDict.item(aFields(i))),True)&" "&day(oInputDict.item(aFields(i)))&", "&year(oInputDict.item(aFields(i)))
        else
          oCell.value = oInputDict.item(aFields(i))'Enters value into a field
        end if
        oCell.Keys("[Tab]")
      end if
    end if
    if oInputDict.Exists(aFields(i))then
        sExpected="Data populated in the Field: "&aFields(i)& " Successfully! "    
        if  oCell.innerText<>" " then
            Log.Message  sExpected	
            bPassed = True
        else
            sErrorMessage="Data not populated in the Field: "&aFields(i)
            Log.Warning  sErrorMessage
            bPassed = False
        end if
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&sExpected,bPassed,sErrorMessage,"")
    end if
  NEXT
  Call Delay(500)
  Set ODone=objGetObject(OR_EnoviaPDT_DoneBtn,"","")'Object creation for Done button
  ODone.click
  if UCase(sSheetName)="CREATE" then
    Set oPartNumber = objGetObject(OR_EnoviaPDT_PartNumberEle,"","500")'Object creation for part number
    sPartNumber = oPartNumber.contentText
    sExpected = "Part Number :"&sPartNumber&" have been created successfully"   
    If (oPartNumber is Nothing) = False Then 'if object is visible on screen it will set value to sExpected
      Log.Message sExpected
      bPassed = True
    Else    'It will set error message to sErrorMessage
      bPassed = False
      sErrorMessage="Part haven't been created"
      Log.warning sErrorMessage
    End If 
    Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&sExpected,bPassed,sErrorMessage,"")
  else
    Set OEdit=objGetObject(OR_EnoviaTB_EditIconBtn,"","")'Object creation for Edit Icon
    sExpected = "Attribute page have been done successfully"   
    If (OEdit is Nothing) = False Then 'if object is visible on screen it will set value to sExpected
      bPassed = True
      Log.Message sExpected 
    Else  'It will set error message to sErrorMessage
      bPassed = False
      sErrorMessage="Attribute page haven't been done"
      Log.warning sErrorMessage
    End If 
    Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&sExpected,bPassed,sErrorMessage,"")
  end if
  g_isBlocked = False
  'Clean up the variables
  EnoviaPDT_ClearVariable sColumnName 
  EnoviaPDT_ClearVariable sFilePath
  EnoviaPDT_ClearVariable sColumnInput
  EnoviaPDT_ClearVariable sErrorMessage
  EnoviaPDT_ClearVariable bPassed
  EnoviaPDT_ClearVariable oParentobj
  EnoviaPDT_ClearVariable aFields
  EnoviaPDT_ClearVariable oInputDict
  EnoviaPDT_ClearVariable oLabel
  EnoviaPDT_ClearVariable oCell
  EnoviaPDT_ClearVariable nRowIndex 
  EnoviaPDT_ClearVariable nColumnIndex
  EnoviaPDT_ClearVariable oCell1
  EnoviaPDT_ClearVariable oDishCare
  EnoviaPDT_ClearVariable nCount
  EnoviaPDT_ClearVariable oDone_Obj
  EnoviaPDT_ClearVariable oDone
  EnoviaPDT_ClearVariable i
  EnoviaPDT_ClearVariable sExpected
  EnoviaPDT_ClearVariable oPartNumber
  EnoviaPDT_ClearVariable sPartNumber
  EnoviaPDT_ClearVariable OEdit
End Sub 

'******************************************************************************************************************************
