'USEUNIT TimeLib
'USEUNIT DatabaseModels
'USEUNIT GlobalVars
'USEUNIT DBLib

Function GetRunLogInstance
  Set GetRunLogInstance = New RunLog
End Function

Function GetRunDetailsInstance
  Set GetRunDetailsInstance = New RunDetails
End Function

' This class contains all the information for a test case
Class RunLog

  Private m_sName
  Private m_sComments
  Private m_runDate
  Private m_runDateEST
  Private m_sRegion
  Private m_sEnvironment
  Private m_bRunSuccess
  Private m_bCitrix
  Private m_sSUTMachine
  Private m_sExecutionMachine
  Private m_sExecutionUsername
  Private m_bDevelopmentFlag
  Private m_sTestType
  Private m_nAppVer
  Private m_runDetails
  Private m_runDetailsCount
  
  Public Property Let Name(value)
    m_sName = value
  End Property
  
  Public Property Get Name()
    Name = m_sName
  End Property
  
  Public Property Let DevelopmentFlag(value)
    m_bDevelopmentFlag = value
  End Property
  
  Public Property Get DevelopmentFlag()
    DevelopmentFlag = m_bDevelopmentFlag
  End Property
  
  Public Property Let TestType(value)
    m_sTestType = value
  End Property
  
  Public Property Get TestType()
    TestType = m_sTestType
  End Property
  
  Public Property Let AppVer(value)
    m_nAppVer = value
  End Property
  
  Public Property Get AppVer()
    AppVer = m_nAppVer
  End Property  
  
  Public Property Let Comments(value)
    m_sComments = value
  End Property
  
  Public Property Get Comments()
    Comments = m_sComments
  End Property
  
  Public Property Let Region(value)
    m_sRegion = value
  End Property
  
  Public Property Get Region()
    Region = m_sRegion
  End Property
  
  Public Property Let Environment(value)
    m_sEnvironment = value
  End Property
  
  Public Property Get Environment()
    Environment = m_sEnvironment
  End Property
  
  Public Property Let RunSuccess(value)
    m_bRunSuccess = value
  End Property
  
  Public Property Get RunSuccess()
    RunSuccess = m_bRunSuccess
  End Property
  
  Public Property Let Citrix(value)
    m_bCitrix = value
  End Property
  
  Public Property Get Citrix()
    Citrix = m_bCitrix
  End Property
  
  Public Property Let SUTMachine(value)
    m_sSUTMachine = value
  End Property
  
  Public Property Get SUTMachine()
    SUTMachine = m_sSUTMachine
  End Property
  
  Public Property Let ExecutionMachine(value)
    m_sExecutionMachine = value
  End Property
  
  Public Property Get ExecutionMachine()
    ExecutionMachine = m_sExecutionMachine
  End Property
  
  Public Property Let ExecutionUsername(value)
    m_sExecutionUsername = value
  End Property
  
  Public Property Get ExecutionUsername()
    ExecutionUsername = m_sExecutionUsername
  End Property
  
  Public Property Let RunDateEST(value)
    m_runDateEST = value
  End Property
  
  Public Property Get RunDateEST()
    RunDateEST = m_runDateEST
  End Property
  
  Public Property Let RunDate(value)
    m_runDate = value
  End Property
  
  Public Property Get RunDate()
    RunDate = m_runDate
  End Property
    
  Public Property Get RunDetails()
    Set RunDetails = m_runDetails
  End Property
    
  Public Property Get RunDetailsCount()
    RunDetailsCount = m_runDetailsCount
  End Property
  
  Public Function AddRunDetail(sStepName, bLoginStep, nStepDuration, sIdentifier)
    Set oRunDetail = GetRunDetailsInstance
    oRunDetail.StepName = sStepName
    oRunDetail.LoginStep = bLoginStep
    oRunDetail.StepDuration = nStepDuration
    oRunDetail.Identifier = sIdentifier
    oRunDetail.StepDate = GetCurrentTime()
    oRunDetail.StepDateEST = GetCurrentESTTime()  
    m_runDetails.Add m_runDetailsCount, oRunDetail
    m_runDetailsCount = m_runDetailsCount + 1
  End Function  
    
  Public Function CreateUpdateSQL()
    Dim sql, tempRunDate, tempRunDateEST, tempRunSuccess, tempCitrix, tempDevFlag
    
    tempRunDate = GetSqlDateTimeString(RunDate)
    tempRunDateEST = GetSqlDateTimeString(RunDateEST)
    If RunSuccess = true Then
      tempRunSuccess = "Y"
    Else
      tempRunSuccess = "N"
    End If
    
    If DevelopmentFlag = true Then
      tempDevFlag = "Y"
    Else
      tempDevFlag = "N"
    End If
    
    If Citrix = true Then
      tempCitrix = "Y"
    Else
      tempCitrix = "N"
    End If
    
    sql = "INSERT INTO `performance`.`runs` (" & _
          " `name`," & _
          " `comments`," & _
          " `runDate`," & _
          " `Region`," & _
          " `Environment`," & _
          " `RunSuccess`," & _
          " `Citrix`," & _
          " `SUT`," & _
          " `ExecutionMachine`," & _
          " `ExecutionUsername`," & _
          " `DevelopmentFlag`," & _
          " `testType`," & _
          " `appversionID`," & _
          " `DateEST` )" & _
          " VALUES (" & _
          " '"&EscapeSQL(Name)&"'," & _
          " '"&EscapeSQL(Comments)&"'," & _
          " '"&tempRunDate&"'," & _
          " '"&Region&"'," & _
          " '"&Environment&"'," & _
          " '"&tempRunSuccess&"'," & _
          " '"&tempCitrix&"'," & _
          " '"&EscapeSQL(SUTMachine)&"'," & _
          " '"&EscapeSQL(ExecutionMachine)&"'," & _
          " '"&EscapeSQL(ExecutionUsername)&"'," & _
          " '"&tempDevFlag&"'," & _
          " '"&TestType&"'," & _
          " '"&AppVer&"'," & _
          " '"&tempRunDateEST&"' );"
                    
    CreateUpdateSQL = sql          
  End Function
    
  Private Sub Class_Initialize()
    Set m_runDetails = CreateObject("Scripting.Dictionary")
    m_runDetailsCount = 1
  End Sub
  
  Private Sub Class_Terminate()
    If IsNull(m_runDetails) = false Then
      For Each item In m_runDetails.Items()
        Set item = nothing
      Next
    End If
    Set m_runDetails = nothing
  End Sub
  
End Class

Class RunDetails

  Private m_sStepName
  Private m_bLoginStep
  Private m_stepDate
  Private m_stepDateEST
  Private m_nStepDuration
  Private m_sIdentifier
  
  Public Property Let StepName(value)
    m_sStepName = value
  End Property
  
  Public Property Get StepName()
    StepName = m_sStepName
  End Property
  
  Public Property Let LoginStep(value)
    m_bLoginStep = value
  End Property
  
  Public Property Get LoginStep()
    LoginStep = m_bLoginStep
  End Property
  
  Public Property Let StepDuration(value)
    m_nStepDuration = value
  End Property
  
  Public Property Get StepDuration()
    StepDuration = m_nStepDuration
  End Property
  
  Public Property Let Identifier(value)
    m_sIdentifier = value
  End Property
  
  Public Property Get Identifier()
    Identifier = m_sIdentifier
  End Property  
    
  Public Property Let StepDateEST(value)
    m_stepDateEST = value
  End Property
  
  Public Property Get StepDateEST()
    StepDateEST = m_stepDateEST
  End Property
  
  Public Property Let StepDate(value)
    m_stepDate = value
  End Property
  
  Public Property Get StepDate()
    StepDate = m_stepDate
  End Property  
    
  Public Function CreateUpdateSQL(nRunId, nStepNumber)
    Dim sql, tempRunDate, tempRunDateEST, tempLoginStep
    
    tempStepDate = GetSqlDateTimeString(StepDate)
    tempStepDateEST = GetSqlDateTimeString(StepDateEST)
        
    If LoginStep = true Then
      tempLoginStep = "Y"
    Else
      tempLoginStep = "N"
    End If
    
    sql = "INSERT INTO `performance`.`rundetails` (" & _
          " `runID`," & _
          " `StepNumber`," & _
          " `StepName`," & _
          " `isLoginStep`," & _
          " `StepDate`," & _
          " `StepDuration`," & _
          " `identifier`," & _
          " `DateEST` )" & _
          " VALUES (" & _
          " '"&nRunId&"'," & _
          " '"&nStepNumber&"'," & _
          " '"&StepName&"'," & _
          " '"&tempLoginStep&"'," & _
          " '"&tempStepDate&"'," & _
          " '"&StepDuration&"'," & _
          " '"&Identifier&"'," & _
          " '"&tempStepDateEST&"' );"
                    
    CreateUpdateSQL = sql          
  End Function
  
End Class





