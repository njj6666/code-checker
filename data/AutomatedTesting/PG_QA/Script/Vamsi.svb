'USEUNIT DBLib
'USEUNIT EnoviaSearch_PopulateSearchModel
'USEUNIT EnoviaSearch_Scenarios
'USEUNIT EnoviaUtils
'USEUNIT GlobalVars
'USEUNIT LogLib
'USEUNIT TimeLib
'USEUNIT WindowsUtility
'USEUNIT WebObjectLib

Function Start_EnoviaSearch_Engine()
  
  On Error Resume Next
    
  Call CreateEnvironment("Enovia Search Regression", "plmdev", true, "Enovia Search Regression", false, "Regression")
  
  If Log_UpdateIsBlocked() = False Then      
    g_strBrowserType = c_IExplorer
    'Call Enovia_LaunchEnovia(g_regLog.Environment)
  End If    
    
  If Log_UpdateIsBlocked() = False Then
    'Call Enovia_Login("dsotest29")
  End If
  
  If Log_UpdateIsBlocked() = False Then
    'Call Enovia_clickOK()
  End If
  
  If Log_UpdateIsBlocked() = False Then
    Set oTestCases = EnoviaSearch_CreateDictionaryModel()
    aTCItems = oTestCases.Items
    aTCKeys = oTestCases.Keys  
  End If  
  
  If Log_UpdateIsBlocked() = False Then
    For iRow = 0 to Ubound(aTCItems) 
      If aTCItems(iRow).Common.SearchType = "Named" Then
        If Log_UpdateIsBlocked() = False Then
          Call EnoviaNamed_SearchType(aTCItems(iRow))
        End If
        If Log_UpdateIsBlocked() = False Then
          Call EnoviaName_FieldsValidation(aTCItems(iRow))
        End If
      ElseIf aTCItems(iRow).Common.SearchType = "Full Text" Then
        If Log_UpdateIsBlocked() = False Then
          Call EnoviaFullText_SearchType(aTCItems(iRow))
        End If
      ElseIf aTCItems(iRow).Common.SearchType = "Find Product Data" Then
        If Log_UpdateIsBlocked() = False Then
          Call EnoviaFindProdData_SearchType(aTCItems(iRow))
        End If
      End If
    Next
  End If
      
  Call CloseEnvironment()
  
  If Err.Number <> 0 Then
    Call MsgBox(Err.Description)
  End If
  
End Function 



Sub ex
  Msgbox aqDateTime.getMonth
End Sub 



Sub CallSearchDatePicker()
  
  Call SearchDatePicker("On","Dec 28, 2016","")
  
End Sub


 '**********************************************************************************
 ' Purpose:  Purpose is to automate the Date Picker from the Date Fields
 '           
 ' Inputs:   strDateSpecific  : A drop down value for pick up the date specification
 '           dtStartDate      : Date format in mm/dd/yyyy , for selecting the date
 '           dtEndDate        : Date format in mm/dd/yyyy , for selecting the End date 
 '                              for some pecific Conditions , which is an optional parameter
 ' Returns:  Null                 
  '**********************************************************************************


Function SearchDatePicker(strDateSpecific,dtStartDate,dtEndDate)
    
    'On Error Resume Next
    
    Dim objModifiedPane, CmdModifiedBtn 
    
    'Get the Properties of Modified Button in an array
    CmdModifiedBtn = Array("WEBOBJECT", "ObjectType~ObjectIdentifier", "Button~..._7", "")
    
    ' Get the object of Modified button into the variable
    Set objModifiedPane = WebObjectLib.ObjGetObject(CmdModifiedBtn,"","")
    
    'Highlight the object for confirmation
    Sys.HighlightObject(objModifiedPane)
     
    'Click on the Modified Button 
    Call objModifiedPane.Click
        
     
    'Wait for 5 sec of time for the data window popup
    aqUtils.Delay 5000,"Wait Till Date Calendar Window appears"
        
    Dim CmbModifiedOperation,objModifiedOperation
    
    'Get the Properties of Modified Button in an array
    CmbModifiedOperation = Array("WEBOBJECT", "ObjectType~idStr", "Select~MODIFIED_operation", "")
    
    'Get the object of the modified Operation
    Set objModifiedOperation = WebObjectLib.ObjGetObject(CmbModifiedOperation,"","")
    
    'Select the option of Modified operation as paramater 'strDateSpecific' parameter
     objModifiedOperation.ClickItem strDateSpecific
     
     Dim ImgStartDate,objStartDate
     
     'Get the Properties of start date
    ImgStartDate = Array("WEBOBJECT", "ObjectType~ObjectIdentifier", "Image~iconSmallCalendar_gif", "")
     
    'Get the object of the modified Operation
    Set objStartDate = WebObjectLib.ObjGetObject(ImgStartDate,"","")
    
    'Click on the Start Date Image
    Call objStartDate.Click
    
    aqutils.Delay 5000,"waiting for the Calendar to open"
    
    
    Dim arrTemp, strYear,strMth,strDay, strStartDateTitle, strYearNow, strMthNow
    'Split Date into an array
    arrTemp = Split(dtStartDate,",")
    strYear = Trim(arrTemp(1))
    strMth = split(arrTemp(0)," ")(0)
    strDay =  split(arrTemp(0)," ")(1)
    
    'following var is created for title of the date
    strStartDateTitle = "?"&strMth &"? ?"&strDay&"?, ?"&strYear
    
    strYearNow=cStr(aqDateTime.GetYear(now))
    strMthNow=cStr(aqDateTime.GetMonth(now))
    
    Dim CmbYear,objYear, objYearParent
    
    'Get the object of the Year
    CmbYear = Array("WEBOBJECT", "idStr~innerText", "tdYear~"&strYearNow, "")
    Sys.Refresh
    
    Set objYear = WebObjectLib.ObjGetObject(CmbYear,"","")
    
    Set objYearParent = objYear.Parent
    
    'Click on the link Year for drop down
    Call objYearParent.Click
    Call objYear.Click
    
    Dim LblSelectYear, objSelectYear
    
    'Get the object of the Select Year from the list
    LblSelectYear = Array("WEBOBJECT", "ObjectType~innerText", "Label~"&strYear, "")
    
    Set objSelectYear = WebObjectLib.ObjGetObject(LblSelectYear,"","")
    
    Call objSelectYear.Click
    
    'Following is the code to Map 3 char of Month to its full Name
    Select Case lcase(strMth)
    Case "jan" 
        strMth = "January"
    Case "feb"
        strMth = "February"
    Case "mar" 
        strMth = "March"
    Case "apr"
        strMth = "April"
    Case "may" 
        strMth = "May"
    Case "jun"
        strMth = "June"
    Case "jul" 
        strMth = "July"
    Case "aug"
        strMth = "August"
    Case "sep" 
        strMth = "September"
    Case "oct"
        strMth = "October"
    Case "nov" 
        strMth = "November"
    Case "dec"
        strMth = "December"
    End Select
    
    'Properties to identify for an object of Month in Calendar 
    BtnMonth = Array("WEBOBJECT", "idStr", "tdMonth", "")
    
    'Button to open the list of Months
    Set objMonth = WebObjectLib.ObjGetObject(BtnMonth,"","")
    
    'Months Lists Click to open
    Call objMonth.Click
    
    'Properties to identify for an object of Month in Calendar 
    LblSelectMonth = Array("WEBOBJECT","ObjectType~innerText", "Label~"&strMth, "")
    
    'Get the Object of Specific Month in a list
    Set objSelectMonth = WebObjectLib.ObjGetObject(LblSelectMonth,"","")
    
    'Click on the SpecificMonth button in the list of Months Button
    Call objSelectMonth.Click
    
    Sys.Refresh
    
'    Set objCalendarParent = objMonth.Parent.Parent.Parent
'    
'    arrProp = Array("ObjectType","title")
'    arrVal = Array("Cell",strStartDateTitle)
'    Sys.Refresh
'    aqUtils.Delay 5000
'    
'    Sys.HighlightObject(objCalendarParent)
    
    'Properties to Identify the Day in Date Grid
    BtnDateGrid = Array("WEBOBJECT","ObjectType~title", "Cell~"&strStartDateTitle, "")
    'SetobjArrBtnDateGrid = objCalendarParent.FindAll("ObjectType","Cell",5,True) 'WebObjectLib.ObjGetObject(BtnDateGrid,"","")
    
    'Get object for day in the Date Grid
    Set objBtnDateGrid = WebObjectLib.ObjGetObject(BtnDateGrid,"","") 'objCalendarParent.FindChild("ObjectType","Cell",5,True) 'WebObjectLib.ObjGetObject(BtnDateGrid,"","")
    
    
'    For i = 0 to ubound(objArrBtnDateGrid)
'      Log.Message objArrBtnDateGrid(i).title
'    Next 
    
    'Click 
    Call objBtnDateGrid.Click
    
    'Get the Properties of Modified Button in an array
    CmdModifiedBtn = Array("WEBOBJECT", "ObjectType~ObjectIdentifier", "Button~..._6", "")
    
    ' Get the object of Modified button into the variable
    Set objModifiedPane = WebObjectLib.ObjGetObject(CmdModifiedBtn,"","")
    
    'Highlight the object for confirmation
    Sys.HighlightObject(objModifiedPane)
    
    ' Get the grandparent object for the submit button as there are no unique properties of submit Button 
    Set objPanelParent = objModifiedOperation.Parent.Parent
    
    'get the properties of button
    arrProp = Array("ObjectType","Name")
    arrVal = Array("Button","Button(0)")
    
    Sys.Refresh
    aqUtils.Delay 5000,"Delay time for refresh of Objects"
    
    'Call to tick the Calender
    'BtnSubmitDateGrid = Array("WEBOBJECT","ObjectType~Name", "Button~Button(0)", "")
    
    ' Get the button object using FindChild method
    Set objSubmitBtnDateGrid = objPanelParent.FindChild(arrProp,arrVal, 4,True) 'WebObjectLib.ObjGetObject(BtnSubmitDateGrid,"","")
    'Highlight and click the button to close
    Sys.HighlightObject(objSubmitBtnDateGrid)
    Call objSubmitBtnDateGrid.Click
    
End Function


Sub abc()
    Dim arrItemsList(),iCounter 
    
    txt = Array("Formulation Part","CIC","Inner Pack")
    
    Set ob = Sys.Browser("iexplore").Page("https://plmqa.pg.com/enovia/common/emxFullSearch.jsp?field=TYPES%3Dtype_pgIPMDocument%2Ctype_Document%2Ctype_pgPLISecurityClassification%2Ctype_IPControlClass%2Ctype_pgPOADocument%2Ctype_pgFabricatedPart%2Ctype_FormulationPart%2Ctype_RawMaterialPart%2CpgMakingInstructions%2CpgProcessStandard%2Ctype_pgAncillaryRawMaterialPart%2Ctype_pgDeviceProductPart%2Ctype_pgAssembledProductPart%2Ctype_pgPLIProcessingInstruction%2Ctype_pgAuthorizedConfigurationStandard%2Ctype_FormulaTechnicalSpecification%2Ctype_pgMasterProductPart%2Ctype_pgMasterRawMaterialPart%2Ctype_VirtualIntermediate&default=CPN_STATE%3DRelease&showInitialResults=false&table=pgIPMCPNProductDataRefDocSearchList&freezePane=Name&hideHeader=true&HelpMarker=emxhelpfullsearch&queryType=Indexed&formInclusionList=CPN_TYPE%2CCPN_STATE%2CCPN_CATEGORY%2CCPN_CSS_BUSINESS_CATEGORY%2CCPN_PLANT%2CCPN_OWNING_STANDARDS_OFFICE%2CCPN_REVISION&fieldLabels=CPN_TYPE%3AType%2CCPN_STATE%3AState%2CCPN_CATEGORY%3ASecurity+Category+Classification%2CCPN_CSS_BUSINESS_CATEGORY%3ACSS+Business+Category+%28Legacy%29%2CCPN_PLANT%3APlant&removeFieldName=TYPE%2CNAME%2CDESCRIPTION%2COWNER_FULLNAME%2CPOLICY%2CVAULT%2CREVISION%2CCURRENT%2CORIGINATED%2CMODIFIED%2CORIGINATOR_FULLNAME%2CCOMMENT%2CTITLE&viewFormBased=true&showTypeField=false&switchedNavMode=false&parameter=FullTextSearch&suiteKey=CPN&StringResourceFileId=emxCPNStringResource&SuiteDirectory=cpn&widgetId=null&targetLocation=popup").Form("full_search").Panel(0).Panel(0).Panel(1).Select("select_CPN_TYPE")
    
    iCount = ob.wItemCount
    'Msgbox iCount
    iCounter = 0
    For j= 0 to ubound(txt)
        For i= 0 to iCount-1
         If instr(ob.wItem(i),txt(j))=1  then
           'ob.Multiselect(ob.wItem(i))
           Redim preserve arrItemsList(iCounter)
           arrItemsList(iCounter) = ob.wItem(i)
           iCounter = iCounter+1
         End If
        Next    
    next
End Sub 



'*********************************************************************************************
'            Start of Product Data Search Field Validation
'*********************************************************************************************
                                                                   
                                                                                          
'**********************************************************************************
' Purpose:  To call Enovia Product Data Search related fields validation Functions  
'**********************************************************************************
    g_EnoviaHomePage_URL = "https://plmtraining.pg.com/enovia/common/emxNavigator.jsp" 
    g_SearchPageURL = "https://*.pg.com/enovia/common/emxFullSearch.jsp"
                                           
    OR_EnoviaSearch_SearchDrp = Array("EVALUATEXPATH",".//*[@id='AEFGlobalFullTextSearch']/a/label","","")
    OR_EnoviaSearchProductSpec_SearchDrp = Array("EVALUATEXPATH",".//*[@id='CPNSearch']/label","","") 
    OR_EnoviaSearchFindProdData_SearchDrp = Array("EVALUATEXPATH",".//*[@id='AEFGlobalSearchHolder']/div[2]/div/div[2]/ul/li[5]/ul/li[1]/a/label","","")
    OR_EnoviaSearchFindProdData_SearchEdt = Array("NATIVEWEBOBJECT", "idStr", "txtTextSearch","INPUT")
    OR_EnoviaSearchProdData_SearchLinkLnk = Array("WEBOBJECT","ObjectIdentifier~ObjectType~className~tagName~VisibleOnScreen","mx_btn_search~Link~btn-search~A~True","")
    OR_EnoviaProductDataSearch_Fields = Array("WEBOBJECT", "idStr~ObjectIdentifier~VisibleOnScreen", "bodyTable~bodyTable~true", "") 
                                                                                                                                        
Sub EnoviaProductDataSearch_FieldsValidation_Main()  
                                                                   
'need to change                                                                                      
  sPath_ProductDataSearch = aqFileSystem.GetFolderInfo(aqFileSystem.GetCurrentFolder).ParentFolder.ParentFolder.Path&"Files\Search\"&"SearchSpecification_FullText"&".xlsx"
  Set g_oModel_ProductDataSearch = EnoviaSearch_ReadExcel_Name(sPath_FullTextSearch,"Full Text ") 
    
    Set temp = EnoviaSearch_CreateDictionaryModel
    Set oModel = temp(3)
    
    Browsers.Item(btIExplorer).Run g_EnoviaHomePage_URL
    
    Delay 40000
    
    Set objsearchType=objGetObject(OR_EnoviaSearch_SearchDrp, "", "")
    objsearchType.Click()
    Set objsearchType = Nothing
                 
    Set objsearchFindProdDataSpec=objGetObject(OR_EnoviaSearchProductSpec_SearchDrp, "", "")
    objsearchFindProdDataSpec.Click()
    Set objsearchFindProdDataSpec = Nothing
      
    Set objsearchFindProdData=objGetObject(OR_EnoviaSearchFindProdData_SearchDrp, "", "")
    objsearchFindProdData.Click()
    Set objsearchFindProdData = Nothing
    
    Set objSearchVal = objGetObject(OR_EnoviaSearchFindProdData_SearchEdt,g_SearchPageURL,"")
    objSearchVal.SetText(oModel.Common.SearchValue)
    Sys.HighlightObject(objSearchVal)
    objSearchVal.SetText("CUP+")
    Set objSearchVal = Nothing    
        
   'Get the Search Name value from Data Model Excel and assigning to the related Text Box   
    Set objsearchProductDataLink = objGetObject(OR_EnoviaSearchProdData_SearchLinkLnk,g_SearchPageURL,"")
    Sys.HighlightObject(objsearchProductDataLink)
    objsearchProductDataLink.Click()
    Set objsearchProductDataLink = Nothing  
       
    Delay 20000                                      
                                                                      
    Call EnoviaProductDataSearch_Validate_Revision 
    Call EnoviaProductDataSearch_Validate_Type
    Call EnoviaProductDataSearch_Validate_Specification_Sub_Type
    Call EnoviaProductDataSearch_Validate_Title_SAP_Description
    Call EnoviaProductDataSearch_Validate_State
    Call EnoviaProductDataSearch_Validate_Originator
    Call EnoviaProductDataSearch_Validate_Policy
    Call EnoviaProductDataSearch_Validate_Other_Names
    Call EnoviaProductData_Validate_PDFString
    
End Sub
                                                                                  
                                                                             
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Revision column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Revision
    On Error Resume Next
                             
    DIM sSearchProductDataRevision, nRowCountProductDataRevision
                                                                
    'sSearchProductDataRevision = "001"
    
   'Get the Revision value from Data Model Excel   
   sSearchProductDataRevision  = oModel.Revision.Revision 
                                                                                        
    Set objEnoviaProductDataSearchRevision = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
                                                     
   'Highlight the object for confirmation
    Sys.HighlightObject(objEnoviaProductDataSearchRevision.Cell(1,0))
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountProductDataRevision = objEnoviaProductDataSearchRevision.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Revision RowCount = " &nRowCountProductDataRevision-1)
                                      
    IF nRowCountProductDataRevision > 1 then        
       For i= 1 to nRowCountProductDataRevision-1
           if instr(Trim(objEnoviaProductDataSearchRevision.Cell(i,0).innerText),Trim(sSearchProductDataRevision)) > 0 then
              Log.Message(objEnoviaProductDataSearchRevision.Cell(i,0).innerText)          
           else
                 Log.Message("Product Data Search Revision is not available " + objEnoviaProductDataSearchRevision.Cell(i,0).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Revision = True
    Else
       EnoviaProductDataSearch_Validate_Revision  = False
    End If        
                                     
End Function
                                                                                   
                                                                         
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Type
    On Error Resume Next
        
    DIM sSearchProductDataType, nRowCountProductDataType
                                                               
    'sSearchProductDataType = "FP"                                                                   
      
   'Get the Revision value from Data Model Excel   
   sSearchProductDataType  = oModel.Common.sType
                                                            
    Set objEnoviaProductDataSearchType = objGetObject(OR_EnoviaProductDataSearch_Fields, g_SearchPageURL,"")
                                                  
   'Highlight the object for confirmation 
    Sys.HighlightObject(objEnoviaProductDataSearchType.Cell(1,2))
                                           
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataType = objEnoviaProductDataSearchType.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Type RowCount = " &nRowCountProductDataType-1)
                                      
    IF nRowCountProductDataType > 1 then        
       For i= 1 to nRowCountProductDataType-1
           if instr(Trim(objEnoviaProductDataSearchType.Cell(i,2).innerText),Trim(sSearchProductDataType)) > 0 then
              Log.Message(objEnoviaProductDataSearchType.Cell(i,2).innerText)          
           else
              Log.Message("Product Data Search Type is not available " + objEnoviaProductDataSearchType.Cell(i,2).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Type = True
    Else
       EnoviaProductDataSearch_Validate_Type  = False
    End If      
                                        
End Function 


'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Specification_Sub_Type column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Specification_Sub_Type
    On Error Resume Next
        
    DIM sSearchProductDataSpecification_Sub_Type, nRowCountProductDataSpecification_Sub_Type
                                                               
    'sSearchProductDataSpecification_Sub_Type = "No Access"                                                                   
      
   'Get the Revision value from Data Model Excel   
    sSearchProductDataSpecification_Sub_Type  = oModel.SpecSubType
                                                            
    Set objEnoviaProductDataSearchSpecification_Sub_Type = objGetObject(OR_EnoviaProductDataSearch_Fields, g_SearchPageURL,"")
                                                  
   'Highlight the object for confirmation 
    Sys.HighlightObject(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(1,3))
                                           
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataSpecification_Sub_Type = objEnoviaProductDataSearchSpecification_Sub_Type.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Specification_Sub_Type RowCount = " &nRowCountProductDataSpecification_Sub_Type-1)
                                      
    IF nRowCountProductDataSpecification_Sub_Type > 1 then        
       For i= 1 to nRowCountProductDataSpecification_Sub_Type-1
           if instr(Trim(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,3).innerText),Trim(sSearchProductDataSpecification_Sub_Type)) > 0 then
              Log.Message(objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,3).innerText)          
           else
              Log.Message("Product Data Search Specification_Sub_Type is not available " + objEnoviaProductDataSearchSpecification_Sub_Type.Cell(i,3).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Specification_Sub_Type = True
    Else
       EnoviaProductDataSearch_Validate_Specification_Sub_Type  = False
    End If      
                                        
End Function 
                                                                                    
                                                                        
'*********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Title_SAP_Description column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'********************************************************************************************  
                                                      
Function EnoviaProductDataSearch_Validate_Title_SAP_Description
    On Error Resume Next
        
    DIM sSearchProductDataTitle_SAP_Description, nRowCountProductDataTitle_SAP_Description
                                                               
    'sSearchProductDataTitle_SAP_Description = "No Access"                                                                   
      
   'Get the Revision value from Data Model Excel   
   sSearchProductDataTitle_SAP_Description  = oModel.Common.Title
                                                            
    Set objEnoviaProductDataSearchTitle_SAP_Description = objGetObject(OR_EnoviaProductDataSearch_Fields, g_SearchPageURL,"")
                                                  
   'Highlight the object for confirmation 
    Sys.HighlightObject(objEnoviaProductDataSearchTitle_SAP_Description.Cell(1,5))
                                           
   'Getting the Row Count and storing in a variable                            
    nRowCountProductDataTitle_SAP_Description = objEnoviaProductDataSearchTitle_SAP_Description.rowCount
                                  
   'Wrting the Row Count in the Log     
    Log.Message("Product Data Search Title_SAP_Description RowCount = " &nRowCountProductDataTitle_SAP_Description-1)
                                      
    IF nRowCountProductDataTitle_SAP_Description > 1 then        
       For i= 1 to nRowCountProductDataTitle_SAP_Description-1
           if instr(Trim(objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText),Trim(sSearchFullTextType)) > 0 then
              Log.Message(objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText)          
           else
              Log.Message("Product Data Search Title_SAP_Description is not available " + objEnoviaProductDataSearchTitle_SAP_Description.Cell(i,5).innerText)
           End if
       Next        
    End if   
               
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Title_SAP_Description = True
    Else
       EnoviaProductDataSearch_Validate_Title_SAP_Description  = False
    End If      
                                        
End Function 


'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the State column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_State
    On Error Resume Next
                             
    DIM sSearchProductDataState, nRowCountProductDataState
    
    'sSearchProductDataState = "No Access"
                                               
   'Get the Revision value from Data Model Excel   
   sSearchProductDataState  = oModel.Common.State 
                                                                                        
    Set objEnoviaProductDataSearchState = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
                                                     
   'Highlight the object for confirmation
    Sys.HighlightObject(objEnoviaProductDataSearchState.Cell(1,6))
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountProductDataState = objEnoviaProductDataSearchState.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search State RowCount = " &nRowCountProductDataState-1)
                                      
    IF nRowCountProductDataState > 1 then        
       For i= 1 to nRowCountProductDataState-1
           if instr(Trim(objEnoviaProductDataSearchState.Cell(i,6).innerText),Trim(sSearchProductDataState)) > 0 then
              Log.Message(objEnoviaProductDataSearchState.Cell(i,6).innerText)          
           else
                 Log.Message("Product Data Search State is not available " + objEnoviaProductDataSearchState.Cell(i,6).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_State = True
    Else
       EnoviaProductDataSearch_Validate_State  = False
    End If        
                                     
End Function
                                                                            
                                                     
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Originator column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Originator
    On Error Resume Next
                             
    DIM sSearchProductDataOriginator, nRowCountProductDataOriginator
              
    'sSearchProductDataOriginator = "colmenares.b"
                                                      
   'Get the Revision value from Data Model Excel   
   sSearchProductDataOriginator  = oModel.Originator 
                                                                                        
    Set objEnoviaProductDataSearchOriginator = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
                                                     
   'Highlight the object for confirmation
    Sys.HighlightObject(objEnoviaProductDataSearchOriginator.Cell(1,8))
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountProductDataOriginator = objEnoviaProductDataSearchOriginator.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Originator RowCount = " &nRowCountProductDataOriginator-1)
                                      
    IF nRowCountProductDataOriginator > 1 then        
       For i= 1 to nRowCountProductDataOriginator-1
           if instr(Trim(objEnoviaProductDataSearchOriginator.Cell(i,8).innerText),Trim(sSearchProductDataOriginator)) > 0 then
              Log.Message(objEnoviaProductDataSearchOriginator.Cell(i,8).innerText)          
           else
              Log.Message("Product Data Search Originator is not available " + objEnoviaProductDataSearchOriginator.Cell(i,8).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Originator = True
    Else
       EnoviaProductDataSearch_Validate_Originator  = False
    End If        
                                     
End Function
                                                                           
                                                           
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Policy column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
                              
Function EnoviaProductDataSearch_Validate_Policy
    On Error Resume Next
                             
    DIM sSearchProductDataPolicy, nRowCountProductDataPolicy
           
    'sSearchProductDataPolicy = "No Access"
                                                         
   'Get the Revision value from Data Model Excel   
   sSearchProductDataPolicy  = oModel.Common.Policy 
                                                                                        
    Set objEnoviaProductDataSearchPolicy = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
                                                     
   'Highlight the object for confirmation
    Sys.HighlightObject(objEnoviaProductDataSearchPolicy.Cell(1,10))
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountProductDataPolicy = objEnoviaProductDataSearchPolicy.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Policy RowCount = " &nRowCountProductDataPolicy-1)
                                      
    IF nRowCountProductDataPolicy > 1 then        
       For i= 1 to nRowCountProductDataPolicy-1
           if instr(Trim(objEnoviaProductDataSearchPolicy.Cell(i,10).innerText),Trim(sSearchProductDataPolicy)) > 0 then
              Log.Message(objEnoviaProductDataSearchPolicy.Cell(i,10).innerText)          
           else
                 Log.Message("Product Data Search Policy is not available " + objEnoviaProductDataSearchPolicy.Cell(i,10).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Policy = True
    Else
       EnoviaProductDataSearch_Validate_Policy  = False
    End If        
                                     
End Function
                                                                     
                                                                       
'********************************************************************************************
' Purpose:  Locates the first occurrence of a specified search String  
'           in the Other_Names column of the page and 
'           validates all the rows having the specified search string
' Returns:  If the string is found, then the data will be written into the log  
'           with proper values and If the String is not found, then the Proper error message 
'           will be written into Log with values        
'*******************************************************************************************  
' Other Names Time being is not coded, this field is not available in PLMTraining,
' But i need to confirm in PLMTest Environment
                              
Function EnoviaProductDataSearch_Validate_Other_Names
    On Error Resume Next
                             
    DIM sSearchProductDataOther_Names, nRowCountProductDataOther_Names
                                          
    'sSearchProductDataOther_Names = "No Access"   
                                                                                    
   'Get the Revision value from Data Model Excel   
   sSearchProductDataOther_Names  = oModel.OtherNames 
                                                                                        
    Set objEnoviaProductDataSearchOther_Names = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
                                                     
   'Highlight the object for confirmation
    Sys.HighlightObject(objEnoviaProductDataSearchOther_Names.Cell(1,6))
                                                                
   'Getting the Row Count and storing in a variable
    nRowCountProductDataOther_Names = objEnoviaProductDataSearchOther_Names.rowCount
                                           
   'Wrting the Row Count in the Log
    Log.Message("Product Data Search Other_Names RowCount = " &nRowCountProductDataOther_Names-1)
                                      
    IF nRowCountProductDataOther_Names > 1 then        
       For i= 1 to nRowCountProductDataOther_Names-1
           if instr(Trim(objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText),Trim(sSearchProductDataOther_Names)) > 0 then
              Log.Message(objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText)          
           else
                 Log.Message("Product Data Search Other_Names is not available " + objEnoviaProductDataSearchOther_Names.Cell(i,6).innerText)        
           End if
       Next
    End If  
                
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_Other_Names = True
    Else
       EnoviaProductDataSearch_Validate_Other_Names  = False
    End If        
                                     
End Function
                                                                         
                                                                
'********************************************************************************************
' Purpose:  After Clicking the PDF file available in the Browser, Dowloads or Stores the File
'           in the local Folder, Stores the file content to a variable and find the String
'           availability in the File  
' Returns:  If the string is available in the PDF file, then it logs the message
'           as "The document contains the string " with String value 
'           If String is not available in the PDF File, then it logs the message 
'           as " The document does not contain the specified string "
'********************************************************************************************
                                                                                                                        
Function EnoviaProductData_Validate_PDFString
    On Error Resume Next                             
     
    DIM sSearchProductDataPDFString, nRowCountProductDataTSPDF
                                                            
    Set objEnoviaProductDataSearchTSPDF = objGetObject(OR_EnoviaProductDataSearch_Fields,g_SearchPageURL,"")
    
   'Sys.HighlightObject(objEnoviaProductDataSearchTSPDF.Cell(1,1))
                                                     
   'Getting the Row Count and storing in a variable                                                                                 
    nRowCountProductDataTSPDF = objEnoviaProductDataSearchTSPDF.rowCount
                                                                                     
   'Wrting the Row Count in the Log                                                              
    Log.Message("Product Data Search TSPDF RowCount = " &nRowCountProductDataTSPDF-1)
                 
    nRowCountProductDataTSPDF = 3
                                        
    IF nRowCountProductDataTSPDF > 1 then      
       For i= 1 to nRowCountProductDataTSPDF-1  
           Sys.HighlightObject(objEnoviaProductDataSearchTSPDF.Cell(i,1)).Link(0).Image("iconActionPDF_gif")
           IF objEnoviaProductDataSearchTSPDF.Cell(i,1).ChildCount >= 1 then
              objEnoviaProductDataSearchTSPDF.Cell(i,1).Link(0).Image("iconActionPDF_gif").click  
              Delay 2000      
              g_sProductDataPDFFilename = EnoviaProductDataSearch_DowloadPDF                                               
              Delay 2000
              Call EnoviaProductDataSearch_SearchStringinPDF_Deletefile(g_sProductDataPDFFilename)
              Delay 2000
           End if           
       Next
    End if  
                          
    If Err.Number = 0 Then
       EnoviaProductDataSearch_Validate_PDFString = True
    Else
       EnoviaProductDataSearch_Validate_PDFString = False
    End If                                                                                               
                                                                                           
End Function
                                                                                     
                                                                              
Function EnoviaProductDataSearch_DowloadPDF                                         
                                                                                 
    Set s1=Sys.Browser("iexplore").Browserwindow(0)                               
                                                                               
    Set frame=s1.findChild("WndClass","Frame Notification Bar",5)                              
        
    Set Namevalue = frame.FindChild("ObjectIdentifier","Notification_bar_Text",2)               
    Sys.HighlightObject(Namevalue)  
    
    Delay 1000                                     
    z= Namevalue.value                                         
                                         
    Obj1=split(z,".")                                      
    b=Obj1(0)                                             
    sProductDataPDFFilename=Trim(Mid(b,20)&".pdf")                             
                                                                                              
    Set objdownbtn=frame.findChild("Name","UIAObject(1)",5)                           
    objdownbtn.Click                                                            
                                                                                
    Delay(3000)                                                              
                                                                                
    Sys.Keys "[Down][Enter]"                                                                         
    Delay 2000                                                                    
                                                                              
    Set objwnd = Sys.Process(g_strBrowserType).window("*","Save As")                          
                                                                         
    Set objEdit = objwnd.FindChild("WndClass","Edit",5)                          
                                                                  
 '  objEdit.Keys foldinfo&filename                                        
                                                                      
    Set objsavebtn = objwnd.FindChild("WndCaption","&Save")                         
    objsavebtn.Click                                                         
                                                                             
    Delay 2000                   
                                                     
    Set objClosebtn = frame.FindChild("ObjectIdentifier","Close",2)                        
    'Sys.HighlightObject(objClosebtn)                                                     
    objClosebtn.click     
      
    EnoviaProductDataSearch_DowloadPDF=sProductDataPDFFilename
                                                                                                
End Function 
                                                                        
                                                                                      
Function  EnoviaProductDataSearch_SearchStringinPDF_Deletefile (Var1)
                                                                                                              
    Set objPDF = Javaclasses.org_apache_pdfbox_pdmodel.PDDocument.load_3("D:\Users\vachanda\Downloads\"&Var1)
                                                                                         
    Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
    text = textStripperObj.getText_2(objPDF)
                                                                           
    Stringtofind = "CUP"                                      
                                                                                             
    If (aqString.Find(text, Stringtofind)> -1) Then                                 
        Log.Message "The document contains the string: " &Stringtofind                      
    Else                                                                         
        Log.Warning("The document does not contain the specified string ")              
    End If
      
    sProductDataDeleteStatus = aqFileSystem.DeleteFile("D:\Users\vachanda\Downloads\"&Var1)
      
    IF sProductDataDeleteStatus = True then
      Log.Warning "The Product Data Search PDF file  " + Var1 + "  has been deleted Successfully from the Folder " 
    else
     Log.Warning "The Product Data Search PDF file has not been deleted from the Folder " 
    end if
              
    If Err.Number = 0 Then
       EnoviaProductDataSearch_SearchStringinPDF_Deletefile = True
    Else
       EnoviaProductDataSearch_SearchStringinPDF_Deletefile  = False
    End If
                         
End Function
                                                                 
                                                                              
'*********************************************************************************************
'            End of Product Data Search Field Validation
'*********************************************************************************************


Sub sortColumnCheck()
    Set oExcel = createobject("excel.application")
        
    'Open  a workbook "Siree1"
    Set oWorkbook1= oExcel.Workbooks.Open("D:\Users\vachanda\Documents\My Received Files\Siree1.csv")

    Set  omysheet1=oWorkbook1.Worksheets(1)
    
    iRowCnt = omysheet1.UsedRange.Rows.Count
           
    iColNo_Name = fnGetColumnNumber(omysheet1,"Name")
    iColNo_State = fnGetColumnNumber(omysheet1,"State")
    iColNo_Type = fnGetColumnNumber(omysheet1,"Type")
    
    blnSort = True
    For i = 4 to iRowCnt-1
        For j = i+1 to iRowCnt
          If strComp(cStr(omysheet1.Cells(i,iColNo_Name).Value),cStr(omysheet1.Cells(j,iColNo_Name).Value)) = -1 Then
          
          ElseIf strComp(cStr(omysheet1.Cells(i,iColNo_Name).Value),cStr(omysheet1.Cells(j,iColNo_Name).Value)) = 0 Then
          
                If strComp(cStr(omysheet1.Cells(i,iColNo_Type).Value),cStr(omysheet1.Cells(j,iColNo_Type).Value)) = -1 Then
          
                ElseIf strComp(cStr(omysheet1.Cells(i,iColNo_Type).Value),cStr(omysheet1.Cells(j,iColNo_Type).Value)) = 0 Then
                    If strComp(cStr(omysheet1.Cells(i,iColNo_State).Value),cStr(omysheet1.Cells(j,iColNo_State).Value)) = -1 Then
          
                    ElseIf strComp(cStr(omysheet1.Cells(i,iColNo_State).Value),cStr(omysheet1.Cells(j,iColNo_State).Value)) = 0 Then
                    
                    Else
                        blnSort = False   
                    End If
                Else
                    blnSort = False
                End If  
          Else
             blnSort = False   
          End If
        Next
    Next
    
    oWorkbook1.Close
    Set oExcel = Nothing
   
End Sub 

Function fnGetColumnNumber(ws,sCol)
     iColCnt = ws.UsedRange.Columns.Count
     For i = 1 to iColCnt
        If Ucase(ws.Cells(3,i)) =Ucase(sCol) Then
          fnGetColumnNumber = i
          Exit For
        End If
     Next
     
End Function 