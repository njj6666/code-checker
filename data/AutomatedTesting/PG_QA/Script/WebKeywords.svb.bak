'USEUNIT WebObjectLib
'USEUNIT GlobalVars

' Function that waits page body to be loaded. Searches from frame which makes search faster and we are able to capture
' more reliable performance times. 
' Inputs: PageFrame which is higher level object. Search props and values which defines the object that we will wait to become visible
' Returns true or false based on if body table is visible in 30 seconds after frame has been found
Function WaitForBody(oPageFrame, SearchProps, SearchValues, sURL, nWaitTime)
  On Error Resume Next
  
  Dim oParent, oBody, nCounter

  ' Wait time set in function call. 
  If nWaitTime = "" Then
    ' Not set, use default
    ldblWaitTime = 10000
  Else
    ldblWaitTime = nWaitTime
  End If
    
  'Set oParent = objGetObject(oPageFrame, sURL, nWaitTime)
  Set oPage = objGetPage(sURL)
  
  m_strPropertyName   = oPageFrame(1)  
  m_strPropertyValue  = oPageFrame(2)
      
  ' Create arrays of property names and values
  arrProps = Split(m_strPropertyName, "~")
  arrVals = Split(m_strPropertyValue, "~")

  Redim arrstrPropertyNames(UBound(arrProps))
  Redim arrstrPropertyValues(UBound(arrProps))
            
  'Build the array of property names and values
  For i = 0 to UBound(arrProps)
    arrstrPropertyNames(i) = arrProps(i)
    arrstrPropertyValues(i) = arrVals(i)
  Next
  
  Set oParent = oPage.FindChild(arrstrPropertyNames, arrstrPropertyValues, 20)
  
  bExitFlag = True
  If oParent.Exists = False Then
    bExitFlag = False
  End If
  
  dblDelayLoop = 0
  
  Do While bExitFlag = False And (cdbl(dblDelayLoop) < Cdbl(ldblWaitTime))
    Delay(300)
    dblDelayLoop = cdbl(dblDelayLoop) + 300
    Set oParent = oPage.FindChild(arrstrPropertyNames, arrstrPropertyValues, 20)
                  
    If oParent.Exists = True Then
      bExitFlag = True
    End If
  Loop 
            
  If oParent.Exists = True Then
    bFlag = False
    nCounter = 0
    While bFlag = False

      Set oBody = oParent.FindChild(SearchProps, SearchValues, 20) 
    
      If oBody.Exists = True Then
        If oBody.WaitProperty("VisibleOnScreen", True, 30000) Then
          
          If aqObject.IsSupported(oBody, "ReadyState") = True Then
            If oBody.WaitProperty("ReadyState", "Complete", 30000) Then
              WaitForBody = True
            Else
              WaitForBody = False
            End If
          Else
            WaitForBody = True
          End If
        Else
          WaitForBody = False
          Log.Warning("Body not loaded in 30 seconds "&Err.Description)
        End If
        bFlag = True
      Else
        Delay 200
        nCounter = nCounter+1
      
        ' fail safe if body doesn't exists. exit loop and return false
        If nCounter = 50 Then
          bFlag = True
          WaitForBody = False
        End If
      End If
    wEnd
  Else
    WaitForBody = False
    Log.Warning("WaitForBody: Unable to find parent "&Err.Description)
  End If
  
  Set oParent = Nothing
  Set oBody = Nothing
  
End Function

' Function to set text into different web objects. 
Function SetTextByProps(arrObjProps, strInputTxt, strUrl)
  
  Set setTextToObject = objGetObject(arrObjProps, strUrl, "")  
  
  SetTextByObj(setTextToObject)

End Function 

Function SetTextByObj(objWebobject)
  
  If objWebobject.ObjectType = "Textarea" Then
    objWebobject.TextContent = strInputTxt
  ElseIf objWebobject.ObjectType = "Textbox" Then
    'We could force text into readonly fields by setting this property
    'setTextToObject.ReadOnly = False
    objWebobject.SetText(strInputTxt)
  End If
End Function

' Function to check checkbox, does not check it if already checked
Function SetChecked(arrObjProps, strUrl)
  
  Set objCheckBox = objGetObject(arrObjProps, strUrl, "")  
  
  If objCheckBox.Status = False And objCheckBox.ObjectType = "Checkbox" Then
    objCheckBox.Click
  End If
End Function 


'##################################################################################################################
'Function Name                : EnterText
'Description                  : Enter the text into the object
'Arguments                    : m_strLogicalName: Logical Name of the Test Object 
'                             : mstrTextToEnter(E): Text to Enter
'Return Value                 : If Entered - True Else False - boolean Value(True/False)
'Author                       : Pramod Rao
'Creation Date                : 19 -March- 2014
'Special Conditions           : Test Object should Exists                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function EnterText(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strTextToEnter)

    On Error Resume Next 
    
    Dim bFlag
        
    If m_strTextToEnter <> "" Then    
      
      'Set Flag to False initially
      EnterText = False
      
      If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function                                           
    
      'Enter text
      'Select any text previously present 
      'g_objTestObject.Keys "^a"
      'g_objTestObject.SetText("")
    
      'Enter the text
      g_objTestObject.SetText(m_strTextToEnter)
      
      'If the Object type is not password, then check if the text is entered, else if the object type is text area then 
      If UCase(g_objTestObject.ObjectType) <> "PASSWORDBOX" And UCASE(g_objTestObject.ObjectType) <> "TEXTAREA" Then 
        EnterText = (g_objTestObject.Text = m_strTextToEnter)
      ElseIf UCase(g_objTestObject.ObjectType) = "TEXTAREA" Then
        EnterText = (g_objTestObject.value = m_strTextToEnter)
      ElseIf UCase(g_objTestObject.ObjectType) = "PASSWORDBOX" Then
        EnterText = True
      End if
        
      'If Error Number is not 0 then Log Error and return false, else return true
      If Err.Number <> 0 Or Not(EnterText) Then
        Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
      Else
        EnterText = True
      End If
    Else
      EnterText = True
    End If  
End Function

'##################################################################################################################
'Function Name                : EnterTextAndTab
'Description                  : Enter the text into the object and tab out
'Arguments                    : m_strLogicalName: Logical Name of the Test Object 
'                             : mstrTextToEnter(E): Text to Enter
'Return Value                 : If Entered - True Else False - boolean Value(True/False)
'Author                       : Pramod Rao
'Creation Date                : 19 -March- 2014
'Special Conditions           : Test Object should Exists                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function EnterTextAndTab(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strTextToEnter)

    On Error Resume Next 
    
      'Set the Flag to False intially
      EnterTextAndTab= False

      If m_strTextToEnter <> "" Then
             
        If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function 
      
        'enter text
        g_objTestObject.Keys "^a[Del]"
        g_objTestObject.Keys m_strTextToEnter & "[Tab]"
        
        If UCase(g_objTestObject.ObjectType) <> "TEXTAREA" Then 
          EnterTextAndTab = (Replace(g_objTestObject.Text,"/","") = m_strTextToEnter)
        ElseIf UCase(g_objTestObject.ObjectType) = "TEXTAREA" Then
          EnterTextAndTab = (Replace(g_objTestObject.Value,"/","") = m_strTextToEnter)
        End if
          
        'EnterTextAndTab = (g_objTestObject.Value = m_strTextToEnter)
    
        'If Error Number is not 0 then Log Error and return false, else return true
        If Err.Number <> 0 Or Not(EnterTextAndTab) Then
          Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
        Else
          EnterTextAndTab = True
        End If 
      Else
        EnterTextAndTab = True
      End If

End Function

'##################################################################################################################
'Function Name                :Click
'Description                  :Click on the object
'Arguments                    :m_strLogicalName :Logical name of the test object
'Return Value                 :boolean Value(True/False)
'Author                       :Pramod Rao
'Creation Date                :19 -March- 2014
'Special Conditions           :Test Object should Exists                                       
'Revision History             :Removed unneccasary code
'Revision Date                :2-April-2014
'##################################################################################################################
Function Click(m_strLogicalName, m_strUrlm, m_intWaitTime)

    On Error Resume Next                                                              
    
    'Set the Flag to False intially
    Click = False
    
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
      
    'click on the object
    g_objTestObject.Click
    
    'If Error Number is not 0 then Log Error and return false, else return true
    If Err.Number <> 0 Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
      Click = True
    End If    
End Function

'##################################################################################################################
'Function Name                :EnabledAndClick
'Description                  :Click on the object once it is enabled
'Arguments                    :m_strLogicalName :Logical name of the test object
'Return Value                 :boolean Value(True/False)
'Author                       :Pramod Rao
'Creation Date                :19 -March- 2014
'Special Conditions           :Test Object should Exists                                       
'Revision History             :Removed unneccasary code
'Revision Date                :2-April-2014
'##################################################################################################################
Function EnabledAndClick(m_strLogicalName, m_strUrlm, m_intWaitTime)

    On Error Resume Next                                                              
    
    'Set the Flag to False intially
    EnabledAndClick = False
    
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
      
    If (BuiltIn.IsSupported(g_objTestObject, "disabled") = True) Then g_objTestObject.WaitProperty "disabled", False, d_dblObjectWaitTime
    If (BuiltIn.IsSupported(g_objTestObject, "Enabled") = True) Then g_objTestObject.WaitProperty "Enabled", True, d_dblObjectWaitTime

    'click on the object
    g_objTestObject.Click
    
    'If Error Number is not 0 then Log Error and return false, else return true
    If Err.Number <> 0 Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
      EnabledAndClick = True
    End If    
    
End Function

'##################################################################################################################
'Function Name                : SearchAndSelectItem
'Description                  : Returns true if given text is present in the table in 1)the given row,col if specified, or 2) anywhere in the entire table
'Arguments                    : m_strFindMethod:Connection object to the Object Repository 
'                             : m_strPropertyName: The property name or the XPath of the object
'                             : m_strPropertyValue: The property value in case the Find Method is NativeWebObject
'                             : m_strTagName: The tag name in case the Find Method is EvaluateXPath
'                             : m_strPageURL: The URL of the page in which the object is to be found
'Return Value                 : Object - Returns the GUI object
'Author                       : Pramod Rao
'Creation Date                : 7 -April- 2014
'Special Conditions           : NA                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function SearchAndSelectItem(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strItemToSearch)

  On Error Resume Next                                                              
  
   'search for the item
  Dim intRow, intStartRow, intEndRow
  Dim intCol, intStartCol, intEndCol, intChildIndex  
  Dim blnTableSearchItem

  'Initialy set it false
  SearchAndSelectItem = False  
   
  If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
  
  'set Search to False, will change to True if item found.
  'Avoids returning Empty
  blnTableSearchItem = False

  'set defaults
  intStartRow = 0

  intEndRow = g_objTestObject.RowCount

  intStartCol = 0
  intEndCol = g_objTestObject.ColumnCount - 1

  intChildIndex = 0
  
  
  For intRow = intStartRow To intEndRow
    For intCol = intStartCol To intEndCol
      If strRemoveAllSpace(Trim(g_objTestObject.Cell(intRow, intCol).innerText)) = Trim(m_strItemToSearch) Then
        blnTableSearchItem = True
        Exit For
      End If
    Next
    If blnTableSearchItem = True Then Exit For
  Next
  
  If blnTableSearchItem Then
    g_objTestObject.Cell(intRow, intCol - 1).Child(intChildIndex).Click
  End If
  
  SearchAndSelectItem = blnTableSearchItem
  
 'If Error Number is not 0 then Log Error and return false, else return true
  If Err.Number <> 0 or Not(SearchAndSelectItem) Then
    Log.Error "Error on Object: " &": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
  Else
    SearchAndSelectItem = True
  End If   
End Function

'##################################################################################################################
'Function Name      : NotExist
'Description        : Verify the object Does not exists
'Arguments          :
'Return Value       : boolean Value(True/False)
'Author             : Pramod Rao
'Creation Date      : 19 -March- 2014
'Special Conditions : Test Object should Exists
'Revision History   : NA
'Revision Date      : NA
'##################################################################################################################
Function NotExist(m_strLogicalName, m_strUrlm, m_intWaitTime)
  On Error Resume Next

  'Set Flag to False initially
  NotExist = False

  g_blnNotExists = True
  
  Call CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)
   
  If IsEmpty(g_objTestObject) OR  (g_objTestObject is Nothing) OR IsNUll(g_objTestObject) Then
    NotExist = True
  Else
    NotExist = False
  End If
  
  g_blnNotExists = False
  
End Function

'##################################################################################################################
'Function Name                : CloseBrowser
'Description                  : Close process the browser(internet explore, Google Chrome, Mozila Firefox)
'Arguments                    : m_strPageURL: URL of the page to close
'Return Value                 : boolean Value(True/False)
'Author                       : Pramod Rao
'Creation Date                : 19 -March- 2014
'Special Conditions           : NA                                       
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function CloseBrowser(m_strPageURL)
  On Error Resume Next                                                              
  
  CloseBrowser = False           'Set Flag to False initially
  
  'Check the Process is exists or not
  While Sys.WaitBrowser(g_strBrowserType).Exists 
    Call Sys.WaitBrowser.Page("*").Close        'Close the Process,if the Process is Exists
  Wend
  
  'Kill all browser processes
  blnfCloseProcess(g_strBrowserType)
  
  if err.number <> 0 And Sys.WaitBrowser(g_strBrowserType).Exists = True Then
     Log.Error "Error on Object: " & m_strProcessName & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
   Else
     CloseBrowser = True 
  End if  
End Function

'##################################################################################################################
'Function Name                : HoverMouse
'Description                  : Hover on the mouse
'Arguments                    : m_strItemToSearch:Item to Search
'                             : m_intColIndex: The Column Index of the Column on which the action needs to be performed
'Return Value                 : True/False - Returns True if the operation is performed else false
'Author                       : Pramod Rao  
'Creation Date                : 22 -May- 2014
'Special Conditions           : NA                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function HoverMouse(m_strLogicalName, m_strUrlm, m_intWaitTime)
  On Error Resume Next

  HoverMouse = False
  
  If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function     
  
  g_objTestObject.HoverMouse
  
  If Err.Number <> 0  Then
    Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    HoverMouse = False
  Else
     HoverMouse = True
  End If  
End Function

'##################################################################################################################
'Function Name                :VerifyProperty
'Description                  : Verify the specified property of object
'Arguments                    : m_strLogicalName:Logical Name of the Test Object
'                             : mstrPropertyName:Property Name
'                             : mstrExpectedPropertyValue:Property Value
'                             : mblnExactMatch:Verify the exact match (True/False) 
'                             : mblnExists:boolean value if set to false will verify that 
'Return Value                 :boolean Value(True/False)
'Author                       :Pramod Rao
'Creation Date                :19 -March- 2014
'Special Conditions           :Test Object should Exists                                       
'Revision History             :NA
'Revision Date                :NA
'##################################################################################################################
Function VerifyProperty(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strPropertyName, m_strExpectedPropertyValue, m_blnExactMatch, m_blnExists)

    On Error Resume Next                                                              
    
    Dim strPropertyValue
    
    'Set the Flag to False intially
    VerifyProperty = False
    
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function 
    
    strPropertyValue = aqObject.GetPropertyValue(g_objTestObject, m_strPropertyName)
    
    If m_bExactMatch Then
        VerifyProperty = (strPropertyValue = m_strExpectedPropertyValue)
    Else
        VerifyProperty = (InStr(strPropertyValue, m_strExpectedPropertyValue) > 0)
    End If
    
    'if we are checking that some property does not exists, then negate the result
    If Not m_blnExists Then VerifyProperty = Not VerifyProperty
    
    'If Error Number is not 0 then Log Error and return false, else return true
    If Err.Number <> 0 Or Not(VerifyProperty) Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
      VerifyProperty = True
    End If    
    
End Function

'##################################################################################################################
'Function Name                : VerifyText
'Description                  : Returns true if the text displayed matches the required value 
'Arguments                    : m_strLogicalName:Logical Name of the Test Object
'                             : m_strTextToVerify: The text to verify if present in the given object
'Return Value                 : Return the boolean value
'Author                       : Pramod Rao
'Creation Date                : 4 - April- 2014
'Special Conditions           : NA                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function VerifyText(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strPropertyToVerify, m_strTextToVerify)
    On Error Resume Next                                                              

    VerifyText = False
   
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
    
    Select Case UCase(m_strPropertyToVerify)
     
        Case ("VALUE")
          'read text
          VerifyText = Replace(Trim(UCase(g_objTestObject.Value))," ","") = Replace(Trim(UCase(m_strTextToVerify))," ","")  

        Case Ucase("CONTENTTEXT")
          'read text
          VerifyText = Replace(Trim(UCase(g_objTestObject.ContentText))," ","") = Replace(Trim(UCase(m_strTextToVerify))," ","")  
          
        Case Ucase("TOTALCONTENTTEXT")
          'read text
          VerifyText = strRemoveAllSpace(Replace(Trim(UCase(g_objTestObject.ContentText))," ","")) = strRemoveAllSpace(Replace(Trim(UCase(m_strTextToVerify))," ",""))  
          
        Case Ucase("TEXT")
          'read text
          VerifyText = Replace(Trim(UCase(g_objTestObject.Text))," ","") = Replace(Trim(UCase(m_strTextToVerify))," ","")   
          
        Case Ucase("WTEXT")
          'read text wSelection
          VerifyText = Replace(Trim(UCase(g_objTestObject.wText))," ","") = Replace(Trim(UCase(m_strTextToVerify))," ","")    
          
        Case Ucase("wSelection")
            'read text wSelection
            VerifyText = Replace(Trim(UCase(g_objTestObject.wSelection))," ","") = Replace(Trim(UCase(m_strTextToVerify))," ","")     
        
        'Flex
        Case Ucase("CAPTION")
          'read text
          VerifyText = strRemoveAllSpace(Trim(UCase(g_objTestObject.Caption))) = strRemoveAllSpace(Trim(UCase(m_strTextToVerify)))   
                
    End Select
       
    If Err.Number <> 0 Or Not(VerifyText) Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
      VerifyText = True
    End If
    
End Function

'##################################################################################################################
'Function Name                :  Enabled
'Description                  : Common across all types of objects - Check if the object is enabled
'Arguments                    : m_strLogicalName:Logical Name of the Test Object
'Return Value                 : Return the boolean Value (True/False)- Enabled/Disabled
'Author                       : Pramod Rao
'Creation Date                : 4 - April- 2014
'Special Conditions           : Test object should be exists                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function Enabled(m_strLogicalName, m_strUrlm, m_intWaitTime)
    On Error Resume Next                                                              
    
    Enabled = False
     
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
    
    'check if object is Enabled
    Enabled = g_objTestObject.Enabled
    
    If Err.Number <> 0 Or Not(Enabled) Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
       Enabled = True
    End If
    
End Function

'##################################################################################################################
'Function Name                : SelectItem
'Description                  : Returns true if given item is selected,Common for listbox, combobox
'Arguments                    : m_strLogicalName:Logical Name of the Test Object
'                             : m_strItemToSelect: The option to be selected, if null select the first item in the list, will be used in places where any value would do
'Return Value                 : Return the boolean value
'Author                       : Pramod Rao
'Creation Date                : 4 - April- 2014
'Special Conditions           : NA                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function SelectItem(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strItemToSelect)

  On Error Resume Next  
  
  Dim bFlag                                                            

  If m_strItemToSelect <> "" Then   
  
      SelectItem = False

      If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
  
      'set pstrItemToSelect to first if it is null
      If Len(m_strItemToSelect) = 0 Then m_strItemToSelect = g_objTestObject.Item(0).Text
  
      'select the item
      If g_objTestObject.wText <> m_strItemToSelect Then g_objTestObject.ClickItem m_strItemToSelect

      bFlag = (g_objTestObject.wText = m_strItemToSelect)
       
      If Err.Number <> 0 And Not bFlag Then
          Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
      Else
          SelectItem = True
      End If
  Else
    SelectItem = True
  End If
  
End Function

'##################################################################################################################
'Function Name                : ScrollToObject
'Description                  : Scroll into View the test object
'Arguments                    :m_strLogicalName: Logical Name of the Test Object
'Return Value                 :boolean Value(True/False)
'Author                       :Pramod Rao
'Creation Date                :19 -March- 2014
'Special Conditions           :Test Object should Exists                                       
'Revision History             :NA
'Revision Date                :NA
'##################################################################################################################
Function ScrollToObject(m_strLogicalName, m_strUrlm, m_intWaitTime)

    On Error Resume Next                                                              
    
    'Set the Flag to False intially
    ScrollToObject = False
    
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
    
    g_objTestObject.ScrollIntoView (True)

    'If Error Number is not 0 then Log Error and return false, else return true
    If Err.Number <> 0 Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
    Else
      ScrollToObject = True
    End If    
End Function

'##################################################################################################################
'Function Name                : GetText
'Description                  : Returns true if the text displayed matches the required value 
'Arguments                    : 'm_objItem: The object from which text is to be read
'                             : m_strTextToVerify: The text to verify if present in the given object
'Return Value                 : Return the boolean value
'Author                       : Pramod Rao
'Creation Date                : 31 - May - 2014
'Special Conditions           :  Test Object should Exists                                      
'Revision History             : NA
'Revision Date                : NA
'##################################################################################################################
Function GetText(m_strLogicalName, m_strUrlm, m_intWaitTime, m_strPropertyName, m_strPropValue)
    On Error Resume Next                                                              

    GetText = False
    
    If Not (CreateTestObject(m_strLogicalName, m_strUrlm, m_intWaitTime)) Then Exit Function
    
    Select Case UCase(m_strPropertyName)
     
        Case Ucase("VALUE")
          'read text
          m_strPropValue = Trim(UCase(g_objTestObject.Value))
    
        Case Ucase("CONTENTTEXT")
          'read text
          m_strPropValue = Trim(UCase(g_objTestObject.ContentText))
          
        Case Ucase("TEXT")
          'read text
          m_strPropValue = Trim(UCase(g_objTestObject.Text))
          
        Case Ucase("INNERTEXT")
          'read text
          m_strPropValue = Trim(UCase(g_objTestObject.innerText)) 
          
        Case Ucase("WTEXT")
         'read text wSelection
          m_strPropValue = Trim(UCase(g_objTestObject.wText))  
          
        Case Ucase("wSelection")
         'read text wSelection
         m_strPropValue = Trim(UCase(g_objTestObject.wSelection))

        Case Ucase("CAPTION")
          'read text
          m_strPropValue = Trim(UCase(g_objTestObject.Caption))
    
    End Select
       
    If Err.Number <> 0 Then
      Log.Error "Error on Object: " & g_objTestObject & ": Error No: " & Err.Number & ": Error Description: " & Err.Description & ": Error Source: " & Err.Source
      GetText = False
    Else
      GetText = True
    End If
    
End Function

Public Function ClearIECache()
    Dim objShell
    Set objShell = CreateObject("WScript.Shell")
    objShell.Run "RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 4351", 1, True
    Set objShell = Nothing
    Delay(4000)
End Function

'##################################################################################################################
'Function Name                : blnfCloseProcess
'Description                  : Close process the browser(internet explore, Google Chrome, Mozila Firefox)
'Arguments                    :m_strProcessName: Test Object(Browser) iexplore
'Return Value                 :boolean Value(True/False)
'Author                       :Pramod Rao
'Creation Date                :19 -March- 2014
'Special Conditions           :NA                                       
'Revision History             :NA
'Revision Date                :NA
'##################################################################################################################
Function blnfCloseProcess(m_strProcessName)
  On Error Resume Next                                                              
  
  blnfCloseProcess = False          'initilization of the value
  
  'Check the Process is exists or not
  Dim WshShell, objExecTasks, objExec, wmi, qry, p
  Dim strComputer
  Set WshShell = CreateObject("WScript.Shell")
  
  strComputer = "."
  
'    'Check the Process is exists or not  
  Set wmi = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")
  qry = "SELECT * FROM Win32_Process WHERE Name='" & m_strProcessName & ".exe'"

  For Each p In wmi.ExecQuery(qry)
    p.Terminate
  Next  

  Set objExec = WshShell.Exec("taskkill /fi ""imagename eq """ & m_strProcessName & ".exe")
  Do While objExec.Status = 0
       WshShell.Sleep 500
  Loop 
  
  If Err.Number = 0 Then
    blnfCloseProcess = True 
  Else
    blnfCloseProcess = False 
  End If
  Delay(3000)
  
End Function