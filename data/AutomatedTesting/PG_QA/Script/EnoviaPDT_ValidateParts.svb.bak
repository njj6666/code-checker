'USEUNIT EnoviaPDT_CheckDefaultValues
'USEUNIT EnoviaPDT_CheckMandatory
'USEUNIT EnoviaPDT_CheckEditable
'USEUNIT EnoviaPDT_CheckOrder
'USEUNIT EnoviaPDT_CheckMaxFieldLength
'USEUNIT EnoviaUtils
'USEUNIT StringLib
'USEUNIT WindowsUtility
'USEUNIT GlobalVars
'USEUNIT OR_Enovia
'USEUNIT EnoviaPDT_PDTUtils
'USEUNIT EnoviaPDT_ValidationUtils
'USEUNIT WebObjectLib
'USEUNIT LogLib
'USEUNIT ExcelLib

' Function contains tab and link names that are not part of validations.
' Returns true if in ignore list, other false 
Function EnoviaPDT_CheckIgnoreList(strLinkTab)
    Dim arrIgnoreList(1)
    
    ' Add links or tabs in the list that can be ignored
    arrIgnoreList(0) = "Revise"
    arrIgnoreList(1) = "Subscribe"
    
    For i=0 to UBound(arrIgnoreList)
      If UCase(arrIgnoreList(i)) = UCase(strLinkTab) Then
        EnoviaPDT_CheckIgnoreList = True
        Exit Function
      End If
    Next
    
    EnoviaPDT_CheckIgnoreList = False
    
End Function 

' Function to walk through all the tabs and run validations for each of them
Function EnoviaPDT_ValidateAllTabs(PartType, GcasCode)
  On Error Resume Next
  
  Dim LinkName, TabName, tempLinkName, tempTabName
  
  If g_isBlocked = False Then
    ' Validate Categories 
    Log.AppendFolder("Validate Order of Categories")
    g_pdt_CurrentCategory = "Category"
    g_pdt_CurrentTab = ""
    call EnoviaPDT_ValidateCategories(PartType)
    Log.PopLogFolder
      
    For j = 0 to UBound(g_pdt_aCategoriesTabs)
      LinkName = g_pdt_aCategoriesTabs(j,0)
      TabName  = g_pdt_aCategoriesTabs(j,1)
      
      ' Init variables
      TempTabName = ""
      tempLinkName = ""
      
      If LinkName = "Action Bar" Or LinkName = "Attributes" And PartType <> "Virtual Intermediate" Then
        ' Product data summary link is gcas code 
        tempLinkName = GcasCode
        ' For attributes link tab name is the same
        If LinkName = "Attributes" then
          TabName = LinkName
        End If
      ElseIf LinkName = "Formula" And PartType = "Virtual Intermediate" Then
        ' Product data summary link is gcas code
        tempLinkName = GcasCode
        ' For attributes link tab name is the same
        If LinkName = "Formula" then
          TabName = LinkName
        End If
      Else 
        tempLinkName = LinkName
      End if
      
      ' some of the tabs or links can be ignored, check if it exist in ignore list
      If EnoviaPDT_CheckIgnoreList(TabName) = False Then
        If Not EnoviaPDT_NavigateTabsAndLinks(tempLinkName,TabName) Then
          sErrorMessage = "Unable to find Category link: "&tempLinkName&" Or Tab: "&TabName&" For part type: "&PartType&""
          Log.Warning(sErrorMessage)
          Call LogStepData(g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Navigating to: "&tempLinkName&" "&TabName, False, sErrorMessage, "")
          g_isBlocked = False
        Else
          
          ' Set category and tab name into global variables. Can be used in logging
          If tempLinkName <> "" Then
            g_pdt_CurrentCategory = tempLinkName
          End If
          g_pdt_CurrentTab = TabName
          
          
          ' Capture perfomance timing for opening category or a tab
          sPageName = ""
          If LinkName = "Attributes" Then
            sPageName  = LinkName
          ElseIf LinkName <> "" And LinkName <> "Action Bar" Then
            If j = UBound(g_pdt_aCategoriesTabs) Then
              sPageName  = LinkName
            ElseIf g_pdt_aCategoriesTabs(j+1,1) = "" Then
              sPageName  = LinkName
            ElseIf g_pdt_aCategoriesTabs(j+1,1) <> "" Then
              sPageName = g_pdt_aCategoriesTabs(j+1,1)
            End If
          ' Need to check that we didn't open category in last round, if we did, we shouldn't capture 
          ' timing for tab since it is already open and perfomance has been captured.
          ElseIf LinkName = "" And g_pdt_aCategoriesTabs(j,1) <> "" Then
            If g_pdt_aCategoriesTabs(j-1,0) = "" Or g_pdt_aCategoriesTabs(j-1,0) = "Attributes" Then
              sPageName = g_pdt_aCategoriesTabs(j,1)
            ElseIf g_pdt_aCategoriesTabs(j-1,0) = "Action Bar" And g_pdt_aCategoriesTabs(j,1) = "Copy" Then
              sPageName = g_pdt_aCategoriesTabs(j,1)
            End If
          Else 
            sPageName = ""
          End If
          
          If LinkName <> "" Then
            sCategory = LinkName
          End If
          
          Log.Message(LinkName&"-"&g_pdt_aCategoriesTabs(j,1))
          Log.Message(sPageName)
          
          Call EnoviaPDT_WaitForBody(sCategory,sPageName)
          ' End performance logging logic
          
          Call LogStepData(g_pdt_CurrentCategory&": Navigating to: "&tempLinkName&" "&TabName, True, "", "")
        
          ' Last tab or link, run whichever is not empty
          If j = UBound(g_pdt_aCategoriesTabs) Then
            If TabName <> "" Then
              TempTabName = TabName
            ElseIf LinkName <> "" Then
              TempTabName = tempLinkName
            End If
          Else
            ' Run validations for links if it doesn't have any tabs. 
            If LinkName <> "" And g_pdt_aCategoriesTabs(j+1,1) = "" Then
              TempTabName  = tempLinkName
            Else 
              TempTabName = TabName
            End If
          End If
          
          ' Validate Category tabs if category has any, excluding Action bar buttons.       
          If LinkName <> "Action Bar" And LinkName <> "" Then
            Log.AppendFolder("Validate Category tabs: "&LinkName)
            Call EnoviaPDT_ValidateTabs(LinkName, PartType)
            Log.PopLogFolder
          End If
          
          ' Validate part
          If TempTabName <> "" Then
            ' Functions checks if we need to click edit or do other tasks to make tab ready for validations
            EnoviaPDT_EnableTabForValidation(TempTabName)
        
            Log.AppendFolder("Validate tab: "&TempTabName)
              Log.AppendFolder("Validate Order of Fields")
              call EnoviaPDT_CheckOrderOfFields(EnoviaPDT_MapSpreadsheetNames(TempTabName), PartType)
              Log.PopLogFolder

              Log.AppendFolder("Validate Editable Fields")
              call EnoviaPDT_CheckEditableFields(EnoviaPDT_MapSpreadsheetNames(TempTabName), PartType)
              Log.PopLogFolder
          
              ' Need to execute default values for attributes tab before we fill it. it is executed in EnoviaPDT_ValidateParts
              If UCase(TempTabName) <> "ATTRIBUTES" Then
                Log.AppendFolder("Validate Default values")
                call EnoviaPDT_DefaultValuesValidation(EnoviaPDT_MapSpreadsheetNames(TempTabName), PartType)
                Log.PopLogFolder
              End If
  
              Log.AppendFolder("Validate Field max length")
              Call EnoviaPDT_CheckMaxLength(EnoviaPDT_MapSpreadsheetNames(TempTabName),PartType)
              Log.PopLogFolder
                  
              Log.AppendFolder("Validate Mandatory Fields")
              call EnoviaPDT_CheckMandatoryFields(EnoviaPDT_MapSpreadsheetNames(TempTabName), PartType)
              Log.PopLogFolder
            Log.PopLogFolder
            
            If TempTabName = "Substitutes" Then
              call CloseByCaption("ENOVIA - Internet Explorer")
            End If
          
          End If
        End If
      End If
    Next  

    If Err.Number = 0 Then
      EnoviaPDT_ValidateAllTabs = True
    Else
      EnoviaPDT_ValidateAllTabs = False
      Log.Warning("Errors while validating part: "&PartType&" GcasCode: "&GcasCode &" "&Err.Description&" "&Err.Source)
    End If
  End If
  
  Call LogTestCase(PartType&" - Validate all fields and validations for all categories", EnoviaPDT_GetTestCaseID(), EnoviaPDT_GetAlmID(4))
End Function


' Opens and runs validations for Create Page
Function EnoviaPDT_ValidateCreatePage(PartType)
  If g_isBlocked = False Then
    if Ucase(PartType)="VIRTUAL INTERMEDIATE" then
        call EnoviaPDT_NavigateTabsAndLinks("","History")
        Delay 2000
        Call Enovia_OpenPlusMenu(OR_EnoviaMenu_ProductSpecificationLnk, OR_EnoviaMenu_CreateVILnk)
        Log.AppendFolder("Validate Create page")
        Delay 2000
        'Change part type combo box
    else
        Call Enovia_OpenPlusMenu(OR_EnoviaMenu_ProductSpecificationLnk, OR_EnoviaMenu_CreateProductDataLnk)
        MaximizeByCaption("CreateProductData")
  
        Log.AppendFolder("Validate Create page")
        'Change part type combo box
        Set objTypeCmb = objGetObject(OR_EnoviaPDT_TypeCmb,g_CreatePage_URL,"")
        If Not (objTypeCmb is Nothing) Then
          objTypeCmb.ClickItem(PartType)
        End If
        Set objTypeCmb = Nothing
        
        WaitPageLoad(g_CreatePage_URL)
    end if
    
    '
    g_pdt_CurrentCategory = "Create Product Data"
    g_pdt_CurrentTab = "Create Page"
          
    ' Validate part
    Log.AppendFolder("Create page: Validate Order of Fields")
    call EnoviaPDT_CheckOrderOfFields("Create", PartType)
    Log.PopLogFolder
  
    Log.AppendFolder("Create page: Validate Default values")
    call EnoviaPDT_DefaultValuesValidation("Create", PartType)
    Log.PopLogFolder
  
    Log.AppendFolder("Create page: Validate Editable Fields")
    call EnoviaPDT_CheckEditableFields("Create", PartType)
    Log.PopLogFolder
  
    Log.AppendFolder("Create page: Validate Mandatory Fields")
    call EnoviaPDT_CheckMandatoryFields("Create", PartType)
    Log.PopLogFolder
  
    Log.AppendFolder("Create page: Validate Field max length")
    Call EnoviaPDT_CheckMaxLength("Create",PartType)
    Log.PopLogFolder
  
     if Ucase(PartType)="VIRTUAL INTERMEDIATE" then
        objGetObject(OR_EnoviaPDT_CancelBtn, "","").Click
    else
        objGetObject(OR_EnoviaPDT_CancelBtn, g_CreatePage_URL,"").Click
    end if
  
    Log.PopLogFolder
  End If
  If Err.Number = 0 Then
    EnoviaPDT_ValidateCreatePage = True
  Else
    EnoviaPDT_ValidateCreatePage = False
    Log.Warning("Errors while validating create part page : "&PartType&" "&Err.Description)
  End If
  
End Function

' Function to validate part type categories (links on the left side)
Function EnoviaPDT_ValidateCategories(sPartType)
  On Error Resume Next
  
  dim sCategory,oParent,oFieldWithSI,arrFields
  
  bPassed = True
  
  sSheetName = "Categories"
  sColumnName = "Categories" 'Name of column to be searched in the Excel
  
  sFilePath =  g_pdt_FileLocation&sPartType&".xlsx"  'Part Type excel file path
  nSearchDepth = 2 'Depth at which FindAllChildren method is run
  sGcasCode = EnoviaPDT_GetGcasByPartType(sPartType)
  
  Set oParent = objGetObject(OR_EnoviaPDT_CategoriesPnl,"","")
  
  Set oFieldWithSI = EnoviaPDT_GetSourceIndexesFromApp(oParent,nSearchDepth, "Label")
  arrSourceIndexApp = oFieldWithSI.Keys 'Get sourceindex of all the Fields from the application under the Parent object
 
  If Ubound(arrSourceIndexApp) < 0 Then 'Check if there no objects returned from GetAllFieldsFromApp function
    Log.Warning "Required fields were not found in the Application"
    'Exit Function
    sErrorMessage = sErrorMessage&" Required fields were not found in the Application"
    bPassed = False
  End If
  
  arrFields = Excel_GetAnyColumnValues(sSheetName,sFilePath,sColumnName) 'Call to get all ColumnValues in a excel sheet into an Array
  If Not(IsArray(arrFields)) Then
    Log.Warning "Failed to retrieve Column values from Excel Sheet"
    'Exit Function
    sErrorMessage = sErrorMessage&" Failed to retrieve Column values from Excel Sheet"
    bPassed = False
  End If
  
  ' Need to replace category tab with gcas code. 
  If sPartType = "Virtual Intermediate" Then
    sCategory = "FORMULA"
  Else
    sCategory = "ATTRIBUTES"
  End If
  
  ' replace attribute link with gcas code + version
  For i = 0 To UBound(arrFields)
    If Ucase(arrFields(i)) = sCategory Then
      arrFields(i) = sGcasCode
      Exit For
    End If
  Next
  
  ReDim arrSourceIndex(Ubound(arrFields)) 
  FieldFound = True
  
  On Error Resume Next
  Redim arrFieldNotFound(Ubound(arrFields))
  l = 0
  oFieldCollection = oParent.FindAllChildren("ObjectType","Label",nSearchDepth)  'Find all children of type Cell
  If Ubound(oFieldCollection) < 0 Then
    sErrorMessage = sErrorMessage&" Unable to find Category links from object" 
    bPassed = False
    Log.Warning "There are no objects of type Label "&sErrorMessage
    'Exit Function
  End If
  
  For i = 0 to Ubound(arrFields) 
    FieldFound = False
    For j = 0 to Ubound(oFieldCollection)
      ' replace attributes by gcas code. 
      If Replace(UCase(oFieldCollection(j).ContentText),sCategory,sGcasCode) = EnoviaPDT_ReplaceSpecialChars(Ucase(arrFields(i))) _
      and oFieldCollection(j).clientHeight > 0 Then  'Compare with content Text property
        arrSourceIndex(i) = oFieldCollection(j).SourceIndex 'Get the sourceindex of the objects into an array
        bFieldFound = True
        Exit For
      End If
      If j = Ubound(oFieldCollection) and FieldFound = False Then   'If field is not found add it into an array
        arrFieldNotFound(l) = arrFields(i)
        l=l+1
      End If
    Next
  Next 
  
  ReDim Preserve arrFieldNotFound(l-1)
 
  If Ubound(arrFieldNotFound) >= 0 Then   
      bPassed = False
      Log.Warning "Category(s) "&Join(arrFieldNotFound,",")&" is/are not available in the application"
      For x = 0 to Ubound(arrFieldNotFound)
        sErrorMessage = "Category "&arrFieldNotFound(x)&" is not available in application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Category "&arrFieldNotFound(x)&" Should be in expected order",bPassed,sErrorMessage,"")
      Next
    else
      Set oMatchedFieldsDict = EnoviaPDT_CompareArrays(arrSourceIndexApp,arrSourceIndex)  'Compare Arrays are in same order and have same value
      If oMatchedFieldsDict.item("ErrorMsg") <> "" Then
        sErrorMessage = sErrorMessage&oMatchedFieldsDict.item("ErrorMsg")&" "
      End If
      
      If oMatchedFieldsDict.item("MisMatch") <> "" Then
        Call EnoviaPDT_LogPassedStepsFieldWise(oFieldWithSI,oMatchedFieldsDict)
        bPassed = False
        sErrorMessage = sErrorMessage&"MisMatch with the Category '"&oFieldWithSI.item(Cint(oMatchedFieldsDict.item("MisMatch")))&"', when comparing the Field List between Excel sheet and Application"
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Category"&oMatchedFieldsDict.item("MisMatch")&" Should be in expected order",bPassed,sErrorMessage,"")
        Log.Warning sErrorMessage
      
      Else If bFieldFound and oMatchedFieldsDict.item("MisMatch") = "" and Err.Number = 0 THen
        Call EnoviaPDT_LogPassedStepsFieldWise(oFieldWithSI,oMatchedFieldsDict)
        Log.Message "Category are in Expected Order"
      
      else
        bPassed = False
        sErrorMessage = sErrorMessage&"Fields are not in Expected order. "&Err.Description
        Call LogStepData (g_pdt_CurrentCategory&"-"&g_pdt_CurrentTab&": "&"Category Should be in expected order",bPassed,sErrorMessage,"")
        Log.Warning sErrorMessage
        Err.Clear
      End IF
    End If
    End If
    
  ' doesn't block anything 
  g_isBlocked = False
  EnoviaPDT_ClearVariable oParent
  EnoviaPDT_ClearVariable oFieldCollection
  EnoviaPDT_ClearVariable oFieldWithSI
  EnoviaPDT_ClearVariable arrFields
End Function 

' Function to validate tabs for specific category. Checks that category has all the tabs mentioned in spreadsheet and no extra ones
Function EnoviaPDT_ValidateTabs(sCategory, sPartType)
  On Error Resume Next
  
  Dim aCategoryTabs, oParent, oTabs, aAppTabs()
  
  bSuccess = True
  aCategoryTabs = EnoviaPDT_GetTabsByCategory(sCategory)
 
  If String_IsArrayDimmed(aCategoryTabs) = False Then
    Log.Message("No tabs for Category: "&sCategory)
    Exit Function
  End If
  
  aPropNames = Array("idStr","VisibleOnScreen")
  aPropValues = Array("pvChannelTabs",True)
  
  'We can have one or two ChannelTabs, need to find them from page level
  Set oParent = objGetPage("")
  oParents = oParent.FindAllChildren(aPropNames,aPropValues,20)
  
  i=0
  ' Loop subpanels and find tabs under them
  For each oSubPanels in oParents
    aPropNames = Array("ObjectType")
    aPropValues = Array("Cell")
    oTabs = oSubPanels.FindAllChildren(aPropNames,aPropValues,2)
  
    For each x in oTabs
      If x.contentText <> "" Then
        ReDim Preserve aAppTabs(i)
        aAppTabs(i) = x.contentText
        i=i+1
      End If
    Next
    
    ' There can be tabs hidden under >> sign. Need get these bad boys into array as well
    ArrowProps = Array("WEBOBJECT", "ObjectIdentifier~ObjectType~VisibleOnScreen", "utilTabsetArrow_gif~Image~True", "")
    Set ArrowTab = objGetObject(ArrowProps,"",1000)
    
    If (ArrowTab Is Nothing) = False Then
      ArrowTab.Click
      Set oPanel = objGetObject(OR_Enovia_MenuContentPnl,"","")
      oHiddenTabs = oPanel.FindAllChildren("ObjectType","Link",2)
      
      For each hid in oHiddenTabs
        If hid.contentText <> "" Then
          ReDim Preserve aAppTabs(i)
          aAppTabs(i) = hid.contentText
          i=i+1
        End If
      Next
    End If
  Next 
  
  ' Compare spreadsheet and application tabs
  For each tabs in aCategoryTabs
    bTabFound = False
    For each apptabs in aAppTabs
      ' let it ignore button name that comes when executing for formulation process and Tables Weight tab which is behind combobox
      If apptabs = tabs Or (tabs = "Substitutes" And sPartType = "Formulation Process") Or tabs = "Tables Weight" Then
        bTabFound = True
        Exit For
      End If
    Next
    
    Call LogStepData ("Tab: "&tabs&" Found for category: "&sCategory, bTabFound, sErrorMessage,"")
    g_isBlocked = False
    Log.Message("Tab: "&tabs&" Found for category: "&sCategory&" - "&Cstr(bTabFound))
  Next
  
  ' check if any extra tabs in application
  For each tabs in aAppTabs
    bTabFound = False
    For each apptabs in aCategoryTabs
      If apptabs = tabs Then
        bTabFound = True
        Exit For
      End If
    Next
    
    If bTabFound = False Then
      Call LogStepData ("Found Undefined tab: "&tabs&" from application", False, sErrorMessage,"")
      g_isBlocked = False
      Log.Message("Found Undefined tab: "&tabs&" from application")
    End If
  Next
  
  If Err.Number <> 0 Then
    sErrorMessage = "Errors while checking category tabs: "&Err.Description&" - "&Err.Source
    bSuccess = False
    Err.Clear
  End If
  
  Call LogStepData ("Category tabs validated successfully for:"&sCategory, bSuccess, sErrorMessage,"")
  
  g_isBlocked = False
  EnoviaPDT_ClearVariable aCategoryTabs
  EnoviaPDT_ClearVariable oParent
  EnoviaPDT_ClearVariable oTabs
  EnoviaPDT_ClearVariable ArrowTab
  EnoviaPDT_ClearVariable oHiddenTabs
  EnoviaPDT_ClearVariable oPanel
End Function 
