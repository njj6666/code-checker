'
'  findText
'  
'  Loads text of the entire PDF document, 
'  finds the specified string within it
'  and posts the result of searching.
'  
'  Parameters:
'    docObj - The PDDocument object that represents the PDF file.
'    string - The string that will be searched for in the document.
'    
'  Result:
'    None.
'
Sub findText(docObj, string)

  Dim textStripperObj, text
  
  ' Create the PDFTextStripper object
  ''Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()

  Set textStripperObj = dotNET.org_apache_pdfbox_util.PDFTextStripper.zctor_2() 
  ' Get the document text
  text = textStripperObj.getText_2(docObj)

  ' Search for the specified string in the text
  If (aqString.Find(text, string)>-1) Then
    Log.Message("The document contains the specified string.")
  Else
    Log.Warning("The document does not contain the specified string.")
  End If
End Sub

'
'  compareParagraph
'  
'  Obtains the text of the documents and compares the desired paragraph
'  on the specified page
'  
'  Parameters:
'    docObj_1 - The PDDocument object that represents the first PDF file.
'    pageIndex - A zero-based index of the page that contains the desired paragraph.
'    paraIndex - A zero-based index of the desired paragraph.
'    baselineValue - A string with which the paragraph should be compared. 
'    
'  Result:
'    None.
'
Sub compareParagraph(docObj_1, pageIndex, paraIndex, baselineValue)

  Dim paragraph

  ' Obtain the desired paragraph text
  paragraph = getParagraphText(docObj_1, pageIndex, paraIndex)
  
  ' Compare the paragraphs with the sample
  If (aqString.Compare(paragraph, baselineValue, true) = 0) Then
    ' Post the message that paragraphs are equal
    Log.Message("The paragraph text coincides with the baseline value.")
  Else
    ' Post the message that paragraphs are different
    Log.Message("The paragraph text differs from the baseline value.")
  End If
End Sub

'
'  compareImages
'  
'  Obtains the specified image from the PDF file
'  and compares it with the stored sample.
'  
'  Parameters:
'    docObj - docObj - The PDDocument object that represents the desired PDF file.
'    pageIndex - The zero-based index of the page that contains the image to compare.
'    imgIndex - The zero-based index of the desired image on the page.
'    imgFile - The name of the temporary image file.
'    imgSample - The name of the stored image sample.
'    
'  Results:
'    None.
'
Sub compareImages(docObj, pageIndex, imgIndex, imgFile, imgSample) 
  Dim imageObj, imgBuffer, tempFile

  ' Load an image from the page
  Set imageObj = getImage(docObj, pageIndex, imgIndex)
  
  ' Get binary data of the image
  Set imgBuffer = imageObj.getRGBImage()

  ' Create a temp file
  Set tempFile = JavaClasses.java_io.File.newInstance(imgFile)

  ' Save the image to the temp file
  Call JavaClasses.javax_imageio.ImageIO.write(imgBuffer, "png", tempFile)
   
  ' Compare the image with the sample
  Call Regions.Compare(imgSample, imgFile)

  ' Delete the temp image file
  aqFile.Delete(imgFile)
End Sub

'
'    compareDocsAsText
'  
'  Loads two PDF files and compares text of the documents.
'  
'  Parameters:
'    pdfFile_1 - The fully-qualified name of the first PDF file.
'    pdfFile_2 - The fully-qualified name of the second PDF file.
'
'  Result:
'    None.
'
Sub compareDocsAsText(pdfFile_1, pdfFile_2) 

  Dim markerConst, docObj_1, docObj_2, textStripperObj, text_1, text_2, par_1, par_2

  ' Specify the unique string as a custom marker 
  markerConst = "SOME_UNIQUE_STRING_FOR_PARAGRAPH_END"
  
  ' Load the PDDocument objects
  Set docObj_1 = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(pdfFile_1)
  Set docObj_2 = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(pdfFile_2)
  
  ' Obtain the stripper object
  Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
  
  ' Specify the custom string as a marker of the paragraph's end
  textStripperObj.setParagraphEnd(markerConst)
  ' Specify the custom string as a list separator 
  aqString.ListSeparator = markerConst
  
  ' Check if the number of pages is different
  If (docObj_1.getNumberOfPages <> docObj_2.getNumberOfPages) Then
    Log.Error("The number of pages are different.")
  Else
    ' Loop through the pages
    For pageIndex = 1 To docObj_1.getNumberOfPages
      ' Specify the page for extraction
      textStripperObj.setStartPage(pageIndex)
      textStripperObj.setEndPage(pageIndex)

      ' Get the documents’ text
      text_1 = textStripperObj.getText_2(docObj_1)
      text_2 = textStripperObj.getText_2(docObj_2)
  
      ' Check if the documents have the same number of paragraphs
      If (aqString.GetListLength(text_1) = aqString.GetListLength(text_2)) Then
        ' Loop through the text paragraphs 
        For i=0 To aqString.GetListLength(text_1)-1
          ' Obtain the next paragraph
          par_1 = aqString.GetListItem(text_1, i)
          par_2 = aqString.GetListItem(text_2, i)
   
          ' Compare paragraphs of two documents
          If (aqString.Compare(par_1, par_2, true) <> 0) Then
            ' Post a warning to the test log that the current paragraphs are different
            Log.Warning("The " & aqConvert.IntToStr(i + 1) & " paragraph on the " & pageIndex & " page are different.")
          Else
            ' Post a message to the test log that the current paragraphs are equal
            Log.Message("The " & aqConvert.IntToStr(i + 1) & " paragraphs on the " & pageIndex & " page are equal.")
          End If
        Next
      Else 
        ' Post a warning to the test log that a number of paragraphs are different
        Log.Warning("Number of paragraphs on the " & pageIndex &" page are different.")
      End If
    Next
  End If
End Sub

'
'  compareDocsAsImg
'  
'  Loops through the pages of the documents,
'  converts them to images
'  and posts the result of their comparison.
'  
'  Parameters:
'    pdfFile_1 - The fully-qualified name of the first PDF file.
'    pdfFile_2 - The fully-qualified name of the second PDF file.
'    maskImg - The mask that specifies regions to compare.
'
Sub compareDocsAsImg(pdfFile_1, pdfFile_2, maskImg)

  Dim imgFile_1, imgFile_2, docObj_1, docObj_2, totalPages_1, totalPages_2

  ' Specify the fully-qualified name of the temporary image files 
  imgFile_1 = "C:\Temp\page_doc_1.png" 
  imgFile_2 = "C:\Temp\page_doc_2.png"

  ' Load specified documents
  Set docObj_1 = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(pdfFile_1)
  Set docObj_2 = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_3(pdfFile_2)
  
  ' Get the total number of pages in both documents
  totalPages_1 = docObj_1.getNumberOfPages()
  totalPages_2 = docObj_2.getNumberOfPages()
   
  ' Check that the documents contain the same number of the pages
  If (totalPages_1 <> totalPages_2) Then
    Log.Message("The documents contain the different number of pages.")
  Else
    For i = 0 To totalPages_1 - 1
      ' Call a routine that converts the specified page to an image
      Set pic_1 = convertPageToPicture(docObj_1, i, imgFile_1)
      Set pic_2 = convertPageToPicture(docObj_2, i, imgFile_2)
      
      ' Compare two images
      If (Not pic_1.Compare(pic_2, false, 5, false, 5, maskImg)) Then
        ' If the images are different...
        ' Post the image differences to the log
        Log.Picture(pic_1.Difference(pic_2, false, 5, false, 5, maskImg))

        ' Post a warning message
        Log.Warning("Pages " & aqConvert.IntToStr(i+1) & " are different. Documents are different.")
        ' Break the loop
        Exit For
      Else
        ' Post a message that the pages are equal
        Log.Message("Pages " & aqConvert.IntToStr(i+1) & " are equal.")
      End If
      ' Delete the temporary image files
      aqFile.Delete(imgFile_1)
      aqFile.Delete(imgFile_2)
    Next
  End If
End Sub

'
'  getAllText
'  
'  Returns a string that contains all the text from the
'  taken PDDocument object.
'  
'  Parameters:
'    docObj - The PDDocument object that represents the loaded PDF file.
'        
'  Result:
'    String that contains the text of the document.
'
Function getAllText(docObj)

  Dim textStripperObj, text

  ' Create an instance of the PDFStripper object
  Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
  
  ' Obtain the text of the document
  text = textStripperObj.getText_2(docObj)
  
  ' Return the text
  getAllText = text 
End Function

'
'  getTextFromPage
'  
'  Returns a string that contains the text only from the desired page.
'  
'  Parameters:
'    docObj - the PDDocument object that represents the loaded PDF file.
'    pageIndex - a zero-based integer index of the desired page.
'    
'  Result:
'    A string that contains the text of the desired page.
'
Function getTextFromPage(docObj, pageIndex)

  Dim textStripperObj, text

  ' Create an instance of the PDFStripper object
  Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
  
  ' For convenience, we pass to the function zero-based index of the page
  ' But, since the setStartPage and setEndPage methods require
  ' non-zero-based indexes, we must increment it.
  pageIndex = pageIndex + 1

  ' Set the page range to retrieve text of one page only
  textStripperObj.setStartPage(pageIndex)
  textStripperObj.setEndPage(pageIndex)
  
  ' Obtain the page's text
  text = textStripperObj.getText_2(docObj)
  
  ' Return the text
  getTextFromPage = text
End Function

'
'  getTextFromPageRange
'  
'  Returns a string that contains the text from the pages
'  between startPage and endPage.
'  
'  Parameters:
'    docObj - the PDDocument object that represents the loaded PDF file.
'    startPageIndex - a zero-based integer index of the page from which text will be retrieved.
'    endPageIndex - a zero-based integer index of the page to which text will be retrieved.
'    
'  Result:
'    A string that contains the text between specified pages.
'
Function getTextFromPageRange(docObj, startPageIndex, endPageIndex)

  Dim textStripperObj, text

  ' Create an instance of the PDFStripper object
  Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance()
  
  ' For convenience, we pass zero-based indexes of the border pages to the function
  ' But, since the setStartPage and setEndPage methods require
  ' non-zero-based indexes, we must increment them.
  startPageIndex = startPageIndex + 1
  endPageIndex = endPageIndex + 1
  
  ' Specify the start page
  textStripperObj.setStartPage(startPageIndex)
  
  ' Specify the end page
  textStripperObj.setEndPage(endPageIndex)
  
  ' Obtain the page's text
  text = textStripperObj.getText_2(docObj)
  
  ' Return the text
  getTextFromPageRange = text
End Function

'
'  getParagraphText
'  
'  Returns the text of the specified paragraph on a page.
'  
'  Parameters:
'    docObj - The PDDocument object that represents the loaded PDF file.
'    pageIndex - A zero-based index of the desired page.
'    paraIndex - A zero-based index of the desired paragraph on the page.
'    
'  Result:
'    String that contains the text of the specified paragraph.
'
Function getParagraphText(docObj, pageIndex, paraIndex)
  Dim textStripperObj, constMarker, pageText, paragraphText

  ' Create an instance of the PDFTextStripper object
  ''Set textStripperObj = JavaClasses.org_apache_pdfbox_util.PDFTextStripper.newInstance() 
  Set textStripperObj = dotNET.org_apache_pdfbox_util.PDFTextStripper.zctor_2() 

  ' A string to be used as a marker of the paragraph end
  constMarker = "SOME_UNIQUE_STRING_FOR_PARAGRAPH_END"
  
  ' Set the page range to retrieve text of one page only.
  ' Note that pageIndex is zero-based, and the methods below
  ' use non-zero-based indexes. So, we increase pageIndex
  ' when passing it to the methods.
  textStripperObj.setStartPage(pageIndex + 1)
  textStripperObj.setEndPage(pageIndex + 1)
  
  ' Specify the paragraph marker
  textStripperObj.setParagraphEnd(constMarker)
  
  ' Specify the list separator
  aqString.ListSeparator = constMarker
  
  ' Obtain the text of the page
  pageText = textStripperObj.getText_2(docObj)
  
  ' Check that the paragraph index is positive
  If (paraIndex < 0) Then 
    Log.Error("The paragraph index is negative.")
  Else
    ' Check that paraIndex does not exceed
    ' the actual number of paragraphs on the page
    If (paraIndex > aqString.GetListLength(pageText)) Then
      ' Post an error to the test log
      Log.Error("The paragraph index exceeds the number of paragraphs on the page.")
      ' Return an empty string
      getParagraphText = ""
    Else
      ' Specify the marker as a list separator
      aqString.ListSeparator = constMarker
      ' Get the text of the specified paragraph
      paragraphText = aqString.GetListItem(pageText, paraIndex)
      ' Return the paragraph's text
      getParagraphText = paragraphText
    End If
  End If 
End Function


'
'  removeHeader
'  
'  Removes the header line from the text.
'  We imply that the header line is the first line of the page.
'  
'  Parameters:
'    pageText - The text of the page.
'    
'  Returns:
'    The text with the header line removed.
'
Function removeHeader(pageText) 

  Dim lastHeaderPos

  ' Find the end symbol of the header line, including the symbol itself
  lastHeaderPos = aqString.Find(pageText, vbCr) + 1

  ' Remove the header line from the text 
  pageText = aqString.Remove(pageText, 0, lastHeaderPos)
  
  ' Return the text without the header
  removeHeader = pageText
End Function

'
'  removeFootnote
'  
'  Removes the footnote line from the page's text.
'  We imply that a footnote is the last line of the page.
'  
'  Parameters:
'    pageText - The text of the page.
'    
'  Result:
'    The text with the footnote line removed.
'
Function removeFootnote(pageText)

  Dim result, lineStartPos, lineEndPos, lineLength, subStr

  ' Declare a resulting string
  result = ""
  
  ' Specify the first symbol of the first line
  lineStartPos = 0
  
  ' Find the last symbol of the first line
  ' To include to the string the symbol itself we must increment the index by 1
  lineEndPos = aqString.Find(pageText, vbNewLine) + 1
  
  ' Loop throug the lines until it reaches 
  ' the last line of the page 
  Do While (lineEndPos < aqString.GetLength(pageText)-1)
    ' Get the length of the line
    lineLength = lineEndPos-lineStartPos 
  
    ' Get the current line of the text
    subStr = aqString.SubString(pageText, lineStartPos, lineLength)
    
    ' Add the current line to the resulting string
    result = result + subStr
    
    ' Set the first symbol of the next line 
    lineStartPos = lineEndPos
    
    ' Find the end symbol of the current line
    lineEndPos = aqString.Find(pageText, vbNewLine, lineStartPos) + 1
  Loop
  
  ' Return the resulting string
  removeFootnote = result
End Function

'
'  logMetadata
'  
'  Posts the information on the document.
'  
'  Parameters:
'    docObj - the PDDocument object that contains the PDF file.
'    
'  Results:
'    None.
'
Sub logMetadata(docObj)
  Dim info, modificationDate

  ' Get the info about the document
  info = docObj.getDocumentInformation()
  
  ' Log the total number of pages to the log
  Log.Message("Pages: " + docObj.getNumberOfPages())
  
  ' Log the title of the document to the log
  Log.Message("Title: " + info.getTitle())
  
  ' Log the author of the document to the log
  Log.Message("Author: " + info.getAuthor())
  
  ' Log the subject of the object to the log
  Log.Message("Subject: " + info.getSubject())
  
  ' Log the creator of the document to the log
  Log.Message("Creator: " + info.getCreator())
  
  ' Log the date and time when 
  ' the document was created in the local settings
  Log.Message("Creation Date: " + info.getCreationDate().getTime().toLocaleString())
  
  ' Obtain the date when the document was last modified
  modificationDate = info.getModificationDate()
  
  ' If the document has never been modified
  ' the getModificationDate method returns null
  If modificationDate <> Nothing Then
    ' Log the date and time when 
    ' the document was last updated in the local settings.
    Log.Message("Modification Date: " + Date.getTime().toLocaleString())
  Else 
    ' Post the message that the document has never been modified
    Log.Message("The document has never been modified.")
  End If
End Sub

'
'  saveImageToFile
'  
'  Saves the image object to the specified path.
'  
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    pageIndex - A zero-based index of the desired page.
'    imgIndex - A zero-based index of the desired image.
'    fileName - The fully-qualified path to an output file.
'    
'  Result:
'    None.
'
Sub saveImageToFile(docObj, pageIndex, imgIndex, fileName)

  Dim imageObj, imgBuffer, imgFile, imgFormat

  ' Get the image object
  Set imageObj = getImage(docObj, pageIndex, imgIndex)

  ' Obtain binary data from the image 
  Set imgBuffer = imageObj.getRGBImage()
  
  ' Create a new file to save
  Set imgFile = JavaClasses.java_io.File.newInstance(fileName)
  
  ' Get the image format from the name
  imgFormat = aqString.SubString(fileName, aqString.GetLength(fileName)-3, 3)
  
  ' Save the image to the created file
  Call JavaClasses.javax_imageio.ImageIO.write(imgBuffer, imgFormat, imgFile)
End Sub

'
'  saveAllImages
'  
'  Exports all the images from the specified PDDocument object.
'  
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    outPath - The path to which the image will be saved.
'    imgName - The constant part of the image name.
'    imgFormat - The custom format that will be used to save the image.
'    
'  Result:
'    None.
'
Sub saveAllImages(docObj, outPath, imgName, imgFormat)

  Dim pageArray, pageCounter
  
  ' The path to which the images from the current page will be saved.
  Dim curPath
  
  ' Obtain an array of the document pages 
  Set pageArray = getAllPages(docObj)
    
  ' Loop through the document pages
  For i=0 to pageArray.size() -1
    ' The ordinal number of the processing page.
    ' It is used to save images of the each page
    ' to a separate folder
    pageCounter = i+1

    ' Create the path to the folder that corresponds to the current page
    curPath = outPath & "\page_" & pageCounter
    
    ' Create the folder that will contain images from the current page
    aqFileSystem.CreateFolder(curPath)
    
    ' Call a routine that saves all the images from the current page  
    Call saveImagesFromPage(docObj, i, curPath, imgName, imgFormat)
    
    ' Increment the page counter
    pageCounter = pageCounter + 1
  Next
End Sub

'
'  saveImagesFromPage
'  
'  Saves all the images from the specified page.
'  
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    pageIndex - A zero-based index of the desired page.
'    outPath - The path to the folder to which the image will be saved;
'    imgName - The constant part of the image name;
'    imgFormat - The custom format that will be used to save the image.
'    
'  Result:
'    None.
'
Sub saveImagesFromPage(docObj, pageIndex, outPath, imgName, imgFormat)

  Dim pageObj, imgMap, imgArray, fileName

  ' Get the page object
  Set pageObj = getPage(docObj, pageIndex)

  ' Obtain a HashMap the images from the specified page
  Set imgMap = pageObj.getResources().getXObjects()
  
  ' Get an array with the images
  Set imgArray = imgMap.values().toArray()
  
  ' Loop through the image array
  For i=0 to imgArray.length()-1
   
    ' Get a fully-qualified path to an output file
    fileName = outPath&"\"&imgName&i&"."&imgFormat 
    
    ' Call a routine that saves the image to a file
    Call saveImageToFile(docObj, pageIndex, i, fileName)
  Next
End Sub

'
'  getImage
'  
'  Returns an object that contains the specified image from the page.
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    pageIndex - A zero-based index of the desired page.
'    imgIndex - The zero-based index of the image on the page.
'  
'  Result:
'    The PDJpeg or PDPixelMap object that contains the desired image.
'
Function getImage(docObj, pageIndex, imgIndex)

  Dim pageObj, imgMap, imgArray, imageObj

  ' Get the desired page
  Set pageObj = getPage(docObj, pageIndex)
  
  ' Obtain a HashMap collection of images from the specified page
  Set imgMap = pageObj.getResources().getXObjects()
  
  ' Get an array of the images
  Set imgArray = imgMap.values().toArray()
  
  ' Get an individual image by its index
  Set imageObj = imgArray.items(imgIndex)
  
  ' Return the image object
  Set getImage = imageObj
End Function

'
'  getPagePicture
'  
'  Save the specified page to an image.
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    pageIndex - A zero-based index of the desired page.
'    fineName - The fully-qualified name of the image.
'    
'  Result:
'    The Picture object that corresponds to the saved image.
'
Function convertPageToPicture(docObj, pageIndex, fileName)

  Dim pageObj, imgBuffer, imgFile, imgFormat, pictureObj

  ' Get the desired page
  Set pageObj = getPage(docObj, pageIndex)
  
  ' Convert the page to image data
  Set imgBuffer = pageObj.convertToImage()
  
  ' Create a new file to save
  Set imgFile = JavaClasses.java_io.File.newInstance(fileName)
  
  ' Get the image format from the name
  imgFormat = aqString.SubString(fileName, aqString.GetLength(fileName)-3, 3)
  
  ' Save the image to the created file
  Call JavaClasses.javax_imageio.ImageIO.write(imgBuffer, imgFormat, imgFile)

 ' Create a Picture object
  Set pictureObj = Utils.Picture
  
  ' Load the image as a picture
  pictureObj.LoadFromFile(fileName)
  
  ' Return the picture object
  Set convertPageToPicture = pictureObj  
End Function

'
'  loadDocument
'  
'  Loads the specified PDF file and returns a PDDocument object that 
'  provides access to it.
'  
'  Parameters:
'    fileName - The fully-qualified name of the desired PDF file.
'    
'  Result:
'    The PDDocument object that represents the specified PDF file.
'
Function loadDocument(fileName)
  Dim docObj
  
  ' Load the specified PDF file to the PDDocument object
  Set docObj = dotNET.org_apache_pdfbox_pdmodel.PDDocument.load(fileName)
  ''Set docObj = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_2(fileName)
  
  ' Return the resulting PDDocument object
  Set loadDocument = docObj
End Function

Function loadDocumentURL(URL)
  Dim docObj
  
  ' Load the specified PDF file to the PDDocument object
  Set docObj = dotNET.org_apache_pdfbox_pdmodel.PDDocument.load_10(URL, True)
  ''Set docObj = JavaClasses.org_apache_pdfbox_pdmodel.PDDocument.load_2(fileName)
  
  ' Return the resulting PDDocument object
  Set loadDocument = docObj
End Function
'
'  getAllPages
'  
'  Returns a collection of the document's pages.
'  
'  Parameters:
'    docObj - The PDDocument object that corresponds to your PDF file.
'    
'  Result:
'    The Array of the document's pages.
'
Function getAllPages(docObj)
  Dim catalog, pageArray

  ' Get the catalog object
  Set catalog = docObj.getDocumentCatalog()
  
  ' Get the page collection
  Set pageArray = catalog.getAllPages()
  
  ' Return the collection
  Set getAllPages = pageArray
End Function


'  getPage
'  
'  Returns a page from the document by the page's index.
'  
'  Parameters:
'    docObj - The PDDocument object that corresponds to the loaded PDF file.
'    pageIndex - A zero-based index of the desired page.
'    
'  Result:
'    The PDPage object that represents the desired page.

Function getPage(docObj, pageIndex)

  Dim pageArray, pageObj

  ' Obtain a collection of the pages  
  Set pageArray = docObj.getDocumentCatalog().getAllPages()
  
  ' Obtain the specified page
  Set pageObj =  pageArray.get(pageIndex)
  
  ' Return the result
  Set getPage = pageObj
End Function